// This file was GENERATED with proto3d_glcorearb_gen.py,
// part of proto3d (hosted at https://github.com/philix/proto3d).
//
// vim: fdm=marker
//
// You MUST
//
//     #define PROTO3D_GLCOREARB_IMPLEMENTATION
//
// in EXACTLY _one_ C or C++ file that includes this header,
// BEFORE the include, like this:
//
//     #define PROTO3D_GLCOREARB_IMPLEMENTATION
//     #include "proto3d_glcorearb.h"
//
// All other files should just #include "proto3d_glcorearb.h"
// without the #define.
//
//
// proto3d_glcorearb.h is for use with OpenGL core profile
// implementations.
//
// It includes only APIs in the latest OpenGL core profile
// implementation together with APIs in newer ARB extensions
// which can be supported by the core profile. It does not, and
// never will include functionality removed from the core
// profile, such as fixed-function vertex and fragment
// processing.
//
// DO NOT #include both proto3d_glcorearb.h and either of
// <GL/gl.h> or <GL/glext.h> in the same source file.
#ifndef PROTO3D_GLCOREARB_H_
#define PROTO3D_GLCOREARB_H_

// In Debug mode we need the prototypes since we generate a debug
// implementation of all gl* functions.
#ifndef NDEBUG
# define GL_GLEXT_PROTOTYPES
#else
// API aliases {{{
# define glCullFace _glCullFace
# define glFrontFace _glFrontFace
# define glHint _glHint
# define glLineWidth _glLineWidth
# define glPointSize _glPointSize
# define glPolygonMode _glPolygonMode
# define glScissor _glScissor
# define glTexParameterf _glTexParameterf
# define glTexParameterfv _glTexParameterfv
# define glTexParameteri _glTexParameteri
# define glTexParameteriv _glTexParameteriv
# define glTexImage1D _glTexImage1D
# define glTexImage2D _glTexImage2D
# define glDrawBuffer _glDrawBuffer
# define glClear _glClear
# define glClearColor _glClearColor
# define glClearStencil _glClearStencil
# define glClearDepth _glClearDepth
# define glStencilMask _glStencilMask
# define glColorMask _glColorMask
# define glDepthMask _glDepthMask
# define glDisable _glDisable
# define glEnable _glEnable
# define glFinish _glFinish
# define glFlush _glFlush
# define glBlendFunc _glBlendFunc
# define glLogicOp _glLogicOp
# define glStencilFunc _glStencilFunc
# define glStencilOp _glStencilOp
# define glDepthFunc _glDepthFunc
# define glPixelStoref _glPixelStoref
# define glPixelStorei _glPixelStorei
# define glReadBuffer _glReadBuffer
# define glReadPixels _glReadPixels
# define glGetBooleanv _glGetBooleanv
# define glGetDoublev _glGetDoublev
# define glGetError _glGetError
# define glGetFloatv _glGetFloatv
# define glGetIntegerv _glGetIntegerv
# define glGetString _glGetString
# define glGetTexImage _glGetTexImage
# define glGetTexParameterfv _glGetTexParameterfv
# define glGetTexParameteriv _glGetTexParameteriv
# define glGetTexLevelParameterfv _glGetTexLevelParameterfv
# define glGetTexLevelParameteriv _glGetTexLevelParameteriv
# define glIsEnabled _glIsEnabled
# define glDepthRange _glDepthRange
# define glViewport _glViewport
# define glDrawArrays _glDrawArrays
# define glDrawElements _glDrawElements
# define glGetPointerv _glGetPointerv
# define glPolygonOffset _glPolygonOffset
# define glCopyTexImage1D _glCopyTexImage1D
# define glCopyTexImage2D _glCopyTexImage2D
# define glCopyTexSubImage1D _glCopyTexSubImage1D
# define glCopyTexSubImage2D _glCopyTexSubImage2D
# define glTexSubImage1D _glTexSubImage1D
# define glTexSubImage2D _glTexSubImage2D
# define glBindTexture _glBindTexture
# define glDeleteTextures _glDeleteTextures
# define glGenTextures _glGenTextures
# define glIsTexture _glIsTexture
# define glDrawRangeElements _glDrawRangeElements
# define glTexImage3D _glTexImage3D
# define glTexSubImage3D _glTexSubImage3D
# define glCopyTexSubImage3D _glCopyTexSubImage3D
# define glActiveTexture _glActiveTexture
# define glSampleCoverage _glSampleCoverage
# define glCompressedTexImage3D _glCompressedTexImage3D
# define glCompressedTexImage2D _glCompressedTexImage2D
# define glCompressedTexImage1D _glCompressedTexImage1D
# define glCompressedTexSubImage3D _glCompressedTexSubImage3D
# define glCompressedTexSubImage2D _glCompressedTexSubImage2D
# define glCompressedTexSubImage1D _glCompressedTexSubImage1D
# define glGetCompressedTexImage _glGetCompressedTexImage
# define glBlendFuncSeparate _glBlendFuncSeparate
# define glMultiDrawArrays _glMultiDrawArrays
# define glMultiDrawElements _glMultiDrawElements
# define glPointParameterf _glPointParameterf
# define glPointParameterfv _glPointParameterfv
# define glPointParameteri _glPointParameteri
# define glPointParameteriv _glPointParameteriv
# define glBlendColor _glBlendColor
# define glBlendEquation _glBlendEquation
# define glGenQueries _glGenQueries
# define glDeleteQueries _glDeleteQueries
# define glIsQuery _glIsQuery
# define glBeginQuery _glBeginQuery
# define glEndQuery _glEndQuery
# define glGetQueryiv _glGetQueryiv
# define glGetQueryObjectiv _glGetQueryObjectiv
# define glGetQueryObjectuiv _glGetQueryObjectuiv
# define glBindBuffer _glBindBuffer
# define glDeleteBuffers _glDeleteBuffers
# define glGenBuffers _glGenBuffers
# define glIsBuffer _glIsBuffer
# define glBufferData _glBufferData
# define glBufferSubData _glBufferSubData
# define glGetBufferSubData _glGetBufferSubData
# define glMapBuffer _glMapBuffer
# define glUnmapBuffer _glUnmapBuffer
# define glGetBufferParameteriv _glGetBufferParameteriv
# define glGetBufferPointerv _glGetBufferPointerv
# define glBlendEquationSeparate _glBlendEquationSeparate
# define glDrawBuffers _glDrawBuffers
# define glStencilOpSeparate _glStencilOpSeparate
# define glStencilFuncSeparate _glStencilFuncSeparate
# define glStencilMaskSeparate _glStencilMaskSeparate
# define glAttachShader _glAttachShader
# define glBindAttribLocation _glBindAttribLocation
# define glCompileShader _glCompileShader
# define glCreateProgram _glCreateProgram
# define glCreateShader _glCreateShader
# define glDeleteProgram _glDeleteProgram
# define glDeleteShader _glDeleteShader
# define glDetachShader _glDetachShader
# define glDisableVertexAttribArray _glDisableVertexAttribArray
# define glEnableVertexAttribArray _glEnableVertexAttribArray
# define glGetActiveAttrib _glGetActiveAttrib
# define glGetActiveUniform _glGetActiveUniform
# define glGetAttachedShaders _glGetAttachedShaders
# define glGetAttribLocation _glGetAttribLocation
# define glGetProgramiv _glGetProgramiv
# define glGetProgramInfoLog _glGetProgramInfoLog
# define glGetShaderiv _glGetShaderiv
# define glGetShaderInfoLog _glGetShaderInfoLog
# define glGetShaderSource _glGetShaderSource
# define glGetUniformLocation _glGetUniformLocation
# define glGetUniformfv _glGetUniformfv
# define glGetUniformiv _glGetUniformiv
# define glGetVertexAttribdv _glGetVertexAttribdv
# define glGetVertexAttribfv _glGetVertexAttribfv
# define glGetVertexAttribiv _glGetVertexAttribiv
# define glGetVertexAttribPointerv _glGetVertexAttribPointerv
# define glIsProgram _glIsProgram
# define glIsShader _glIsShader
# define glLinkProgram _glLinkProgram
# define glShaderSource _glShaderSource
# define glUseProgram _glUseProgram
# define glUniform1f _glUniform1f
# define glUniform2f _glUniform2f
# define glUniform3f _glUniform3f
# define glUniform4f _glUniform4f
# define glUniform1i _glUniform1i
# define glUniform2i _glUniform2i
# define glUniform3i _glUniform3i
# define glUniform4i _glUniform4i
# define glUniform1fv _glUniform1fv
# define glUniform2fv _glUniform2fv
# define glUniform3fv _glUniform3fv
# define glUniform4fv _glUniform4fv
# define glUniform1iv _glUniform1iv
# define glUniform2iv _glUniform2iv
# define glUniform3iv _glUniform3iv
# define glUniform4iv _glUniform4iv
# define glUniformMatrix2fv _glUniformMatrix2fv
# define glUniformMatrix3fv _glUniformMatrix3fv
# define glUniformMatrix4fv _glUniformMatrix4fv
# define glValidateProgram _glValidateProgram
# define glVertexAttrib1d _glVertexAttrib1d
# define glVertexAttrib1dv _glVertexAttrib1dv
# define glVertexAttrib1f _glVertexAttrib1f
# define glVertexAttrib1fv _glVertexAttrib1fv
# define glVertexAttrib1s _glVertexAttrib1s
# define glVertexAttrib1sv _glVertexAttrib1sv
# define glVertexAttrib2d _glVertexAttrib2d
# define glVertexAttrib2dv _glVertexAttrib2dv
# define glVertexAttrib2f _glVertexAttrib2f
# define glVertexAttrib2fv _glVertexAttrib2fv
# define glVertexAttrib2s _glVertexAttrib2s
# define glVertexAttrib2sv _glVertexAttrib2sv
# define glVertexAttrib3d _glVertexAttrib3d
# define glVertexAttrib3dv _glVertexAttrib3dv
# define glVertexAttrib3f _glVertexAttrib3f
# define glVertexAttrib3fv _glVertexAttrib3fv
# define glVertexAttrib3s _glVertexAttrib3s
# define glVertexAttrib3sv _glVertexAttrib3sv
# define glVertexAttrib4Nbv _glVertexAttrib4Nbv
# define glVertexAttrib4Niv _glVertexAttrib4Niv
# define glVertexAttrib4Nsv _glVertexAttrib4Nsv
# define glVertexAttrib4Nub _glVertexAttrib4Nub
# define glVertexAttrib4Nubv _glVertexAttrib4Nubv
# define glVertexAttrib4Nuiv _glVertexAttrib4Nuiv
# define glVertexAttrib4Nusv _glVertexAttrib4Nusv
# define glVertexAttrib4bv _glVertexAttrib4bv
# define glVertexAttrib4d _glVertexAttrib4d
# define glVertexAttrib4dv _glVertexAttrib4dv
# define glVertexAttrib4f _glVertexAttrib4f
# define glVertexAttrib4fv _glVertexAttrib4fv
# define glVertexAttrib4iv _glVertexAttrib4iv
# define glVertexAttrib4s _glVertexAttrib4s
# define glVertexAttrib4sv _glVertexAttrib4sv
# define glVertexAttrib4ubv _glVertexAttrib4ubv
# define glVertexAttrib4uiv _glVertexAttrib4uiv
# define glVertexAttrib4usv _glVertexAttrib4usv
# define glVertexAttribPointer _glVertexAttribPointer
# define glUniformMatrix2x3fv _glUniformMatrix2x3fv
# define glUniformMatrix3x2fv _glUniformMatrix3x2fv
# define glUniformMatrix2x4fv _glUniformMatrix2x4fv
# define glUniformMatrix4x2fv _glUniformMatrix4x2fv
# define glUniformMatrix3x4fv _glUniformMatrix3x4fv
# define glUniformMatrix4x3fv _glUniformMatrix4x3fv
# define glColorMaski _glColorMaski
# define glGetBooleani_v _glGetBooleani_v
# define glGetIntegeri_v _glGetIntegeri_v
# define glEnablei _glEnablei
# define glDisablei _glDisablei
# define glIsEnabledi _glIsEnabledi
# define glBeginTransformFeedback _glBeginTransformFeedback
# define glEndTransformFeedback _glEndTransformFeedback
# define glBindBufferRange _glBindBufferRange
# define glBindBufferBase _glBindBufferBase
# define glTransformFeedbackVaryings _glTransformFeedbackVaryings
# define glGetTransformFeedbackVarying _glGetTransformFeedbackVarying
# define glClampColor _glClampColor
# define glBeginConditionalRender _glBeginConditionalRender
# define glEndConditionalRender _glEndConditionalRender
# define glVertexAttribIPointer _glVertexAttribIPointer
# define glGetVertexAttribIiv _glGetVertexAttribIiv
# define glGetVertexAttribIuiv _glGetVertexAttribIuiv
# define glVertexAttribI1i _glVertexAttribI1i
# define glVertexAttribI2i _glVertexAttribI2i
# define glVertexAttribI3i _glVertexAttribI3i
# define glVertexAttribI4i _glVertexAttribI4i
# define glVertexAttribI1ui _glVertexAttribI1ui
# define glVertexAttribI2ui _glVertexAttribI2ui
# define glVertexAttribI3ui _glVertexAttribI3ui
# define glVertexAttribI4ui _glVertexAttribI4ui
# define glVertexAttribI1iv _glVertexAttribI1iv
# define glVertexAttribI2iv _glVertexAttribI2iv
# define glVertexAttribI3iv _glVertexAttribI3iv
# define glVertexAttribI4iv _glVertexAttribI4iv
# define glVertexAttribI1uiv _glVertexAttribI1uiv
# define glVertexAttribI2uiv _glVertexAttribI2uiv
# define glVertexAttribI3uiv _glVertexAttribI3uiv
# define glVertexAttribI4uiv _glVertexAttribI4uiv
# define glVertexAttribI4bv _glVertexAttribI4bv
# define glVertexAttribI4sv _glVertexAttribI4sv
# define glVertexAttribI4ubv _glVertexAttribI4ubv
# define glVertexAttribI4usv _glVertexAttribI4usv
# define glGetUniformuiv _glGetUniformuiv
# define glBindFragDataLocation _glBindFragDataLocation
# define glGetFragDataLocation _glGetFragDataLocation
# define glUniform1ui _glUniform1ui
# define glUniform2ui _glUniform2ui
# define glUniform3ui _glUniform3ui
# define glUniform4ui _glUniform4ui
# define glUniform1uiv _glUniform1uiv
# define glUniform2uiv _glUniform2uiv
# define glUniform3uiv _glUniform3uiv
# define glUniform4uiv _glUniform4uiv
# define glTexParameterIiv _glTexParameterIiv
# define glTexParameterIuiv _glTexParameterIuiv
# define glGetTexParameterIiv _glGetTexParameterIiv
# define glGetTexParameterIuiv _glGetTexParameterIuiv
# define glClearBufferiv _glClearBufferiv
# define glClearBufferuiv _glClearBufferuiv
# define glClearBufferfv _glClearBufferfv
# define glClearBufferfi _glClearBufferfi
# define glGetStringi _glGetStringi
# define glIsRenderbuffer _glIsRenderbuffer
# define glBindRenderbuffer _glBindRenderbuffer
# define glDeleteRenderbuffers _glDeleteRenderbuffers
# define glGenRenderbuffers _glGenRenderbuffers
# define glRenderbufferStorage _glRenderbufferStorage
# define glGetRenderbufferParameteriv _glGetRenderbufferParameteriv
# define glIsFramebuffer _glIsFramebuffer
# define glBindFramebuffer _glBindFramebuffer
# define glDeleteFramebuffers _glDeleteFramebuffers
# define glGenFramebuffers _glGenFramebuffers
# define glCheckFramebufferStatus _glCheckFramebufferStatus
# define glFramebufferTexture1D _glFramebufferTexture1D
# define glFramebufferTexture2D _glFramebufferTexture2D
# define glFramebufferTexture3D _glFramebufferTexture3D
# define glFramebufferRenderbuffer _glFramebufferRenderbuffer
# define glGetFramebufferAttachmentParameteriv _glGetFramebufferAttachmentParameteriv
# define glGenerateMipmap _glGenerateMipmap
# define glBlitFramebuffer _glBlitFramebuffer
# define glRenderbufferStorageMultisample _glRenderbufferStorageMultisample
# define glFramebufferTextureLayer _glFramebufferTextureLayer
# define glMapBufferRange _glMapBufferRange
# define glFlushMappedBufferRange _glFlushMappedBufferRange
# define glBindVertexArray _glBindVertexArray
# define glDeleteVertexArrays _glDeleteVertexArrays
# define glGenVertexArrays _glGenVertexArrays
# define glIsVertexArray _glIsVertexArray
# define glDrawArraysInstanced _glDrawArraysInstanced
# define glDrawElementsInstanced _glDrawElementsInstanced
# define glTexBuffer _glTexBuffer
# define glPrimitiveRestartIndex _glPrimitiveRestartIndex
# define glCopyBufferSubData _glCopyBufferSubData
# define glGetUniformIndices _glGetUniformIndices
# define glGetActiveUniformsiv _glGetActiveUniformsiv
# define glGetActiveUniformName _glGetActiveUniformName
# define glGetUniformBlockIndex _glGetUniformBlockIndex
# define glGetActiveUniformBlockiv _glGetActiveUniformBlockiv
# define glGetActiveUniformBlockName _glGetActiveUniformBlockName
# define glUniformBlockBinding _glUniformBlockBinding
# define glDrawElementsBaseVertex _glDrawElementsBaseVertex
# define glDrawRangeElementsBaseVertex _glDrawRangeElementsBaseVertex
# define glDrawElementsInstancedBaseVertex _glDrawElementsInstancedBaseVertex
# define glMultiDrawElementsBaseVertex _glMultiDrawElementsBaseVertex
# define glProvokingVertex _glProvokingVertex
# define glFenceSync _glFenceSync
# define glIsSync _glIsSync
# define glDeleteSync _glDeleteSync
# define glClientWaitSync _glClientWaitSync
# define glWaitSync _glWaitSync
# define glGetInteger64v _glGetInteger64v
# define glGetSynciv _glGetSynciv
# define glGetInteger64i_v _glGetInteger64i_v
# define glGetBufferParameteri64v _glGetBufferParameteri64v
# define glFramebufferTexture _glFramebufferTexture
# define glTexImage2DMultisample _glTexImage2DMultisample
# define glTexImage3DMultisample _glTexImage3DMultisample
# define glGetMultisamplefv _glGetMultisamplefv
# define glSampleMaski _glSampleMaski
# define glBindFragDataLocationIndexed _glBindFragDataLocationIndexed
# define glGetFragDataIndex _glGetFragDataIndex
# define glGenSamplers _glGenSamplers
# define glDeleteSamplers _glDeleteSamplers
# define glIsSampler _glIsSampler
# define glBindSampler _glBindSampler
# define glSamplerParameteri _glSamplerParameteri
# define glSamplerParameteriv _glSamplerParameteriv
# define glSamplerParameterf _glSamplerParameterf
# define glSamplerParameterfv _glSamplerParameterfv
# define glSamplerParameterIiv _glSamplerParameterIiv
# define glSamplerParameterIuiv _glSamplerParameterIuiv
# define glGetSamplerParameteriv _glGetSamplerParameteriv
# define glGetSamplerParameterIiv _glGetSamplerParameterIiv
# define glGetSamplerParameterfv _glGetSamplerParameterfv
# define glGetSamplerParameterIuiv _glGetSamplerParameterIuiv
# define glQueryCounter _glQueryCounter
# define glGetQueryObjecti64v _glGetQueryObjecti64v
# define glGetQueryObjectui64v _glGetQueryObjectui64v
# define glVertexAttribDivisor _glVertexAttribDivisor
# define glVertexAttribP1ui _glVertexAttribP1ui
# define glVertexAttribP1uiv _glVertexAttribP1uiv
# define glVertexAttribP2ui _glVertexAttribP2ui
# define glVertexAttribP2uiv _glVertexAttribP2uiv
# define glVertexAttribP3ui _glVertexAttribP3ui
# define glVertexAttribP3uiv _glVertexAttribP3uiv
# define glVertexAttribP4ui _glVertexAttribP4ui
# define glVertexAttribP4uiv _glVertexAttribP4uiv
# define glMinSampleShading _glMinSampleShading
# define glBlendEquationi _glBlendEquationi
# define glBlendEquationSeparatei _glBlendEquationSeparatei
# define glBlendFunci _glBlendFunci
# define glBlendFuncSeparatei _glBlendFuncSeparatei
# define glDrawArraysIndirect _glDrawArraysIndirect
# define glDrawElementsIndirect _glDrawElementsIndirect
# define glUniform1d _glUniform1d
# define glUniform2d _glUniform2d
# define glUniform3d _glUniform3d
# define glUniform4d _glUniform4d
# define glUniform1dv _glUniform1dv
# define glUniform2dv _glUniform2dv
# define glUniform3dv _glUniform3dv
# define glUniform4dv _glUniform4dv
# define glUniformMatrix2dv _glUniformMatrix2dv
# define glUniformMatrix3dv _glUniformMatrix3dv
# define glUniformMatrix4dv _glUniformMatrix4dv
# define glUniformMatrix2x3dv _glUniformMatrix2x3dv
# define glUniformMatrix2x4dv _glUniformMatrix2x4dv
# define glUniformMatrix3x2dv _glUniformMatrix3x2dv
# define glUniformMatrix3x4dv _glUniformMatrix3x4dv
# define glUniformMatrix4x2dv _glUniformMatrix4x2dv
# define glUniformMatrix4x3dv _glUniformMatrix4x3dv
# define glGetUniformdv _glGetUniformdv
# define glGetSubroutineUniformLocation _glGetSubroutineUniformLocation
# define glGetSubroutineIndex _glGetSubroutineIndex
# define glGetActiveSubroutineUniformiv _glGetActiveSubroutineUniformiv
# define glGetActiveSubroutineUniformName _glGetActiveSubroutineUniformName
# define glGetActiveSubroutineName _glGetActiveSubroutineName
# define glUniformSubroutinesuiv _glUniformSubroutinesuiv
# define glGetUniformSubroutineuiv _glGetUniformSubroutineuiv
# define glGetProgramStageiv _glGetProgramStageiv
# define glPatchParameteri _glPatchParameteri
# define glPatchParameterfv _glPatchParameterfv
# define glBindTransformFeedback _glBindTransformFeedback
# define glDeleteTransformFeedbacks _glDeleteTransformFeedbacks
# define glGenTransformFeedbacks _glGenTransformFeedbacks
# define glIsTransformFeedback _glIsTransformFeedback
# define glPauseTransformFeedback _glPauseTransformFeedback
# define glResumeTransformFeedback _glResumeTransformFeedback
# define glDrawTransformFeedback _glDrawTransformFeedback
# define glDrawTransformFeedbackStream _glDrawTransformFeedbackStream
# define glBeginQueryIndexed _glBeginQueryIndexed
# define glEndQueryIndexed _glEndQueryIndexed
# define glGetQueryIndexediv _glGetQueryIndexediv
# define glReleaseShaderCompiler _glReleaseShaderCompiler
# define glShaderBinary _glShaderBinary
# define glGetShaderPrecisionFormat _glGetShaderPrecisionFormat
# define glDepthRangef _glDepthRangef
# define glClearDepthf _glClearDepthf
# define glGetProgramBinary _glGetProgramBinary
# define glProgramBinary _glProgramBinary
# define glProgramParameteri _glProgramParameteri
# define glUseProgramStages _glUseProgramStages
# define glActiveShaderProgram _glActiveShaderProgram
# define glCreateShaderProgramv _glCreateShaderProgramv
# define glBindProgramPipeline _glBindProgramPipeline
# define glDeleteProgramPipelines _glDeleteProgramPipelines
# define glGenProgramPipelines _glGenProgramPipelines
# define glIsProgramPipeline _glIsProgramPipeline
# define glGetProgramPipelineiv _glGetProgramPipelineiv
# define glProgramUniform1i _glProgramUniform1i
# define glProgramUniform1iv _glProgramUniform1iv
# define glProgramUniform1f _glProgramUniform1f
# define glProgramUniform1fv _glProgramUniform1fv
# define glProgramUniform1d _glProgramUniform1d
# define glProgramUniform1dv _glProgramUniform1dv
# define glProgramUniform1ui _glProgramUniform1ui
# define glProgramUniform1uiv _glProgramUniform1uiv
# define glProgramUniform2i _glProgramUniform2i
# define glProgramUniform2iv _glProgramUniform2iv
# define glProgramUniform2f _glProgramUniform2f
# define glProgramUniform2fv _glProgramUniform2fv
# define glProgramUniform2d _glProgramUniform2d
# define glProgramUniform2dv _glProgramUniform2dv
# define glProgramUniform2ui _glProgramUniform2ui
# define glProgramUniform2uiv _glProgramUniform2uiv
# define glProgramUniform3i _glProgramUniform3i
# define glProgramUniform3iv _glProgramUniform3iv
# define glProgramUniform3f _glProgramUniform3f
# define glProgramUniform3fv _glProgramUniform3fv
# define glProgramUniform3d _glProgramUniform3d
# define glProgramUniform3dv _glProgramUniform3dv
# define glProgramUniform3ui _glProgramUniform3ui
# define glProgramUniform3uiv _glProgramUniform3uiv
# define glProgramUniform4i _glProgramUniform4i
# define glProgramUniform4iv _glProgramUniform4iv
# define glProgramUniform4f _glProgramUniform4f
# define glProgramUniform4fv _glProgramUniform4fv
# define glProgramUniform4d _glProgramUniform4d
# define glProgramUniform4dv _glProgramUniform4dv
# define glProgramUniform4ui _glProgramUniform4ui
# define glProgramUniform4uiv _glProgramUniform4uiv
# define glProgramUniformMatrix2fv _glProgramUniformMatrix2fv
# define glProgramUniformMatrix3fv _glProgramUniformMatrix3fv
# define glProgramUniformMatrix4fv _glProgramUniformMatrix4fv
# define glProgramUniformMatrix2dv _glProgramUniformMatrix2dv
# define glProgramUniformMatrix3dv _glProgramUniformMatrix3dv
# define glProgramUniformMatrix4dv _glProgramUniformMatrix4dv
# define glProgramUniformMatrix2x3fv _glProgramUniformMatrix2x3fv
# define glProgramUniformMatrix3x2fv _glProgramUniformMatrix3x2fv
# define glProgramUniformMatrix2x4fv _glProgramUniformMatrix2x4fv
# define glProgramUniformMatrix4x2fv _glProgramUniformMatrix4x2fv
# define glProgramUniformMatrix3x4fv _glProgramUniformMatrix3x4fv
# define glProgramUniformMatrix4x3fv _glProgramUniformMatrix4x3fv
# define glProgramUniformMatrix2x3dv _glProgramUniformMatrix2x3dv
# define glProgramUniformMatrix3x2dv _glProgramUniformMatrix3x2dv
# define glProgramUniformMatrix2x4dv _glProgramUniformMatrix2x4dv
# define glProgramUniformMatrix4x2dv _glProgramUniformMatrix4x2dv
# define glProgramUniformMatrix3x4dv _glProgramUniformMatrix3x4dv
# define glProgramUniformMatrix4x3dv _glProgramUniformMatrix4x3dv
# define glValidateProgramPipeline _glValidateProgramPipeline
# define glGetProgramPipelineInfoLog _glGetProgramPipelineInfoLog
# define glVertexAttribL1d _glVertexAttribL1d
# define glVertexAttribL2d _glVertexAttribL2d
# define glVertexAttribL3d _glVertexAttribL3d
# define glVertexAttribL4d _glVertexAttribL4d
# define glVertexAttribL1dv _glVertexAttribL1dv
# define glVertexAttribL2dv _glVertexAttribL2dv
# define glVertexAttribL3dv _glVertexAttribL3dv
# define glVertexAttribL4dv _glVertexAttribL4dv
# define glVertexAttribLPointer _glVertexAttribLPointer
# define glGetVertexAttribLdv _glGetVertexAttribLdv
# define glViewportArrayv _glViewportArrayv
# define glViewportIndexedf _glViewportIndexedf
# define glViewportIndexedfv _glViewportIndexedfv
# define glScissorArrayv _glScissorArrayv
# define glScissorIndexed _glScissorIndexed
# define glScissorIndexedv _glScissorIndexedv
# define glDepthRangeArrayv _glDepthRangeArrayv
# define glDepthRangeIndexed _glDepthRangeIndexed
# define glGetFloati_v _glGetFloati_v
# define glGetDoublei_v _glGetDoublei_v
# define glDrawArraysInstancedBaseInstance _glDrawArraysInstancedBaseInstance
# define glDrawElementsInstancedBaseInstance _glDrawElementsInstancedBaseInstance
# define glDrawElementsInstancedBaseVertexBaseInstance _glDrawElementsInstancedBaseVertexBaseInstance
# define glGetInternalformativ _glGetInternalformativ
# define glGetActiveAtomicCounterBufferiv _glGetActiveAtomicCounterBufferiv
# define glBindImageTexture _glBindImageTexture
# define glMemoryBarrier _glMemoryBarrier
# define glTexStorage1D _glTexStorage1D
# define glTexStorage2D _glTexStorage2D
# define glTexStorage3D _glTexStorage3D
# define glDrawTransformFeedbackInstanced _glDrawTransformFeedbackInstanced
# define glDrawTransformFeedbackStreamInstanced _glDrawTransformFeedbackStreamInstanced
# define glClearBufferData _glClearBufferData
# define glClearBufferSubData _glClearBufferSubData
# define glDispatchCompute _glDispatchCompute
# define glDispatchComputeIndirect _glDispatchComputeIndirect
# define glCopyImageSubData _glCopyImageSubData
# define glFramebufferParameteri _glFramebufferParameteri
# define glGetFramebufferParameteriv _glGetFramebufferParameteriv
# define glGetInternalformati64v _glGetInternalformati64v
# define glInvalidateTexSubImage _glInvalidateTexSubImage
# define glInvalidateTexImage _glInvalidateTexImage
# define glInvalidateBufferSubData _glInvalidateBufferSubData
# define glInvalidateBufferData _glInvalidateBufferData
# define glInvalidateFramebuffer _glInvalidateFramebuffer
# define glInvalidateSubFramebuffer _glInvalidateSubFramebuffer
# define glMultiDrawArraysIndirect _glMultiDrawArraysIndirect
# define glMultiDrawElementsIndirect _glMultiDrawElementsIndirect
# define glGetProgramInterfaceiv _glGetProgramInterfaceiv
# define glGetProgramResourceIndex _glGetProgramResourceIndex
# define glGetProgramResourceName _glGetProgramResourceName
# define glGetProgramResourceiv _glGetProgramResourceiv
# define glGetProgramResourceLocation _glGetProgramResourceLocation
# define glGetProgramResourceLocationIndex _glGetProgramResourceLocationIndex
# define glShaderStorageBlockBinding _glShaderStorageBlockBinding
# define glTexBufferRange _glTexBufferRange
# define glTexStorage2DMultisample _glTexStorage2DMultisample
# define glTexStorage3DMultisample _glTexStorage3DMultisample
# define glTextureView _glTextureView
# define glBindVertexBuffer _glBindVertexBuffer
# define glVertexAttribFormat _glVertexAttribFormat
# define glVertexAttribIFormat _glVertexAttribIFormat
# define glVertexAttribLFormat _glVertexAttribLFormat
# define glVertexAttribBinding _glVertexAttribBinding
# define glVertexBindingDivisor _glVertexBindingDivisor
# define glDebugMessageControl _glDebugMessageControl
# define glDebugMessageInsert _glDebugMessageInsert
# define glDebugMessageCallback _glDebugMessageCallback
# define glGetDebugMessageLog _glGetDebugMessageLog
# define glPushDebugGroup _glPushDebugGroup
# define glPopDebugGroup _glPopDebugGroup
# define glObjectLabel _glObjectLabel
# define glGetObjectLabel _glGetObjectLabel
# define glObjectPtrLabel _glObjectPtrLabel
# define glGetObjectPtrLabel _glGetObjectPtrLabel
# define glBufferStorage _glBufferStorage
# define glClearTexImage _glClearTexImage
# define glClearTexSubImage _glClearTexSubImage
# define glBindBuffersBase _glBindBuffersBase
# define glBindBuffersRange _glBindBuffersRange
# define glBindTextures _glBindTextures
# define glBindSamplers _glBindSamplers
# define glBindImageTextures _glBindImageTextures
# define glBindVertexBuffers _glBindVertexBuffers
# define glClipControl _glClipControl
# define glCreateTransformFeedbacks _glCreateTransformFeedbacks
# define glTransformFeedbackBufferBase _glTransformFeedbackBufferBase
# define glTransformFeedbackBufferRange _glTransformFeedbackBufferRange
# define glGetTransformFeedbackiv _glGetTransformFeedbackiv
# define glGetTransformFeedbacki_v _glGetTransformFeedbacki_v
# define glGetTransformFeedbacki64_v _glGetTransformFeedbacki64_v
# define glCreateBuffers _glCreateBuffers
# define glNamedBufferStorage _glNamedBufferStorage
# define glNamedBufferData _glNamedBufferData
# define glNamedBufferSubData _glNamedBufferSubData
# define glCopyNamedBufferSubData _glCopyNamedBufferSubData
# define glClearNamedBufferData _glClearNamedBufferData
# define glClearNamedBufferSubData _glClearNamedBufferSubData
# define glMapNamedBuffer _glMapNamedBuffer
# define glMapNamedBufferRange _glMapNamedBufferRange
# define glUnmapNamedBuffer _glUnmapNamedBuffer
# define glFlushMappedNamedBufferRange _glFlushMappedNamedBufferRange
# define glGetNamedBufferParameteriv _glGetNamedBufferParameteriv
# define glGetNamedBufferParameteri64v _glGetNamedBufferParameteri64v
# define glGetNamedBufferPointerv _glGetNamedBufferPointerv
# define glGetNamedBufferSubData _glGetNamedBufferSubData
# define glCreateFramebuffers _glCreateFramebuffers
# define glNamedFramebufferRenderbuffer _glNamedFramebufferRenderbuffer
# define glNamedFramebufferParameteri _glNamedFramebufferParameteri
# define glNamedFramebufferTexture _glNamedFramebufferTexture
# define glNamedFramebufferTextureLayer _glNamedFramebufferTextureLayer
# define glNamedFramebufferDrawBuffer _glNamedFramebufferDrawBuffer
# define glNamedFramebufferDrawBuffers _glNamedFramebufferDrawBuffers
# define glNamedFramebufferReadBuffer _glNamedFramebufferReadBuffer
# define glInvalidateNamedFramebufferData _glInvalidateNamedFramebufferData
# define glInvalidateNamedFramebufferSubData _glInvalidateNamedFramebufferSubData
# define glClearNamedFramebufferiv _glClearNamedFramebufferiv
# define glClearNamedFramebufferuiv _glClearNamedFramebufferuiv
# define glClearNamedFramebufferfv _glClearNamedFramebufferfv
# define glClearNamedFramebufferfi _glClearNamedFramebufferfi
# define glBlitNamedFramebuffer _glBlitNamedFramebuffer
# define glCheckNamedFramebufferStatus _glCheckNamedFramebufferStatus
# define glGetNamedFramebufferParameteriv _glGetNamedFramebufferParameteriv
# define glGetNamedFramebufferAttachmentParameteriv _glGetNamedFramebufferAttachmentParameteriv
# define glCreateRenderbuffers _glCreateRenderbuffers
# define glNamedRenderbufferStorage _glNamedRenderbufferStorage
# define glNamedRenderbufferStorageMultisample _glNamedRenderbufferStorageMultisample
# define glGetNamedRenderbufferParameteriv _glGetNamedRenderbufferParameteriv
# define glCreateTextures _glCreateTextures
# define glTextureBuffer _glTextureBuffer
# define glTextureBufferRange _glTextureBufferRange
# define glTextureStorage1D _glTextureStorage1D
# define glTextureStorage2D _glTextureStorage2D
# define glTextureStorage3D _glTextureStorage3D
# define glTextureStorage2DMultisample _glTextureStorage2DMultisample
# define glTextureStorage3DMultisample _glTextureStorage3DMultisample
# define glTextureSubImage1D _glTextureSubImage1D
# define glTextureSubImage2D _glTextureSubImage2D
# define glTextureSubImage3D _glTextureSubImage3D
# define glCompressedTextureSubImage1D _glCompressedTextureSubImage1D
# define glCompressedTextureSubImage2D _glCompressedTextureSubImage2D
# define glCompressedTextureSubImage3D _glCompressedTextureSubImage3D
# define glCopyTextureSubImage1D _glCopyTextureSubImage1D
# define glCopyTextureSubImage2D _glCopyTextureSubImage2D
# define glCopyTextureSubImage3D _glCopyTextureSubImage3D
# define glTextureParameterf _glTextureParameterf
# define glTextureParameterfv _glTextureParameterfv
# define glTextureParameteri _glTextureParameteri
# define glTextureParameterIiv _glTextureParameterIiv
# define glTextureParameterIuiv _glTextureParameterIuiv
# define glTextureParameteriv _glTextureParameteriv
# define glGenerateTextureMipmap _glGenerateTextureMipmap
# define glBindTextureUnit _glBindTextureUnit
# define glGetTextureImage _glGetTextureImage
# define glGetCompressedTextureImage _glGetCompressedTextureImage
# define glGetTextureLevelParameterfv _glGetTextureLevelParameterfv
# define glGetTextureLevelParameteriv _glGetTextureLevelParameteriv
# define glGetTextureParameterfv _glGetTextureParameterfv
# define glGetTextureParameterIiv _glGetTextureParameterIiv
# define glGetTextureParameterIuiv _glGetTextureParameterIuiv
# define glGetTextureParameteriv _glGetTextureParameteriv
# define glCreateVertexArrays _glCreateVertexArrays
# define glDisableVertexArrayAttrib _glDisableVertexArrayAttrib
# define glEnableVertexArrayAttrib _glEnableVertexArrayAttrib
# define glVertexArrayElementBuffer _glVertexArrayElementBuffer
# define glVertexArrayVertexBuffer _glVertexArrayVertexBuffer
# define glVertexArrayVertexBuffers _glVertexArrayVertexBuffers
# define glVertexArrayAttribBinding _glVertexArrayAttribBinding
# define glVertexArrayAttribFormat _glVertexArrayAttribFormat
# define glVertexArrayAttribIFormat _glVertexArrayAttribIFormat
# define glVertexArrayAttribLFormat _glVertexArrayAttribLFormat
# define glVertexArrayBindingDivisor _glVertexArrayBindingDivisor
# define glGetVertexArrayiv _glGetVertexArrayiv
# define glGetVertexArrayIndexediv _glGetVertexArrayIndexediv
# define glGetVertexArrayIndexed64iv _glGetVertexArrayIndexed64iv
# define glCreateSamplers _glCreateSamplers
# define glCreateProgramPipelines _glCreateProgramPipelines
# define glCreateQueries _glCreateQueries
# define glGetQueryBufferObjecti64v _glGetQueryBufferObjecti64v
# define glGetQueryBufferObjectiv _glGetQueryBufferObjectiv
# define glGetQueryBufferObjectui64v _glGetQueryBufferObjectui64v
# define glGetQueryBufferObjectuiv _glGetQueryBufferObjectuiv
# define glMemoryBarrierByRegion _glMemoryBarrierByRegion
# define glGetTextureSubImage _glGetTextureSubImage
# define glGetCompressedTextureSubImage _glGetCompressedTextureSubImage
# define glGetGraphicsResetStatus _glGetGraphicsResetStatus
# define glGetnCompressedTexImage _glGetnCompressedTexImage
# define glGetnTexImage _glGetnTexImage
# define glGetnUniformdv _glGetnUniformdv
# define glGetnUniformfv _glGetnUniformfv
# define glGetnUniformiv _glGetnUniformiv
# define glGetnUniformuiv _glGetnUniformuiv
# define glReadnPixels _glReadnPixels
# define glTextureBarrier _glTextureBarrier
# define glSpecializeShader _glSpecializeShader
# define glMultiDrawArraysIndirectCount _glMultiDrawArraysIndirectCount
# define glMultiDrawElementsIndirectCount _glMultiDrawElementsIndirectCount
# define glPolygonOffsetClamp _glPolygonOffsetClamp
# define glPrimitiveBoundingBoxARB _glPrimitiveBoundingBoxARB
# define glGetTextureHandleARB _glGetTextureHandleARB
# define glGetTextureSamplerHandleARB _glGetTextureSamplerHandleARB
# define glMakeTextureHandleResidentARB _glMakeTextureHandleResidentARB
# define glMakeTextureHandleNonResidentARB _glMakeTextureHandleNonResidentARB
# define glGetImageHandleARB _glGetImageHandleARB
# define glMakeImageHandleResidentARB _glMakeImageHandleResidentARB
# define glMakeImageHandleNonResidentARB _glMakeImageHandleNonResidentARB
# define glUniformHandleui64ARB _glUniformHandleui64ARB
# define glUniformHandleui64vARB _glUniformHandleui64vARB
# define glProgramUniformHandleui64ARB _glProgramUniformHandleui64ARB
# define glProgramUniformHandleui64vARB _glProgramUniformHandleui64vARB
# define glIsTextureHandleResidentARB _glIsTextureHandleResidentARB
# define glIsImageHandleResidentARB _glIsImageHandleResidentARB
# define glVertexAttribL1ui64ARB _glVertexAttribL1ui64ARB
# define glVertexAttribL1ui64vARB _glVertexAttribL1ui64vARB
# define glGetVertexAttribLui64vARB _glGetVertexAttribLui64vARB
# define glCreateSyncFromCLeventARB _glCreateSyncFromCLeventARB
# define glDispatchComputeGroupSizeARB _glDispatchComputeGroupSizeARB
# define glDebugMessageControlARB _glDebugMessageControlARB
# define glDebugMessageInsertARB _glDebugMessageInsertARB
# define glDebugMessageCallbackARB _glDebugMessageCallbackARB
# define glGetDebugMessageLogARB _glGetDebugMessageLogARB
# define glBlendEquationiARB _glBlendEquationiARB
# define glBlendEquationSeparateiARB _glBlendEquationSeparateiARB
# define glBlendFunciARB _glBlendFunciARB
# define glBlendFuncSeparateiARB _glBlendFuncSeparateiARB
# define glDrawArraysInstancedARB _glDrawArraysInstancedARB
# define glDrawElementsInstancedARB _glDrawElementsInstancedARB
# define glProgramParameteriARB _glProgramParameteriARB
# define glFramebufferTextureARB _glFramebufferTextureARB
# define glFramebufferTextureLayerARB _glFramebufferTextureLayerARB
# define glFramebufferTextureFaceARB _glFramebufferTextureFaceARB
# define glSpecializeShaderARB _glSpecializeShaderARB
# define glUniform1i64ARB _glUniform1i64ARB
# define glUniform2i64ARB _glUniform2i64ARB
# define glUniform3i64ARB _glUniform3i64ARB
# define glUniform4i64ARB _glUniform4i64ARB
# define glUniform1i64vARB _glUniform1i64vARB
# define glUniform2i64vARB _glUniform2i64vARB
# define glUniform3i64vARB _glUniform3i64vARB
# define glUniform4i64vARB _glUniform4i64vARB
# define glUniform1ui64ARB _glUniform1ui64ARB
# define glUniform2ui64ARB _glUniform2ui64ARB
# define glUniform3ui64ARB _glUniform3ui64ARB
# define glUniform4ui64ARB _glUniform4ui64ARB
# define glUniform1ui64vARB _glUniform1ui64vARB
# define glUniform2ui64vARB _glUniform2ui64vARB
# define glUniform3ui64vARB _glUniform3ui64vARB
# define glUniform4ui64vARB _glUniform4ui64vARB
# define glGetUniformi64vARB _glGetUniformi64vARB
# define glGetUniformui64vARB _glGetUniformui64vARB
# define glGetnUniformi64vARB _glGetnUniformi64vARB
# define glGetnUniformui64vARB _glGetnUniformui64vARB
# define glProgramUniform1i64ARB _glProgramUniform1i64ARB
# define glProgramUniform2i64ARB _glProgramUniform2i64ARB
# define glProgramUniform3i64ARB _glProgramUniform3i64ARB
# define glProgramUniform4i64ARB _glProgramUniform4i64ARB
# define glProgramUniform1i64vARB _glProgramUniform1i64vARB
# define glProgramUniform2i64vARB _glProgramUniform2i64vARB
# define glProgramUniform3i64vARB _glProgramUniform3i64vARB
# define glProgramUniform4i64vARB _glProgramUniform4i64vARB
# define glProgramUniform1ui64ARB _glProgramUniform1ui64ARB
# define glProgramUniform2ui64ARB _glProgramUniform2ui64ARB
# define glProgramUniform3ui64ARB _glProgramUniform3ui64ARB
# define glProgramUniform4ui64ARB _glProgramUniform4ui64ARB
# define glProgramUniform1ui64vARB _glProgramUniform1ui64vARB
# define glProgramUniform2ui64vARB _glProgramUniform2ui64vARB
# define glProgramUniform3ui64vARB _glProgramUniform3ui64vARB
# define glProgramUniform4ui64vARB _glProgramUniform4ui64vARB
# define glMultiDrawArraysIndirectCountARB _glMultiDrawArraysIndirectCountARB
# define glMultiDrawElementsIndirectCountARB _glMultiDrawElementsIndirectCountARB
# define glVertexAttribDivisorARB _glVertexAttribDivisorARB
# define glMaxShaderCompilerThreadsARB _glMaxShaderCompilerThreadsARB
# define glGetGraphicsResetStatusARB _glGetGraphicsResetStatusARB
# define glGetnTexImageARB _glGetnTexImageARB
# define glReadnPixelsARB _glReadnPixelsARB
# define glGetnCompressedTexImageARB _glGetnCompressedTexImageARB
# define glGetnUniformfvARB _glGetnUniformfvARB
# define glGetnUniformivARB _glGetnUniformivARB
# define glGetnUniformuivARB _glGetnUniformuivARB
# define glGetnUniformdvARB _glGetnUniformdvARB
# define glFramebufferSampleLocationsfvARB _glFramebufferSampleLocationsfvARB
# define glNamedFramebufferSampleLocationsfvARB _glNamedFramebufferSampleLocationsfvARB
# define glEvaluateDepthValuesARB _glEvaluateDepthValuesARB
# define glMinSampleShadingARB _glMinSampleShadingARB
# define glNamedStringARB _glNamedStringARB
# define glDeleteNamedStringARB _glDeleteNamedStringARB
# define glCompileShaderIncludeARB _glCompileShaderIncludeARB
# define glIsNamedStringARB _glIsNamedStringARB
# define glGetNamedStringARB _glGetNamedStringARB
# define glGetNamedStringivARB _glGetNamedStringivARB
# define glBufferPageCommitmentARB _glBufferPageCommitmentARB
# define glNamedBufferPageCommitmentEXT _glNamedBufferPageCommitmentEXT
# define glNamedBufferPageCommitmentARB _glNamedBufferPageCommitmentARB
# define glTexPageCommitmentARB _glTexPageCommitmentARB
# define glTexBufferARB _glTexBufferARB
# define glBlendBarrierKHR _glBlendBarrierKHR
# define glMaxShaderCompilerThreadsKHR _glMaxShaderCompilerThreadsKHR
# define glGetPerfMonitorGroupsAMD _glGetPerfMonitorGroupsAMD
# define glGetPerfMonitorCountersAMD _glGetPerfMonitorCountersAMD
# define glGetPerfMonitorGroupStringAMD _glGetPerfMonitorGroupStringAMD
# define glGetPerfMonitorCounterStringAMD _glGetPerfMonitorCounterStringAMD
# define glGetPerfMonitorCounterInfoAMD _glGetPerfMonitorCounterInfoAMD
# define glGenPerfMonitorsAMD _glGenPerfMonitorsAMD
# define glDeletePerfMonitorsAMD _glDeletePerfMonitorsAMD
# define glSelectPerfMonitorCountersAMD _glSelectPerfMonitorCountersAMD
# define glBeginPerfMonitorAMD _glBeginPerfMonitorAMD
# define glEndPerfMonitorAMD _glEndPerfMonitorAMD
# define glGetPerfMonitorCounterDataAMD _glGetPerfMonitorCounterDataAMD
# define glLabelObjectEXT _glLabelObjectEXT
# define glGetObjectLabelEXT _glGetObjectLabelEXT
# define glInsertEventMarkerEXT _glInsertEventMarkerEXT
# define glPushGroupMarkerEXT _glPushGroupMarkerEXT
# define glPopGroupMarkerEXT _glPopGroupMarkerEXT
# define glMatrixLoadfEXT _glMatrixLoadfEXT
# define glMatrixLoaddEXT _glMatrixLoaddEXT
# define glMatrixMultfEXT _glMatrixMultfEXT
# define glMatrixMultdEXT _glMatrixMultdEXT
# define glMatrixLoadIdentityEXT _glMatrixLoadIdentityEXT
# define glMatrixRotatefEXT _glMatrixRotatefEXT
# define glMatrixRotatedEXT _glMatrixRotatedEXT
# define glMatrixScalefEXT _glMatrixScalefEXT
# define glMatrixScaledEXT _glMatrixScaledEXT
# define glMatrixTranslatefEXT _glMatrixTranslatefEXT
# define glMatrixTranslatedEXT _glMatrixTranslatedEXT
# define glMatrixFrustumEXT _glMatrixFrustumEXT
# define glMatrixOrthoEXT _glMatrixOrthoEXT
# define glMatrixPopEXT _glMatrixPopEXT
# define glMatrixPushEXT _glMatrixPushEXT
# define glClientAttribDefaultEXT _glClientAttribDefaultEXT
# define glPushClientAttribDefaultEXT _glPushClientAttribDefaultEXT
# define glTextureParameterfEXT _glTextureParameterfEXT
# define glTextureParameterfvEXT _glTextureParameterfvEXT
# define glTextureParameteriEXT _glTextureParameteriEXT
# define glTextureParameterivEXT _glTextureParameterivEXT
# define glTextureImage1DEXT _glTextureImage1DEXT
# define glTextureImage2DEXT _glTextureImage2DEXT
# define glTextureSubImage1DEXT _glTextureSubImage1DEXT
# define glTextureSubImage2DEXT _glTextureSubImage2DEXT
# define glCopyTextureImage1DEXT _glCopyTextureImage1DEXT
# define glCopyTextureImage2DEXT _glCopyTextureImage2DEXT
# define glCopyTextureSubImage1DEXT _glCopyTextureSubImage1DEXT
# define glCopyTextureSubImage2DEXT _glCopyTextureSubImage2DEXT
# define glGetTextureImageEXT _glGetTextureImageEXT
# define glGetTextureParameterfvEXT _glGetTextureParameterfvEXT
# define glGetTextureParameterivEXT _glGetTextureParameterivEXT
# define glGetTextureLevelParameterfvEXT _glGetTextureLevelParameterfvEXT
# define glGetTextureLevelParameterivEXT _glGetTextureLevelParameterivEXT
# define glTextureImage3DEXT _glTextureImage3DEXT
# define glTextureSubImage3DEXT _glTextureSubImage3DEXT
# define glCopyTextureSubImage3DEXT _glCopyTextureSubImage3DEXT
# define glBindMultiTextureEXT _glBindMultiTextureEXT
# define glMultiTexCoordPointerEXT _glMultiTexCoordPointerEXT
# define glMultiTexEnvfEXT _glMultiTexEnvfEXT
# define glMultiTexEnvfvEXT _glMultiTexEnvfvEXT
# define glMultiTexEnviEXT _glMultiTexEnviEXT
# define glMultiTexEnvivEXT _glMultiTexEnvivEXT
# define glMultiTexGendEXT _glMultiTexGendEXT
# define glMultiTexGendvEXT _glMultiTexGendvEXT
# define glMultiTexGenfEXT _glMultiTexGenfEXT
# define glMultiTexGenfvEXT _glMultiTexGenfvEXT
# define glMultiTexGeniEXT _glMultiTexGeniEXT
# define glMultiTexGenivEXT _glMultiTexGenivEXT
# define glGetMultiTexEnvfvEXT _glGetMultiTexEnvfvEXT
# define glGetMultiTexEnvivEXT _glGetMultiTexEnvivEXT
# define glGetMultiTexGendvEXT _glGetMultiTexGendvEXT
# define glGetMultiTexGenfvEXT _glGetMultiTexGenfvEXT
# define glGetMultiTexGenivEXT _glGetMultiTexGenivEXT
# define glMultiTexParameteriEXT _glMultiTexParameteriEXT
# define glMultiTexParameterivEXT _glMultiTexParameterivEXT
# define glMultiTexParameterfEXT _glMultiTexParameterfEXT
# define glMultiTexParameterfvEXT _glMultiTexParameterfvEXT
# define glMultiTexImage1DEXT _glMultiTexImage1DEXT
# define glMultiTexImage2DEXT _glMultiTexImage2DEXT
# define glMultiTexSubImage1DEXT _glMultiTexSubImage1DEXT
# define glMultiTexSubImage2DEXT _glMultiTexSubImage2DEXT
# define glCopyMultiTexImage1DEXT _glCopyMultiTexImage1DEXT
# define glCopyMultiTexImage2DEXT _glCopyMultiTexImage2DEXT
# define glCopyMultiTexSubImage1DEXT _glCopyMultiTexSubImage1DEXT
# define glCopyMultiTexSubImage2DEXT _glCopyMultiTexSubImage2DEXT
# define glGetMultiTexImageEXT _glGetMultiTexImageEXT
# define glGetMultiTexParameterfvEXT _glGetMultiTexParameterfvEXT
# define glGetMultiTexParameterivEXT _glGetMultiTexParameterivEXT
# define glGetMultiTexLevelParameterfvEXT _glGetMultiTexLevelParameterfvEXT
# define glGetMultiTexLevelParameterivEXT _glGetMultiTexLevelParameterivEXT
# define glMultiTexImage3DEXT _glMultiTexImage3DEXT
# define glMultiTexSubImage3DEXT _glMultiTexSubImage3DEXT
# define glCopyMultiTexSubImage3DEXT _glCopyMultiTexSubImage3DEXT
# define glEnableClientStateIndexedEXT _glEnableClientStateIndexedEXT
# define glDisableClientStateIndexedEXT _glDisableClientStateIndexedEXT
# define glGetFloatIndexedvEXT _glGetFloatIndexedvEXT
# define glGetDoubleIndexedvEXT _glGetDoubleIndexedvEXT
# define glGetPointerIndexedvEXT _glGetPointerIndexedvEXT
# define glEnableIndexedEXT _glEnableIndexedEXT
# define glDisableIndexedEXT _glDisableIndexedEXT
# define glIsEnabledIndexedEXT _glIsEnabledIndexedEXT
# define glGetIntegerIndexedvEXT _glGetIntegerIndexedvEXT
# define glGetBooleanIndexedvEXT _glGetBooleanIndexedvEXT
# define glCompressedTextureImage3DEXT _glCompressedTextureImage3DEXT
# define glCompressedTextureImage2DEXT _glCompressedTextureImage2DEXT
# define glCompressedTextureImage1DEXT _glCompressedTextureImage1DEXT
# define glCompressedTextureSubImage3DEXT _glCompressedTextureSubImage3DEXT
# define glCompressedTextureSubImage2DEXT _glCompressedTextureSubImage2DEXT
# define glCompressedTextureSubImage1DEXT _glCompressedTextureSubImage1DEXT
# define glGetCompressedTextureImageEXT _glGetCompressedTextureImageEXT
# define glCompressedMultiTexImage3DEXT _glCompressedMultiTexImage3DEXT
# define glCompressedMultiTexImage2DEXT _glCompressedMultiTexImage2DEXT
# define glCompressedMultiTexImage1DEXT _glCompressedMultiTexImage1DEXT
# define glCompressedMultiTexSubImage3DEXT _glCompressedMultiTexSubImage3DEXT
# define glCompressedMultiTexSubImage2DEXT _glCompressedMultiTexSubImage2DEXT
# define glCompressedMultiTexSubImage1DEXT _glCompressedMultiTexSubImage1DEXT
# define glGetCompressedMultiTexImageEXT _glGetCompressedMultiTexImageEXT
# define glMatrixLoadTransposefEXT _glMatrixLoadTransposefEXT
# define glMatrixLoadTransposedEXT _glMatrixLoadTransposedEXT
# define glMatrixMultTransposefEXT _glMatrixMultTransposefEXT
# define glMatrixMultTransposedEXT _glMatrixMultTransposedEXT
# define glNamedBufferDataEXT _glNamedBufferDataEXT
# define glNamedBufferSubDataEXT _glNamedBufferSubDataEXT
# define glMapNamedBufferEXT _glMapNamedBufferEXT
# define glUnmapNamedBufferEXT _glUnmapNamedBufferEXT
# define glGetNamedBufferParameterivEXT _glGetNamedBufferParameterivEXT
# define glGetNamedBufferPointervEXT _glGetNamedBufferPointervEXT
# define glGetNamedBufferSubDataEXT _glGetNamedBufferSubDataEXT
# define glProgramUniform1fEXT _glProgramUniform1fEXT
# define glProgramUniform2fEXT _glProgramUniform2fEXT
# define glProgramUniform3fEXT _glProgramUniform3fEXT
# define glProgramUniform4fEXT _glProgramUniform4fEXT
# define glProgramUniform1iEXT _glProgramUniform1iEXT
# define glProgramUniform2iEXT _glProgramUniform2iEXT
# define glProgramUniform3iEXT _glProgramUniform3iEXT
# define glProgramUniform4iEXT _glProgramUniform4iEXT
# define glProgramUniform1fvEXT _glProgramUniform1fvEXT
# define glProgramUniform2fvEXT _glProgramUniform2fvEXT
# define glProgramUniform3fvEXT _glProgramUniform3fvEXT
# define glProgramUniform4fvEXT _glProgramUniform4fvEXT
# define glProgramUniform1ivEXT _glProgramUniform1ivEXT
# define glProgramUniform2ivEXT _glProgramUniform2ivEXT
# define glProgramUniform3ivEXT _glProgramUniform3ivEXT
# define glProgramUniform4ivEXT _glProgramUniform4ivEXT
# define glProgramUniformMatrix2fvEXT _glProgramUniformMatrix2fvEXT
# define glProgramUniformMatrix3fvEXT _glProgramUniformMatrix3fvEXT
# define glProgramUniformMatrix4fvEXT _glProgramUniformMatrix4fvEXT
# define glProgramUniformMatrix2x3fvEXT _glProgramUniformMatrix2x3fvEXT
# define glProgramUniformMatrix3x2fvEXT _glProgramUniformMatrix3x2fvEXT
# define glProgramUniformMatrix2x4fvEXT _glProgramUniformMatrix2x4fvEXT
# define glProgramUniformMatrix4x2fvEXT _glProgramUniformMatrix4x2fvEXT
# define glProgramUniformMatrix3x4fvEXT _glProgramUniformMatrix3x4fvEXT
# define glProgramUniformMatrix4x3fvEXT _glProgramUniformMatrix4x3fvEXT
# define glTextureBufferEXT _glTextureBufferEXT
# define glMultiTexBufferEXT _glMultiTexBufferEXT
# define glTextureParameterIivEXT _glTextureParameterIivEXT
# define glTextureParameterIuivEXT _glTextureParameterIuivEXT
# define glGetTextureParameterIivEXT _glGetTextureParameterIivEXT
# define glGetTextureParameterIuivEXT _glGetTextureParameterIuivEXT
# define glMultiTexParameterIivEXT _glMultiTexParameterIivEXT
# define glMultiTexParameterIuivEXT _glMultiTexParameterIuivEXT
# define glGetMultiTexParameterIivEXT _glGetMultiTexParameterIivEXT
# define glGetMultiTexParameterIuivEXT _glGetMultiTexParameterIuivEXT
# define glProgramUniform1uiEXT _glProgramUniform1uiEXT
# define glProgramUniform2uiEXT _glProgramUniform2uiEXT
# define glProgramUniform3uiEXT _glProgramUniform3uiEXT
# define glProgramUniform4uiEXT _glProgramUniform4uiEXT
# define glProgramUniform1uivEXT _glProgramUniform1uivEXT
# define glProgramUniform2uivEXT _glProgramUniform2uivEXT
# define glProgramUniform3uivEXT _glProgramUniform3uivEXT
# define glProgramUniform4uivEXT _glProgramUniform4uivEXT
# define glNamedProgramLocalParameters4fvEXT _glNamedProgramLocalParameters4fvEXT
# define glNamedProgramLocalParameterI4iEXT _glNamedProgramLocalParameterI4iEXT
# define glNamedProgramLocalParameterI4ivEXT _glNamedProgramLocalParameterI4ivEXT
# define glNamedProgramLocalParametersI4ivEXT _glNamedProgramLocalParametersI4ivEXT
# define glNamedProgramLocalParameterI4uiEXT _glNamedProgramLocalParameterI4uiEXT
# define glNamedProgramLocalParameterI4uivEXT _glNamedProgramLocalParameterI4uivEXT
# define glNamedProgramLocalParametersI4uivEXT _glNamedProgramLocalParametersI4uivEXT
# define glGetNamedProgramLocalParameterIivEXT _glGetNamedProgramLocalParameterIivEXT
# define glGetNamedProgramLocalParameterIuivEXT _glGetNamedProgramLocalParameterIuivEXT
# define glEnableClientStateiEXT _glEnableClientStateiEXT
# define glDisableClientStateiEXT _glDisableClientStateiEXT
# define glGetFloati_vEXT _glGetFloati_vEXT
# define glGetDoublei_vEXT _glGetDoublei_vEXT
# define glGetPointeri_vEXT _glGetPointeri_vEXT
# define glNamedProgramStringEXT _glNamedProgramStringEXT
# define glNamedProgramLocalParameter4dEXT _glNamedProgramLocalParameter4dEXT
# define glNamedProgramLocalParameter4dvEXT _glNamedProgramLocalParameter4dvEXT
# define glNamedProgramLocalParameter4fEXT _glNamedProgramLocalParameter4fEXT
# define glNamedProgramLocalParameter4fvEXT _glNamedProgramLocalParameter4fvEXT
# define glGetNamedProgramLocalParameterdvEXT _glGetNamedProgramLocalParameterdvEXT
# define glGetNamedProgramLocalParameterfvEXT _glGetNamedProgramLocalParameterfvEXT
# define glGetNamedProgramivEXT _glGetNamedProgramivEXT
# define glGetNamedProgramStringEXT _glGetNamedProgramStringEXT
# define glNamedRenderbufferStorageEXT _glNamedRenderbufferStorageEXT
# define glGetNamedRenderbufferParameterivEXT _glGetNamedRenderbufferParameterivEXT
# define glNamedRenderbufferStorageMultisampleEXT _glNamedRenderbufferStorageMultisampleEXT
# define glNamedRenderbufferStorageMultisampleCoverageEXT _glNamedRenderbufferStorageMultisampleCoverageEXT
# define glCheckNamedFramebufferStatusEXT _glCheckNamedFramebufferStatusEXT
# define glNamedFramebufferTexture1DEXT _glNamedFramebufferTexture1DEXT
# define glNamedFramebufferTexture2DEXT _glNamedFramebufferTexture2DEXT
# define glNamedFramebufferTexture3DEXT _glNamedFramebufferTexture3DEXT
# define glNamedFramebufferRenderbufferEXT _glNamedFramebufferRenderbufferEXT
# define glGetNamedFramebufferAttachmentParameterivEXT _glGetNamedFramebufferAttachmentParameterivEXT
# define glGenerateTextureMipmapEXT _glGenerateTextureMipmapEXT
# define glGenerateMultiTexMipmapEXT _glGenerateMultiTexMipmapEXT
# define glFramebufferDrawBufferEXT _glFramebufferDrawBufferEXT
# define glFramebufferDrawBuffersEXT _glFramebufferDrawBuffersEXT
# define glFramebufferReadBufferEXT _glFramebufferReadBufferEXT
# define glGetFramebufferParameterivEXT _glGetFramebufferParameterivEXT
# define glNamedCopyBufferSubDataEXT _glNamedCopyBufferSubDataEXT
# define glNamedFramebufferTextureEXT _glNamedFramebufferTextureEXT
# define glNamedFramebufferTextureLayerEXT _glNamedFramebufferTextureLayerEXT
# define glNamedFramebufferTextureFaceEXT _glNamedFramebufferTextureFaceEXT
# define glTextureRenderbufferEXT _glTextureRenderbufferEXT
# define glMultiTexRenderbufferEXT _glMultiTexRenderbufferEXT
# define glVertexArrayVertexOffsetEXT _glVertexArrayVertexOffsetEXT
# define glVertexArrayColorOffsetEXT _glVertexArrayColorOffsetEXT
# define glVertexArrayEdgeFlagOffsetEXT _glVertexArrayEdgeFlagOffsetEXT
# define glVertexArrayIndexOffsetEXT _glVertexArrayIndexOffsetEXT
# define glVertexArrayNormalOffsetEXT _glVertexArrayNormalOffsetEXT
# define glVertexArrayTexCoordOffsetEXT _glVertexArrayTexCoordOffsetEXT
# define glVertexArrayMultiTexCoordOffsetEXT _glVertexArrayMultiTexCoordOffsetEXT
# define glVertexArrayFogCoordOffsetEXT _glVertexArrayFogCoordOffsetEXT
# define glVertexArraySecondaryColorOffsetEXT _glVertexArraySecondaryColorOffsetEXT
# define glVertexArrayVertexAttribOffsetEXT _glVertexArrayVertexAttribOffsetEXT
# define glVertexArrayVertexAttribIOffsetEXT _glVertexArrayVertexAttribIOffsetEXT
# define glEnableVertexArrayEXT _glEnableVertexArrayEXT
# define glDisableVertexArrayEXT _glDisableVertexArrayEXT
# define glEnableVertexArrayAttribEXT _glEnableVertexArrayAttribEXT
# define glDisableVertexArrayAttribEXT _glDisableVertexArrayAttribEXT
# define glGetVertexArrayIntegervEXT _glGetVertexArrayIntegervEXT
# define glGetVertexArrayPointervEXT _glGetVertexArrayPointervEXT
# define glGetVertexArrayIntegeri_vEXT _glGetVertexArrayIntegeri_vEXT
# define glGetVertexArrayPointeri_vEXT _glGetVertexArrayPointeri_vEXT
# define glMapNamedBufferRangeEXT _glMapNamedBufferRangeEXT
# define glFlushMappedNamedBufferRangeEXT _glFlushMappedNamedBufferRangeEXT
# define glNamedBufferStorageEXT _glNamedBufferStorageEXT
# define glClearNamedBufferDataEXT _glClearNamedBufferDataEXT
# define glClearNamedBufferSubDataEXT _glClearNamedBufferSubDataEXT
# define glNamedFramebufferParameteriEXT _glNamedFramebufferParameteriEXT
# define glGetNamedFramebufferParameterivEXT _glGetNamedFramebufferParameterivEXT
# define glProgramUniform1dEXT _glProgramUniform1dEXT
# define glProgramUniform2dEXT _glProgramUniform2dEXT
# define glProgramUniform3dEXT _glProgramUniform3dEXT
# define glProgramUniform4dEXT _glProgramUniform4dEXT
# define glProgramUniform1dvEXT _glProgramUniform1dvEXT
# define glProgramUniform2dvEXT _glProgramUniform2dvEXT
# define glProgramUniform3dvEXT _glProgramUniform3dvEXT
# define glProgramUniform4dvEXT _glProgramUniform4dvEXT
# define glProgramUniformMatrix2dvEXT _glProgramUniformMatrix2dvEXT
# define glProgramUniformMatrix3dvEXT _glProgramUniformMatrix3dvEXT
# define glProgramUniformMatrix4dvEXT _glProgramUniformMatrix4dvEXT
# define glProgramUniformMatrix2x3dvEXT _glProgramUniformMatrix2x3dvEXT
# define glProgramUniformMatrix2x4dvEXT _glProgramUniformMatrix2x4dvEXT
# define glProgramUniformMatrix3x2dvEXT _glProgramUniformMatrix3x2dvEXT
# define glProgramUniformMatrix3x4dvEXT _glProgramUniformMatrix3x4dvEXT
# define glProgramUniformMatrix4x2dvEXT _glProgramUniformMatrix4x2dvEXT
# define glProgramUniformMatrix4x3dvEXT _glProgramUniformMatrix4x3dvEXT
# define glTextureBufferRangeEXT _glTextureBufferRangeEXT
# define glTextureStorage1DEXT _glTextureStorage1DEXT
# define glTextureStorage2DEXT _glTextureStorage2DEXT
# define glTextureStorage3DEXT _glTextureStorage3DEXT
# define glTextureStorage2DMultisampleEXT _glTextureStorage2DMultisampleEXT
# define glTextureStorage3DMultisampleEXT _glTextureStorage3DMultisampleEXT
# define glVertexArrayBindVertexBufferEXT _glVertexArrayBindVertexBufferEXT
# define glVertexArrayVertexAttribFormatEXT _glVertexArrayVertexAttribFormatEXT
# define glVertexArrayVertexAttribIFormatEXT _glVertexArrayVertexAttribIFormatEXT
# define glVertexArrayVertexAttribLFormatEXT _glVertexArrayVertexAttribLFormatEXT
# define glVertexArrayVertexAttribBindingEXT _glVertexArrayVertexAttribBindingEXT
# define glVertexArrayVertexBindingDivisorEXT _glVertexArrayVertexBindingDivisorEXT
# define glVertexArrayVertexAttribLOffsetEXT _glVertexArrayVertexAttribLOffsetEXT
# define glTexturePageCommitmentEXT _glTexturePageCommitmentEXT
# define glVertexArrayVertexAttribDivisorEXT _glVertexArrayVertexAttribDivisorEXT
# define glDrawArraysInstancedEXT _glDrawArraysInstancedEXT
# define glDrawElementsInstancedEXT _glDrawElementsInstancedEXT
# define glPolygonOffsetClampEXT _glPolygonOffsetClampEXT
# define glRasterSamplesEXT _glRasterSamplesEXT
# define glUseShaderProgramEXT _glUseShaderProgramEXT
# define glActiveProgramEXT _glActiveProgramEXT
# define glCreateShaderProgramEXT _glCreateShaderProgramEXT
# define glWindowRectanglesEXT _glWindowRectanglesEXT
# define glApplyFramebufferAttachmentCMAAINTEL _glApplyFramebufferAttachmentCMAAINTEL
# define glBeginPerfQueryINTEL _glBeginPerfQueryINTEL
# define glCreatePerfQueryINTEL _glCreatePerfQueryINTEL
# define glDeletePerfQueryINTEL _glDeletePerfQueryINTEL
# define glEndPerfQueryINTEL _glEndPerfQueryINTEL
# define glGetFirstPerfQueryIdINTEL _glGetFirstPerfQueryIdINTEL
# define glGetNextPerfQueryIdINTEL _glGetNextPerfQueryIdINTEL
# define glGetPerfCounterInfoINTEL _glGetPerfCounterInfoINTEL
# define glGetPerfQueryDataINTEL _glGetPerfQueryDataINTEL
# define glGetPerfQueryIdByNameINTEL _glGetPerfQueryIdByNameINTEL
# define glGetPerfQueryInfoINTEL _glGetPerfQueryInfoINTEL
# define glMultiDrawArraysIndirectBindlessNV _glMultiDrawArraysIndirectBindlessNV
# define glMultiDrawElementsIndirectBindlessNV _glMultiDrawElementsIndirectBindlessNV
# define glMultiDrawArraysIndirectBindlessCountNV _glMultiDrawArraysIndirectBindlessCountNV
# define glMultiDrawElementsIndirectBindlessCountNV _glMultiDrawElementsIndirectBindlessCountNV
# define glGetTextureHandleNV _glGetTextureHandleNV
# define glGetTextureSamplerHandleNV _glGetTextureSamplerHandleNV
# define glMakeTextureHandleResidentNV _glMakeTextureHandleResidentNV
# define glMakeTextureHandleNonResidentNV _glMakeTextureHandleNonResidentNV
# define glGetImageHandleNV _glGetImageHandleNV
# define glMakeImageHandleResidentNV _glMakeImageHandleResidentNV
# define glMakeImageHandleNonResidentNV _glMakeImageHandleNonResidentNV
# define glUniformHandleui64NV _glUniformHandleui64NV
# define glUniformHandleui64vNV _glUniformHandleui64vNV
# define glProgramUniformHandleui64NV _glProgramUniformHandleui64NV
# define glProgramUniformHandleui64vNV _glProgramUniformHandleui64vNV
# define glIsTextureHandleResidentNV _glIsTextureHandleResidentNV
# define glIsImageHandleResidentNV _glIsImageHandleResidentNV
# define glBlendParameteriNV _glBlendParameteriNV
# define glBlendBarrierNV _glBlendBarrierNV
# define glViewportPositionWScaleNV _glViewportPositionWScaleNV
# define glCreateStatesNV _glCreateStatesNV
# define glDeleteStatesNV _glDeleteStatesNV
# define glIsStateNV _glIsStateNV
# define glStateCaptureNV _glStateCaptureNV
# define glGetCommandHeaderNV _glGetCommandHeaderNV
# define glGetStageIndexNV _glGetStageIndexNV
# define glDrawCommandsNV _glDrawCommandsNV
# define glDrawCommandsAddressNV _glDrawCommandsAddressNV
# define glDrawCommandsStatesNV _glDrawCommandsStatesNV
# define glDrawCommandsStatesAddressNV _glDrawCommandsStatesAddressNV
# define glCreateCommandListsNV _glCreateCommandListsNV
# define glDeleteCommandListsNV _glDeleteCommandListsNV
# define glIsCommandListNV _glIsCommandListNV
# define glListDrawCommandsStatesClientNV _glListDrawCommandsStatesClientNV
# define glCommandListSegmentsNV _glCommandListSegmentsNV
# define glCompileCommandListNV _glCompileCommandListNV
# define glCallCommandListNV _glCallCommandListNV
# define glBeginConditionalRenderNV _glBeginConditionalRenderNV
# define glEndConditionalRenderNV _glEndConditionalRenderNV
# define glSubpixelPrecisionBiasNV _glSubpixelPrecisionBiasNV
# define glConservativeRasterParameterfNV _glConservativeRasterParameterfNV
# define glConservativeRasterParameteriNV _glConservativeRasterParameteriNV
# define glDrawVkImageNV _glDrawVkImageNV
# define glGetVkProcAddrNV _glGetVkProcAddrNV
# define glWaitVkSemaphoreNV _glWaitVkSemaphoreNV
# define glSignalVkSemaphoreNV _glSignalVkSemaphoreNV
# define glSignalVkFenceNV _glSignalVkFenceNV
# define glFragmentCoverageColorNV _glFragmentCoverageColorNV
# define glCoverageModulationTableNV _glCoverageModulationTableNV
# define glGetCoverageModulationTableNV _glGetCoverageModulationTableNV
# define glCoverageModulationNV _glCoverageModulationNV
# define glRenderbufferStorageMultisampleCoverageNV _glRenderbufferStorageMultisampleCoverageNV
# define glUniform1i64NV _glUniform1i64NV
# define glUniform2i64NV _glUniform2i64NV
# define glUniform3i64NV _glUniform3i64NV
# define glUniform4i64NV _glUniform4i64NV
# define glUniform1i64vNV _glUniform1i64vNV
# define glUniform2i64vNV _glUniform2i64vNV
# define glUniform3i64vNV _glUniform3i64vNV
# define glUniform4i64vNV _glUniform4i64vNV
# define glUniform1ui64NV _glUniform1ui64NV
# define glUniform2ui64NV _glUniform2ui64NV
# define glUniform3ui64NV _glUniform3ui64NV
# define glUniform4ui64NV _glUniform4ui64NV
# define glUniform1ui64vNV _glUniform1ui64vNV
# define glUniform2ui64vNV _glUniform2ui64vNV
# define glUniform3ui64vNV _glUniform3ui64vNV
# define glUniform4ui64vNV _glUniform4ui64vNV
# define glGetUniformi64vNV _glGetUniformi64vNV
# define glProgramUniform1i64NV _glProgramUniform1i64NV
# define glProgramUniform2i64NV _glProgramUniform2i64NV
# define glProgramUniform3i64NV _glProgramUniform3i64NV
# define glProgramUniform4i64NV _glProgramUniform4i64NV
# define glProgramUniform1i64vNV _glProgramUniform1i64vNV
# define glProgramUniform2i64vNV _glProgramUniform2i64vNV
# define glProgramUniform3i64vNV _glProgramUniform3i64vNV
# define glProgramUniform4i64vNV _glProgramUniform4i64vNV
# define glProgramUniform1ui64NV _glProgramUniform1ui64NV
# define glProgramUniform2ui64NV _glProgramUniform2ui64NV
# define glProgramUniform3ui64NV _glProgramUniform3ui64NV
# define glProgramUniform4ui64NV _glProgramUniform4ui64NV
# define glProgramUniform1ui64vNV _glProgramUniform1ui64vNV
# define glProgramUniform2ui64vNV _glProgramUniform2ui64vNV
# define glProgramUniform3ui64vNV _glProgramUniform3ui64vNV
# define glProgramUniform4ui64vNV _glProgramUniform4ui64vNV
# define glGetInternalformatSampleivNV _glGetInternalformatSampleivNV
# define glGenPathsNV _glGenPathsNV
# define glDeletePathsNV _glDeletePathsNV
# define glIsPathNV _glIsPathNV
# define glPathCommandsNV _glPathCommandsNV
# define glPathCoordsNV _glPathCoordsNV
# define glPathSubCommandsNV _glPathSubCommandsNV
# define glPathSubCoordsNV _glPathSubCoordsNV
# define glPathStringNV _glPathStringNV
# define glPathGlyphsNV _glPathGlyphsNV
# define glPathGlyphRangeNV _glPathGlyphRangeNV
# define glWeightPathsNV _glWeightPathsNV
# define glCopyPathNV _glCopyPathNV
# define glInterpolatePathsNV _glInterpolatePathsNV
# define glTransformPathNV _glTransformPathNV
# define glPathParameterivNV _glPathParameterivNV
# define glPathParameteriNV _glPathParameteriNV
# define glPathParameterfvNV _glPathParameterfvNV
# define glPathParameterfNV _glPathParameterfNV
# define glPathDashArrayNV _glPathDashArrayNV
# define glPathStencilFuncNV _glPathStencilFuncNV
# define glPathStencilDepthOffsetNV _glPathStencilDepthOffsetNV
# define glStencilFillPathNV _glStencilFillPathNV
# define glStencilStrokePathNV _glStencilStrokePathNV
# define glStencilFillPathInstancedNV _glStencilFillPathInstancedNV
# define glStencilStrokePathInstancedNV _glStencilStrokePathInstancedNV
# define glPathCoverDepthFuncNV _glPathCoverDepthFuncNV
# define glCoverFillPathNV _glCoverFillPathNV
# define glCoverStrokePathNV _glCoverStrokePathNV
# define glCoverFillPathInstancedNV _glCoverFillPathInstancedNV
# define glCoverStrokePathInstancedNV _glCoverStrokePathInstancedNV
# define glGetPathParameterivNV _glGetPathParameterivNV
# define glGetPathParameterfvNV _glGetPathParameterfvNV
# define glGetPathCommandsNV _glGetPathCommandsNV
# define glGetPathCoordsNV _glGetPathCoordsNV
# define glGetPathDashArrayNV _glGetPathDashArrayNV
# define glGetPathMetricsNV _glGetPathMetricsNV
# define glGetPathMetricRangeNV _glGetPathMetricRangeNV
# define glGetPathSpacingNV _glGetPathSpacingNV
# define glIsPointInFillPathNV _glIsPointInFillPathNV
# define glIsPointInStrokePathNV _glIsPointInStrokePathNV
# define glGetPathLengthNV _glGetPathLengthNV
# define glPointAlongPathNV _glPointAlongPathNV
# define glMatrixLoad3x2fNV _glMatrixLoad3x2fNV
# define glMatrixLoad3x3fNV _glMatrixLoad3x3fNV
# define glMatrixLoadTranspose3x3fNV _glMatrixLoadTranspose3x3fNV
# define glMatrixMult3x2fNV _glMatrixMult3x2fNV
# define glMatrixMult3x3fNV _glMatrixMult3x3fNV
# define glMatrixMultTranspose3x3fNV _glMatrixMultTranspose3x3fNV
# define glStencilThenCoverFillPathNV _glStencilThenCoverFillPathNV
# define glStencilThenCoverStrokePathNV _glStencilThenCoverStrokePathNV
# define glStencilThenCoverFillPathInstancedNV _glStencilThenCoverFillPathInstancedNV
# define glStencilThenCoverStrokePathInstancedNV _glStencilThenCoverStrokePathInstancedNV
# define glPathGlyphIndexRangeNV _glPathGlyphIndexRangeNV
# define glPathGlyphIndexArrayNV _glPathGlyphIndexArrayNV
# define glPathMemoryGlyphIndexArrayNV _glPathMemoryGlyphIndexArrayNV
# define glProgramPathFragmentInputGenNV _glProgramPathFragmentInputGenNV
# define glGetProgramResourcefvNV _glGetProgramResourcefvNV
# define glFramebufferSampleLocationsfvNV _glFramebufferSampleLocationsfvNV
# define glNamedFramebufferSampleLocationsfvNV _glNamedFramebufferSampleLocationsfvNV
# define glResolveDepthValuesNV _glResolveDepthValuesNV
# define glMakeBufferResidentNV _glMakeBufferResidentNV
# define glMakeBufferNonResidentNV _glMakeBufferNonResidentNV
# define glIsBufferResidentNV _glIsBufferResidentNV
# define glMakeNamedBufferResidentNV _glMakeNamedBufferResidentNV
# define glMakeNamedBufferNonResidentNV _glMakeNamedBufferNonResidentNV
# define glIsNamedBufferResidentNV _glIsNamedBufferResidentNV
# define glGetBufferParameterui64vNV _glGetBufferParameterui64vNV
# define glGetNamedBufferParameterui64vNV _glGetNamedBufferParameterui64vNV
# define glGetIntegerui64vNV _glGetIntegerui64vNV
# define glUniformui64NV _glUniformui64NV
# define glUniformui64vNV _glUniformui64vNV
# define glGetUniformui64vNV _glGetUniformui64vNV
# define glProgramUniformui64NV _glProgramUniformui64NV
# define glProgramUniformui64vNV _glProgramUniformui64vNV
# define glTextureBarrierNV _glTextureBarrierNV
# define glVertexAttribL1i64NV _glVertexAttribL1i64NV
# define glVertexAttribL2i64NV _glVertexAttribL2i64NV
# define glVertexAttribL3i64NV _glVertexAttribL3i64NV
# define glVertexAttribL4i64NV _glVertexAttribL4i64NV
# define glVertexAttribL1i64vNV _glVertexAttribL1i64vNV
# define glVertexAttribL2i64vNV _glVertexAttribL2i64vNV
# define glVertexAttribL3i64vNV _glVertexAttribL3i64vNV
# define glVertexAttribL4i64vNV _glVertexAttribL4i64vNV
# define glVertexAttribL1ui64NV _glVertexAttribL1ui64NV
# define glVertexAttribL2ui64NV _glVertexAttribL2ui64NV
# define glVertexAttribL3ui64NV _glVertexAttribL3ui64NV
# define glVertexAttribL4ui64NV _glVertexAttribL4ui64NV
# define glVertexAttribL1ui64vNV _glVertexAttribL1ui64vNV
# define glVertexAttribL2ui64vNV _glVertexAttribL2ui64vNV
# define glVertexAttribL3ui64vNV _glVertexAttribL3ui64vNV
# define glVertexAttribL4ui64vNV _glVertexAttribL4ui64vNV
# define glGetVertexAttribLi64vNV _glGetVertexAttribLi64vNV
# define glGetVertexAttribLui64vNV _glGetVertexAttribLui64vNV
# define glVertexAttribLFormatNV _glVertexAttribLFormatNV
# define glBufferAddressRangeNV _glBufferAddressRangeNV
# define glVertexFormatNV _glVertexFormatNV
# define glNormalFormatNV _glNormalFormatNV
# define glColorFormatNV _glColorFormatNV
# define glIndexFormatNV _glIndexFormatNV
# define glTexCoordFormatNV _glTexCoordFormatNV
# define glEdgeFlagFormatNV _glEdgeFlagFormatNV
# define glSecondaryColorFormatNV _glSecondaryColorFormatNV
# define glFogCoordFormatNV _glFogCoordFormatNV
# define glVertexAttribFormatNV _glVertexAttribFormatNV
# define glVertexAttribIFormatNV _glVertexAttribIFormatNV
# define glGetIntegerui64i_vNV _glGetIntegerui64i_vNV
# define glViewportSwizzleNV _glViewportSwizzleNV
# define glFramebufferTextureMultiviewOVR _glFramebufferTextureMultiviewOVR

// }}} End of API aliases
#endif

// Begin glcorearb.h (https://www.opengl.org/registry/api/GL/glcorearb.h) {{{
#ifndef __glcorearb_h_
#define __glcorearb_h_ 1

#ifdef __cplusplus
extern "C" {
#endif

/*
** Copyright (c) 2013-2017 The Khronos Group Inc.
**
** Permission is hereby granted, free of charge, to any person obtaining a
** copy of this software and/or associated documentation files (the
** "Materials"), to deal in the Materials without restriction, including
** without limitation the rights to use, copy, modify, merge, publish,
** distribute, sublicense, and/or sell copies of the Materials, and to
** permit persons to whom the Materials are furnished to do so, subject to
** the following conditions:
**
** The above copyright notice and this permission notice shall be included
** in all copies or substantial portions of the Materials.
**
** THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
** EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
** MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
** IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
** CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
** TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
** MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
*/
/*
** This header is generated from the Khronos OpenGL / OpenGL ES XML
** API Registry. The current version of the Registry, generator scripts
** used to make the header, and the header can be found at
**   https://github.com/KhronosGroup/OpenGL-Registry
*/

#if defined(_WIN32) && !defined(APIENTRY) && !defined(__CYGWIN__) && !defined(__SCITECH_SNAP__)
#ifndef WIN32_LEAN_AND_MEAN
#define WIN32_LEAN_AND_MEAN 1
#endif
#include <windows.h>
#endif

#ifndef APIENTRY
#define APIENTRY
#endif
#ifndef APIENTRYP
#define APIENTRYP APIENTRY *
#endif
#ifndef GLAPI
#define GLAPI extern
#endif

/* glcorearb.h is for use with OpenGL core profile implementations.
** It should should be placed in the same directory as gl.h and
** included as <GL/glcorearb.h>.
**
** glcorearb.h includes only APIs in the latest OpenGL core profile
** implementation together with APIs in newer ARB extensions which 
** can be supported by the core profile. It does not, and never will
** include functionality removed from the core profile, such as
** fixed-function vertex and fragment processing.
**
** Do not #include both <GL/glcorearb.h> and either of <GL/gl.h> or
** <GL/glext.h> in the same source file.
*/

/* Generated C header for:
 * API: gl
 * Profile: core
 * Versions considered: .*
 * Versions emitted: .*
 * Default extensions included: glcore
 * Additional extensions included: _nomatch_^
 * Extensions removed: _nomatch_^
 */

#ifndef GL_VERSION_1_0
#define GL_VERSION_1_0 1
typedef void GLvoid;
typedef unsigned int GLenum;
typedef float GLfloat;
typedef int GLint;
typedef int GLsizei;
typedef unsigned int GLbitfield;
typedef double GLdouble;
typedef unsigned int GLuint;
typedef unsigned char GLboolean;
typedef unsigned char GLubyte;
#define GL_DEPTH_BUFFER_BIT               0x00000100
#define GL_STENCIL_BUFFER_BIT             0x00000400
#define GL_COLOR_BUFFER_BIT               0x00004000
#define GL_FALSE                          0
#define GL_TRUE                           1
#define GL_POINTS                         0x0000
#define GL_LINES                          0x0001
#define GL_LINE_LOOP                      0x0002
#define GL_LINE_STRIP                     0x0003
#define GL_TRIANGLES                      0x0004
#define GL_TRIANGLE_STRIP                 0x0005
#define GL_TRIANGLE_FAN                   0x0006
#define GL_QUADS                          0x0007
#define GL_NEVER                          0x0200
#define GL_LESS                           0x0201
#define GL_EQUAL                          0x0202
#define GL_LEQUAL                         0x0203
#define GL_GREATER                        0x0204
#define GL_NOTEQUAL                       0x0205
#define GL_GEQUAL                         0x0206
#define GL_ALWAYS                         0x0207
#define GL_ZERO                           0
#define GL_ONE                            1
#define GL_SRC_COLOR                      0x0300
#define GL_ONE_MINUS_SRC_COLOR            0x0301
#define GL_SRC_ALPHA                      0x0302
#define GL_ONE_MINUS_SRC_ALPHA            0x0303
#define GL_DST_ALPHA                      0x0304
#define GL_ONE_MINUS_DST_ALPHA            0x0305
#define GL_DST_COLOR                      0x0306
#define GL_ONE_MINUS_DST_COLOR            0x0307
#define GL_SRC_ALPHA_SATURATE             0x0308
#define GL_NONE                           0
#define GL_FRONT_LEFT                     0x0400
#define GL_FRONT_RIGHT                    0x0401
#define GL_BACK_LEFT                      0x0402
#define GL_BACK_RIGHT                     0x0403
#define GL_FRONT                          0x0404
#define GL_BACK                           0x0405
#define GL_LEFT                           0x0406
#define GL_RIGHT                          0x0407
#define GL_FRONT_AND_BACK                 0x0408
#define GL_NO_ERROR                       0
#define GL_INVALID_ENUM                   0x0500
#define GL_INVALID_VALUE                  0x0501
#define GL_INVALID_OPERATION              0x0502
#define GL_OUT_OF_MEMORY                  0x0505
#define GL_CW                             0x0900
#define GL_CCW                            0x0901
#define GL_POINT_SIZE                     0x0B11
#define GL_POINT_SIZE_RANGE               0x0B12
#define GL_POINT_SIZE_GRANULARITY         0x0B13
#define GL_LINE_SMOOTH                    0x0B20
#define GL_LINE_WIDTH                     0x0B21
#define GL_LINE_WIDTH_RANGE               0x0B22
#define GL_LINE_WIDTH_GRANULARITY         0x0B23
#define GL_POLYGON_MODE                   0x0B40
#define GL_POLYGON_SMOOTH                 0x0B41
#define GL_CULL_FACE                      0x0B44
#define GL_CULL_FACE_MODE                 0x0B45
#define GL_FRONT_FACE                     0x0B46
#define GL_DEPTH_RANGE                    0x0B70
#define GL_DEPTH_TEST                     0x0B71
#define GL_DEPTH_WRITEMASK                0x0B72
#define GL_DEPTH_CLEAR_VALUE              0x0B73
#define GL_DEPTH_FUNC                     0x0B74
#define GL_STENCIL_TEST                   0x0B90
#define GL_STENCIL_CLEAR_VALUE            0x0B91
#define GL_STENCIL_FUNC                   0x0B92
#define GL_STENCIL_VALUE_MASK             0x0B93
#define GL_STENCIL_FAIL                   0x0B94
#define GL_STENCIL_PASS_DEPTH_FAIL        0x0B95
#define GL_STENCIL_PASS_DEPTH_PASS        0x0B96
#define GL_STENCIL_REF                    0x0B97
#define GL_STENCIL_WRITEMASK              0x0B98
#define GL_VIEWPORT                       0x0BA2
#define GL_DITHER                         0x0BD0
#define GL_BLEND_DST                      0x0BE0
#define GL_BLEND_SRC                      0x0BE1
#define GL_BLEND                          0x0BE2
#define GL_LOGIC_OP_MODE                  0x0BF0
#define GL_DRAW_BUFFER                    0x0C01
#define GL_READ_BUFFER                    0x0C02
#define GL_SCISSOR_BOX                    0x0C10
#define GL_SCISSOR_TEST                   0x0C11
#define GL_COLOR_CLEAR_VALUE              0x0C22
#define GL_COLOR_WRITEMASK                0x0C23
#define GL_DOUBLEBUFFER                   0x0C32
#define GL_STEREO                         0x0C33
#define GL_LINE_SMOOTH_HINT               0x0C52
#define GL_POLYGON_SMOOTH_HINT            0x0C53
#define GL_UNPACK_SWAP_BYTES              0x0CF0
#define GL_UNPACK_LSB_FIRST               0x0CF1
#define GL_UNPACK_ROW_LENGTH              0x0CF2
#define GL_UNPACK_SKIP_ROWS               0x0CF3
#define GL_UNPACK_SKIP_PIXELS             0x0CF4
#define GL_UNPACK_ALIGNMENT               0x0CF5
#define GL_PACK_SWAP_BYTES                0x0D00
#define GL_PACK_LSB_FIRST                 0x0D01
#define GL_PACK_ROW_LENGTH                0x0D02
#define GL_PACK_SKIP_ROWS                 0x0D03
#define GL_PACK_SKIP_PIXELS               0x0D04
#define GL_PACK_ALIGNMENT                 0x0D05
#define GL_MAX_TEXTURE_SIZE               0x0D33
#define GL_MAX_VIEWPORT_DIMS              0x0D3A
#define GL_SUBPIXEL_BITS                  0x0D50
#define GL_TEXTURE_1D                     0x0DE0
#define GL_TEXTURE_2D                     0x0DE1
#define GL_TEXTURE_WIDTH                  0x1000
#define GL_TEXTURE_HEIGHT                 0x1001
#define GL_TEXTURE_BORDER_COLOR           0x1004
#define GL_DONT_CARE                      0x1100
#define GL_FASTEST                        0x1101
#define GL_NICEST                         0x1102
#define GL_BYTE                           0x1400
#define GL_UNSIGNED_BYTE                  0x1401
#define GL_SHORT                          0x1402
#define GL_UNSIGNED_SHORT                 0x1403
#define GL_INT                            0x1404
#define GL_UNSIGNED_INT                   0x1405
#define GL_FLOAT                          0x1406
#define GL_STACK_OVERFLOW                 0x0503
#define GL_STACK_UNDERFLOW                0x0504
#define GL_CLEAR                          0x1500
#define GL_AND                            0x1501
#define GL_AND_REVERSE                    0x1502
#define GL_COPY                           0x1503
#define GL_AND_INVERTED                   0x1504
#define GL_NOOP                           0x1505
#define GL_XOR                            0x1506
#define GL_OR                             0x1507
#define GL_NOR                            0x1508
#define GL_EQUIV                          0x1509
#define GL_INVERT                         0x150A
#define GL_OR_REVERSE                     0x150B
#define GL_COPY_INVERTED                  0x150C
#define GL_OR_INVERTED                    0x150D
#define GL_NAND                           0x150E
#define GL_SET                            0x150F
#define GL_TEXTURE                        0x1702
#define GL_COLOR                          0x1800
#define GL_DEPTH                          0x1801
#define GL_STENCIL                        0x1802
#define GL_STENCIL_INDEX                  0x1901
#define GL_DEPTH_COMPONENT                0x1902
#define GL_RED                            0x1903
#define GL_GREEN                          0x1904
#define GL_BLUE                           0x1905
#define GL_ALPHA                          0x1906
#define GL_RGB                            0x1907
#define GL_RGBA                           0x1908
#define GL_POINT                          0x1B00
#define GL_LINE                           0x1B01
#define GL_FILL                           0x1B02
#define GL_KEEP                           0x1E00
#define GL_REPLACE                        0x1E01
#define GL_INCR                           0x1E02
#define GL_DECR                           0x1E03
#define GL_VENDOR                         0x1F00
#define GL_RENDERER                       0x1F01
#define GL_VERSION                        0x1F02
#define GL_EXTENSIONS                     0x1F03
#define GL_NEAREST                        0x2600
#define GL_LINEAR                         0x2601
#define GL_NEAREST_MIPMAP_NEAREST         0x2700
#define GL_LINEAR_MIPMAP_NEAREST          0x2701
#define GL_NEAREST_MIPMAP_LINEAR          0x2702
#define GL_LINEAR_MIPMAP_LINEAR           0x2703
#define GL_TEXTURE_MAG_FILTER             0x2800
#define GL_TEXTURE_MIN_FILTER             0x2801
#define GL_TEXTURE_WRAP_S                 0x2802
#define GL_TEXTURE_WRAP_T                 0x2803
#define GL_REPEAT                         0x2901
typedef void (APIENTRYP PFNGLCULLFACEPROC) (GLenum mode);
typedef void (APIENTRYP PFNGLFRONTFACEPROC) (GLenum mode);
typedef void (APIENTRYP PFNGLHINTPROC) (GLenum target, GLenum mode);
typedef void (APIENTRYP PFNGLLINEWIDTHPROC) (GLfloat width);
typedef void (APIENTRYP PFNGLPOINTSIZEPROC) (GLfloat size);
typedef void (APIENTRYP PFNGLPOLYGONMODEPROC) (GLenum face, GLenum mode);
typedef void (APIENTRYP PFNGLSCISSORPROC) (GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (APIENTRYP PFNGLTEXPARAMETERFPROC) (GLenum target, GLenum pname, GLfloat param);
typedef void (APIENTRYP PFNGLTEXPARAMETERFVPROC) (GLenum target, GLenum pname, const GLfloat *params);
typedef void (APIENTRYP PFNGLTEXPARAMETERIPROC) (GLenum target, GLenum pname, GLint param);
typedef void (APIENTRYP PFNGLTEXPARAMETERIVPROC) (GLenum target, GLenum pname, const GLint *params);
typedef void (APIENTRYP PFNGLTEXIMAGE1DPROC) (GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRYP PFNGLTEXIMAGE2DPROC) (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRYP PFNGLDRAWBUFFERPROC) (GLenum buf);
typedef void (APIENTRYP PFNGLCLEARPROC) (GLbitfield mask);
typedef void (APIENTRYP PFNGLCLEARCOLORPROC) (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef void (APIENTRYP PFNGLCLEARSTENCILPROC) (GLint s);
typedef void (APIENTRYP PFNGLCLEARDEPTHPROC) (GLdouble depth);
typedef void (APIENTRYP PFNGLSTENCILMASKPROC) (GLuint mask);
typedef void (APIENTRYP PFNGLCOLORMASKPROC) (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
typedef void (APIENTRYP PFNGLDEPTHMASKPROC) (GLboolean flag);
typedef void (APIENTRYP PFNGLDISABLEPROC) (GLenum cap);
typedef void (APIENTRYP PFNGLENABLEPROC) (GLenum cap);
typedef void (APIENTRYP PFNGLFINISHPROC) (void);
typedef void (APIENTRYP PFNGLFLUSHPROC) (void);
typedef void (APIENTRYP PFNGLBLENDFUNCPROC) (GLenum sfactor, GLenum dfactor);
typedef void (APIENTRYP PFNGLLOGICOPPROC) (GLenum opcode);
typedef void (APIENTRYP PFNGLSTENCILFUNCPROC) (GLenum func, GLint ref, GLuint mask);
typedef void (APIENTRYP PFNGLSTENCILOPPROC) (GLenum fail, GLenum zfail, GLenum zpass);
typedef void (APIENTRYP PFNGLDEPTHFUNCPROC) (GLenum func);
typedef void (APIENTRYP PFNGLPIXELSTOREFPROC) (GLenum pname, GLfloat param);
typedef void (APIENTRYP PFNGLPIXELSTOREIPROC) (GLenum pname, GLint param);
typedef void (APIENTRYP PFNGLREADBUFFERPROC) (GLenum src);
typedef void (APIENTRYP PFNGLREADPIXELSPROC) (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels);
typedef void (APIENTRYP PFNGLGETBOOLEANVPROC) (GLenum pname, GLboolean *data);
typedef void (APIENTRYP PFNGLGETDOUBLEVPROC) (GLenum pname, GLdouble *data);
typedef GLenum (APIENTRYP PFNGLGETERRORPROC) (void);
typedef void (APIENTRYP PFNGLGETFLOATVPROC) (GLenum pname, GLfloat *data);
typedef void (APIENTRYP PFNGLGETINTEGERVPROC) (GLenum pname, GLint *data);
typedef const GLubyte *(APIENTRYP PFNGLGETSTRINGPROC) (GLenum name);
typedef void (APIENTRYP PFNGLGETTEXIMAGEPROC) (GLenum target, GLint level, GLenum format, GLenum type, void *pixels);
typedef void (APIENTRYP PFNGLGETTEXPARAMETERFVPROC) (GLenum target, GLenum pname, GLfloat *params);
typedef void (APIENTRYP PFNGLGETTEXPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);
typedef void (APIENTRYP PFNGLGETTEXLEVELPARAMETERFVPROC) (GLenum target, GLint level, GLenum pname, GLfloat *params);
typedef void (APIENTRYP PFNGLGETTEXLEVELPARAMETERIVPROC) (GLenum target, GLint level, GLenum pname, GLint *params);
typedef GLboolean (APIENTRYP PFNGLISENABLEDPROC) (GLenum cap);
typedef void (APIENTRYP PFNGLDEPTHRANGEPROC) (GLdouble near, GLdouble far);
typedef void (APIENTRYP PFNGLVIEWPORTPROC) (GLint x, GLint y, GLsizei width, GLsizei height);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glCullFace (GLenum mode);
GLAPI void APIENTRY glFrontFace (GLenum mode);
GLAPI void APIENTRY glHint (GLenum target, GLenum mode);
GLAPI void APIENTRY glLineWidth (GLfloat width);
GLAPI void APIENTRY glPointSize (GLfloat size);
GLAPI void APIENTRY glPolygonMode (GLenum face, GLenum mode);
GLAPI void APIENTRY glScissor (GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI void APIENTRY glTexParameterf (GLenum target, GLenum pname, GLfloat param);
GLAPI void APIENTRY glTexParameterfv (GLenum target, GLenum pname, const GLfloat *params);
GLAPI void APIENTRY glTexParameteri (GLenum target, GLenum pname, GLint param);
GLAPI void APIENTRY glTexParameteriv (GLenum target, GLenum pname, const GLint *params);
GLAPI void APIENTRY glTexImage1D (GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels);
GLAPI void APIENTRY glTexImage2D (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels);
GLAPI void APIENTRY glDrawBuffer (GLenum buf);
GLAPI void APIENTRY glClear (GLbitfield mask);
GLAPI void APIENTRY glClearColor (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
GLAPI void APIENTRY glClearStencil (GLint s);
GLAPI void APIENTRY glClearDepth (GLdouble depth);
GLAPI void APIENTRY glStencilMask (GLuint mask);
GLAPI void APIENTRY glColorMask (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
GLAPI void APIENTRY glDepthMask (GLboolean flag);
GLAPI void APIENTRY glDisable (GLenum cap);
GLAPI void APIENTRY glEnable (GLenum cap);
GLAPI void APIENTRY glFinish (void);
GLAPI void APIENTRY glFlush (void);
GLAPI void APIENTRY glBlendFunc (GLenum sfactor, GLenum dfactor);
GLAPI void APIENTRY glLogicOp (GLenum opcode);
GLAPI void APIENTRY glStencilFunc (GLenum func, GLint ref, GLuint mask);
GLAPI void APIENTRY glStencilOp (GLenum fail, GLenum zfail, GLenum zpass);
GLAPI void APIENTRY glDepthFunc (GLenum func);
GLAPI void APIENTRY glPixelStoref (GLenum pname, GLfloat param);
GLAPI void APIENTRY glPixelStorei (GLenum pname, GLint param);
GLAPI void APIENTRY glReadBuffer (GLenum src);
GLAPI void APIENTRY glReadPixels (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels);
GLAPI void APIENTRY glGetBooleanv (GLenum pname, GLboolean *data);
GLAPI void APIENTRY glGetDoublev (GLenum pname, GLdouble *data);
GLAPI GLenum APIENTRY glGetError (void);
GLAPI void APIENTRY glGetFloatv (GLenum pname, GLfloat *data);
GLAPI void APIENTRY glGetIntegerv (GLenum pname, GLint *data);
GLAPI const GLubyte *APIENTRY glGetString (GLenum name);
GLAPI void APIENTRY glGetTexImage (GLenum target, GLint level, GLenum format, GLenum type, void *pixels);
GLAPI void APIENTRY glGetTexParameterfv (GLenum target, GLenum pname, GLfloat *params);
GLAPI void APIENTRY glGetTexParameteriv (GLenum target, GLenum pname, GLint *params);
GLAPI void APIENTRY glGetTexLevelParameterfv (GLenum target, GLint level, GLenum pname, GLfloat *params);
GLAPI void APIENTRY glGetTexLevelParameteriv (GLenum target, GLint level, GLenum pname, GLint *params);
GLAPI GLboolean APIENTRY glIsEnabled (GLenum cap);
GLAPI void APIENTRY glDepthRange (GLdouble near, GLdouble far);
GLAPI void APIENTRY glViewport (GLint x, GLint y, GLsizei width, GLsizei height);
#endif
#endif /* GL_VERSION_1_0 */

#ifndef GL_VERSION_1_1
#define GL_VERSION_1_1 1
typedef float GLclampf;
typedef double GLclampd;
#define GL_COLOR_LOGIC_OP                 0x0BF2
#define GL_POLYGON_OFFSET_UNITS           0x2A00
#define GL_POLYGON_OFFSET_POINT           0x2A01
#define GL_POLYGON_OFFSET_LINE            0x2A02
#define GL_POLYGON_OFFSET_FILL            0x8037
#define GL_POLYGON_OFFSET_FACTOR          0x8038
#define GL_TEXTURE_BINDING_1D             0x8068
#define GL_TEXTURE_BINDING_2D             0x8069
#define GL_TEXTURE_INTERNAL_FORMAT        0x1003
#define GL_TEXTURE_RED_SIZE               0x805C
#define GL_TEXTURE_GREEN_SIZE             0x805D
#define GL_TEXTURE_BLUE_SIZE              0x805E
#define GL_TEXTURE_ALPHA_SIZE             0x805F
#define GL_DOUBLE                         0x140A
#define GL_PROXY_TEXTURE_1D               0x8063
#define GL_PROXY_TEXTURE_2D               0x8064
#define GL_R3_G3_B2                       0x2A10
#define GL_RGB4                           0x804F
#define GL_RGB5                           0x8050
#define GL_RGB8                           0x8051
#define GL_RGB10                          0x8052
#define GL_RGB12                          0x8053
#define GL_RGB16                          0x8054
#define GL_RGBA2                          0x8055
#define GL_RGBA4                          0x8056
#define GL_RGB5_A1                        0x8057
#define GL_RGBA8                          0x8058
#define GL_RGB10_A2                       0x8059
#define GL_RGBA12                         0x805A
#define GL_RGBA16                         0x805B
#define GL_VERTEX_ARRAY                   0x8074
typedef void (APIENTRYP PFNGLDRAWARRAYSPROC) (GLenum mode, GLint first, GLsizei count);
typedef void (APIENTRYP PFNGLDRAWELEMENTSPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices);
typedef void (APIENTRYP PFNGLGETPOINTERVPROC) (GLenum pname, void **params);
typedef void (APIENTRYP PFNGLPOLYGONOFFSETPROC) (GLfloat factor, GLfloat units);
typedef void (APIENTRYP PFNGLCOPYTEXIMAGE1DPROC) (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
typedef void (APIENTRYP PFNGLCOPYTEXIMAGE2DPROC) (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE1DPROC) (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE2DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (APIENTRYP PFNGLTEXSUBIMAGE1DPROC) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRYP PFNGLTEXSUBIMAGE2DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRYP PFNGLBINDTEXTUREPROC) (GLenum target, GLuint texture);
typedef void (APIENTRYP PFNGLDELETETEXTURESPROC) (GLsizei n, const GLuint *textures);
typedef void (APIENTRYP PFNGLGENTEXTURESPROC) (GLsizei n, GLuint *textures);
typedef GLboolean (APIENTRYP PFNGLISTEXTUREPROC) (GLuint texture);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glDrawArrays (GLenum mode, GLint first, GLsizei count);
GLAPI void APIENTRY glDrawElements (GLenum mode, GLsizei count, GLenum type, const void *indices);
GLAPI void APIENTRY glGetPointerv (GLenum pname, void **params);
GLAPI void APIENTRY glPolygonOffset (GLfloat factor, GLfloat units);
GLAPI void APIENTRY glCopyTexImage1D (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
GLAPI void APIENTRY glCopyTexImage2D (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
GLAPI void APIENTRY glCopyTexSubImage1D (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
GLAPI void APIENTRY glCopyTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI void APIENTRY glTexSubImage1D (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
GLAPI void APIENTRY glTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
GLAPI void APIENTRY glBindTexture (GLenum target, GLuint texture);
GLAPI void APIENTRY glDeleteTextures (GLsizei n, const GLuint *textures);
GLAPI void APIENTRY glGenTextures (GLsizei n, GLuint *textures);
GLAPI GLboolean APIENTRY glIsTexture (GLuint texture);
#endif
#endif /* GL_VERSION_1_1 */

#ifndef GL_VERSION_1_2
#define GL_VERSION_1_2 1
#define GL_UNSIGNED_BYTE_3_3_2            0x8032
#define GL_UNSIGNED_SHORT_4_4_4_4         0x8033
#define GL_UNSIGNED_SHORT_5_5_5_1         0x8034
#define GL_UNSIGNED_INT_8_8_8_8           0x8035
#define GL_UNSIGNED_INT_10_10_10_2        0x8036
#define GL_TEXTURE_BINDING_3D             0x806A
#define GL_PACK_SKIP_IMAGES               0x806B
#define GL_PACK_IMAGE_HEIGHT              0x806C
#define GL_UNPACK_SKIP_IMAGES             0x806D
#define GL_UNPACK_IMAGE_HEIGHT            0x806E
#define GL_TEXTURE_3D                     0x806F
#define GL_PROXY_TEXTURE_3D               0x8070
#define GL_TEXTURE_DEPTH                  0x8071
#define GL_TEXTURE_WRAP_R                 0x8072
#define GL_MAX_3D_TEXTURE_SIZE            0x8073
#define GL_UNSIGNED_BYTE_2_3_3_REV        0x8362
#define GL_UNSIGNED_SHORT_5_6_5           0x8363
#define GL_UNSIGNED_SHORT_5_6_5_REV       0x8364
#define GL_UNSIGNED_SHORT_4_4_4_4_REV     0x8365
#define GL_UNSIGNED_SHORT_1_5_5_5_REV     0x8366
#define GL_UNSIGNED_INT_8_8_8_8_REV       0x8367
#define GL_UNSIGNED_INT_2_10_10_10_REV    0x8368
#define GL_BGR                            0x80E0
#define GL_BGRA                           0x80E1
#define GL_MAX_ELEMENTS_VERTICES          0x80E8
#define GL_MAX_ELEMENTS_INDICES           0x80E9
#define GL_CLAMP_TO_EDGE                  0x812F
#define GL_TEXTURE_MIN_LOD                0x813A
#define GL_TEXTURE_MAX_LOD                0x813B
#define GL_TEXTURE_BASE_LEVEL             0x813C
#define GL_TEXTURE_MAX_LEVEL              0x813D
#define GL_SMOOTH_POINT_SIZE_RANGE        0x0B12
#define GL_SMOOTH_POINT_SIZE_GRANULARITY  0x0B13
#define GL_SMOOTH_LINE_WIDTH_RANGE        0x0B22
#define GL_SMOOTH_LINE_WIDTH_GRANULARITY  0x0B23
#define GL_ALIASED_LINE_WIDTH_RANGE       0x846E
typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTSPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices);
typedef void (APIENTRYP PFNGLTEXIMAGE3DPROC) (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRYP PFNGLTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glDrawRangeElements (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices);
GLAPI void APIENTRY glTexImage3D (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
GLAPI void APIENTRY glTexSubImage3D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
GLAPI void APIENTRY glCopyTexSubImage3D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
#endif
#endif /* GL_VERSION_1_2 */

#ifndef GL_VERSION_1_3
#define GL_VERSION_1_3 1
#define GL_TEXTURE0                       0x84C0
#define GL_TEXTURE1                       0x84C1
#define GL_TEXTURE2                       0x84C2
#define GL_TEXTURE3                       0x84C3
#define GL_TEXTURE4                       0x84C4
#define GL_TEXTURE5                       0x84C5
#define GL_TEXTURE6                       0x84C6
#define GL_TEXTURE7                       0x84C7
#define GL_TEXTURE8                       0x84C8
#define GL_TEXTURE9                       0x84C9
#define GL_TEXTURE10                      0x84CA
#define GL_TEXTURE11                      0x84CB
#define GL_TEXTURE12                      0x84CC
#define GL_TEXTURE13                      0x84CD
#define GL_TEXTURE14                      0x84CE
#define GL_TEXTURE15                      0x84CF
#define GL_TEXTURE16                      0x84D0
#define GL_TEXTURE17                      0x84D1
#define GL_TEXTURE18                      0x84D2
#define GL_TEXTURE19                      0x84D3
#define GL_TEXTURE20                      0x84D4
#define GL_TEXTURE21                      0x84D5
#define GL_TEXTURE22                      0x84D6
#define GL_TEXTURE23                      0x84D7
#define GL_TEXTURE24                      0x84D8
#define GL_TEXTURE25                      0x84D9
#define GL_TEXTURE26                      0x84DA
#define GL_TEXTURE27                      0x84DB
#define GL_TEXTURE28                      0x84DC
#define GL_TEXTURE29                      0x84DD
#define GL_TEXTURE30                      0x84DE
#define GL_TEXTURE31                      0x84DF
#define GL_ACTIVE_TEXTURE                 0x84E0
#define GL_MULTISAMPLE                    0x809D
#define GL_SAMPLE_ALPHA_TO_COVERAGE       0x809E
#define GL_SAMPLE_ALPHA_TO_ONE            0x809F
#define GL_SAMPLE_COVERAGE                0x80A0
#define GL_SAMPLE_BUFFERS                 0x80A8
#define GL_SAMPLES                        0x80A9
#define GL_SAMPLE_COVERAGE_VALUE          0x80AA
#define GL_SAMPLE_COVERAGE_INVERT         0x80AB
#define GL_TEXTURE_CUBE_MAP               0x8513
#define GL_TEXTURE_BINDING_CUBE_MAP       0x8514
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X    0x8515
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X    0x8516
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y    0x8517
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y    0x8518
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z    0x8519
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z    0x851A
#define GL_PROXY_TEXTURE_CUBE_MAP         0x851B
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE      0x851C
#define GL_COMPRESSED_RGB                 0x84ED
#define GL_COMPRESSED_RGBA                0x84EE
#define GL_TEXTURE_COMPRESSION_HINT       0x84EF
#define GL_TEXTURE_COMPRESSED_IMAGE_SIZE  0x86A0
#define GL_TEXTURE_COMPRESSED             0x86A1
#define GL_NUM_COMPRESSED_TEXTURE_FORMATS 0x86A2
#define GL_COMPRESSED_TEXTURE_FORMATS     0x86A3
#define GL_CLAMP_TO_BORDER                0x812D
typedef void (APIENTRYP PFNGLACTIVETEXTUREPROC) (GLenum texture);
typedef void (APIENTRYP PFNGLSAMPLECOVERAGEPROC) (GLfloat value, GLboolean invert);
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE3DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data);
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE2DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data);
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE1DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data);
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);
typedef void (APIENTRYP PFNGLGETCOMPRESSEDTEXIMAGEPROC) (GLenum target, GLint level, void *img);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glActiveTexture (GLenum texture);
GLAPI void APIENTRY glSampleCoverage (GLfloat value, GLboolean invert);
GLAPI void APIENTRY glCompressedTexImage3D (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data);
GLAPI void APIENTRY glCompressedTexImage2D (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data);
GLAPI void APIENTRY glCompressedTexImage1D (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data);
GLAPI void APIENTRY glCompressedTexSubImage3D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
GLAPI void APIENTRY glCompressedTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
GLAPI void APIENTRY glCompressedTexSubImage1D (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);
GLAPI void APIENTRY glGetCompressedTexImage (GLenum target, GLint level, void *img);
#endif
#endif /* GL_VERSION_1_3 */

#ifndef GL_VERSION_1_4
#define GL_VERSION_1_4 1
#define GL_BLEND_DST_RGB                  0x80C8
#define GL_BLEND_SRC_RGB                  0x80C9
#define GL_BLEND_DST_ALPHA                0x80CA
#define GL_BLEND_SRC_ALPHA                0x80CB
#define GL_POINT_FADE_THRESHOLD_SIZE      0x8128
#define GL_DEPTH_COMPONENT16              0x81A5
#define GL_DEPTH_COMPONENT24              0x81A6
#define GL_DEPTH_COMPONENT32              0x81A7
#define GL_MIRRORED_REPEAT                0x8370
#define GL_MAX_TEXTURE_LOD_BIAS           0x84FD
#define GL_TEXTURE_LOD_BIAS               0x8501
#define GL_INCR_WRAP                      0x8507
#define GL_DECR_WRAP                      0x8508
#define GL_TEXTURE_DEPTH_SIZE             0x884A
#define GL_TEXTURE_COMPARE_MODE           0x884C
#define GL_TEXTURE_COMPARE_FUNC           0x884D
#define GL_BLEND_COLOR                    0x8005
#define GL_BLEND_EQUATION                 0x8009
#define GL_CONSTANT_COLOR                 0x8001
#define GL_ONE_MINUS_CONSTANT_COLOR       0x8002
#define GL_CONSTANT_ALPHA                 0x8003
#define GL_ONE_MINUS_CONSTANT_ALPHA       0x8004
#define GL_FUNC_ADD                       0x8006
#define GL_FUNC_REVERSE_SUBTRACT          0x800B
#define GL_FUNC_SUBTRACT                  0x800A
#define GL_MIN                            0x8007
#define GL_MAX                            0x8008
typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEPROC) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSPROC) (GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount);
typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSPROC) (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount);
typedef void (APIENTRYP PFNGLPOINTPARAMETERFPROC) (GLenum pname, GLfloat param);
typedef void (APIENTRYP PFNGLPOINTPARAMETERFVPROC) (GLenum pname, const GLfloat *params);
typedef void (APIENTRYP PFNGLPOINTPARAMETERIPROC) (GLenum pname, GLint param);
typedef void (APIENTRYP PFNGLPOINTPARAMETERIVPROC) (GLenum pname, const GLint *params);
typedef void (APIENTRYP PFNGLBLENDCOLORPROC) (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef void (APIENTRYP PFNGLBLENDEQUATIONPROC) (GLenum mode);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glBlendFuncSeparate (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
GLAPI void APIENTRY glMultiDrawArrays (GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount);
GLAPI void APIENTRY glMultiDrawElements (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount);
GLAPI void APIENTRY glPointParameterf (GLenum pname, GLfloat param);
GLAPI void APIENTRY glPointParameterfv (GLenum pname, const GLfloat *params);
GLAPI void APIENTRY glPointParameteri (GLenum pname, GLint param);
GLAPI void APIENTRY glPointParameteriv (GLenum pname, const GLint *params);
GLAPI void APIENTRY glBlendColor (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
GLAPI void APIENTRY glBlendEquation (GLenum mode);
#endif
#endif /* GL_VERSION_1_4 */

#ifndef GL_VERSION_1_5
#define GL_VERSION_1_5 1
#include <stddef.h>
typedef ptrdiff_t GLsizeiptr;
typedef ptrdiff_t GLintptr;
#define GL_BUFFER_SIZE                    0x8764
#define GL_BUFFER_USAGE                   0x8765
#define GL_QUERY_COUNTER_BITS             0x8864
#define GL_CURRENT_QUERY                  0x8865
#define GL_QUERY_RESULT                   0x8866
#define GL_QUERY_RESULT_AVAILABLE         0x8867
#define GL_ARRAY_BUFFER                   0x8892
#define GL_ELEMENT_ARRAY_BUFFER           0x8893
#define GL_ARRAY_BUFFER_BINDING           0x8894
#define GL_ELEMENT_ARRAY_BUFFER_BINDING   0x8895
#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING 0x889F
#define GL_READ_ONLY                      0x88B8
#define GL_WRITE_ONLY                     0x88B9
#define GL_READ_WRITE                     0x88BA
#define GL_BUFFER_ACCESS                  0x88BB
#define GL_BUFFER_MAPPED                  0x88BC
#define GL_BUFFER_MAP_POINTER             0x88BD
#define GL_STREAM_DRAW                    0x88E0
#define GL_STREAM_READ                    0x88E1
#define GL_STREAM_COPY                    0x88E2
#define GL_STATIC_DRAW                    0x88E4
#define GL_STATIC_READ                    0x88E5
#define GL_STATIC_COPY                    0x88E6
#define GL_DYNAMIC_DRAW                   0x88E8
#define GL_DYNAMIC_READ                   0x88E9
#define GL_DYNAMIC_COPY                   0x88EA
#define GL_SAMPLES_PASSED                 0x8914
#define GL_SRC1_ALPHA                     0x8589
typedef void (APIENTRYP PFNGLGENQUERIESPROC) (GLsizei n, GLuint *ids);
typedef void (APIENTRYP PFNGLDELETEQUERIESPROC) (GLsizei n, const GLuint *ids);
typedef GLboolean (APIENTRYP PFNGLISQUERYPROC) (GLuint id);
typedef void (APIENTRYP PFNGLBEGINQUERYPROC) (GLenum target, GLuint id);
typedef void (APIENTRYP PFNGLENDQUERYPROC) (GLenum target);
typedef void (APIENTRYP PFNGLGETQUERYIVPROC) (GLenum target, GLenum pname, GLint *params);
typedef void (APIENTRYP PFNGLGETQUERYOBJECTIVPROC) (GLuint id, GLenum pname, GLint *params);
typedef void (APIENTRYP PFNGLGETQUERYOBJECTUIVPROC) (GLuint id, GLenum pname, GLuint *params);
typedef void (APIENTRYP PFNGLBINDBUFFERPROC) (GLenum target, GLuint buffer);
typedef void (APIENTRYP PFNGLDELETEBUFFERSPROC) (GLsizei n, const GLuint *buffers);
typedef void (APIENTRYP PFNGLGENBUFFERSPROC) (GLsizei n, GLuint *buffers);
typedef GLboolean (APIENTRYP PFNGLISBUFFERPROC) (GLuint buffer);
typedef void (APIENTRYP PFNGLBUFFERDATAPROC) (GLenum target, GLsizeiptr size, const void *data, GLenum usage);
typedef void (APIENTRYP PFNGLBUFFERSUBDATAPROC) (GLenum target, GLintptr offset, GLsizeiptr size, const void *data);
typedef void (APIENTRYP PFNGLGETBUFFERSUBDATAPROC) (GLenum target, GLintptr offset, GLsizeiptr size, void *data);
typedef void *(APIENTRYP PFNGLMAPBUFFERPROC) (GLenum target, GLenum access);
typedef GLboolean (APIENTRYP PFNGLUNMAPBUFFERPROC) (GLenum target);
typedef void (APIENTRYP PFNGLGETBUFFERPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);
typedef void (APIENTRYP PFNGLGETBUFFERPOINTERVPROC) (GLenum target, GLenum pname, void **params);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glGenQueries (GLsizei n, GLuint *ids);
GLAPI void APIENTRY glDeleteQueries (GLsizei n, const GLuint *ids);
GLAPI GLboolean APIENTRY glIsQuery (GLuint id);
GLAPI void APIENTRY glBeginQuery (GLenum target, GLuint id);
GLAPI void APIENTRY glEndQuery (GLenum target);
GLAPI void APIENTRY glGetQueryiv (GLenum target, GLenum pname, GLint *params);
GLAPI void APIENTRY glGetQueryObjectiv (GLuint id, GLenum pname, GLint *params);
GLAPI void APIENTRY glGetQueryObjectuiv (GLuint id, GLenum pname, GLuint *params);
GLAPI void APIENTRY glBindBuffer (GLenum target, GLuint buffer);
GLAPI void APIENTRY glDeleteBuffers (GLsizei n, const GLuint *buffers);
GLAPI void APIENTRY glGenBuffers (GLsizei n, GLuint *buffers);
GLAPI GLboolean APIENTRY glIsBuffer (GLuint buffer);
GLAPI void APIENTRY glBufferData (GLenum target, GLsizeiptr size, const void *data, GLenum usage);
GLAPI void APIENTRY glBufferSubData (GLenum target, GLintptr offset, GLsizeiptr size, const void *data);
GLAPI void APIENTRY glGetBufferSubData (GLenum target, GLintptr offset, GLsizeiptr size, void *data);
GLAPI void *APIENTRY glMapBuffer (GLenum target, GLenum access);
GLAPI GLboolean APIENTRY glUnmapBuffer (GLenum target);
GLAPI void APIENTRY glGetBufferParameteriv (GLenum target, GLenum pname, GLint *params);
GLAPI void APIENTRY glGetBufferPointerv (GLenum target, GLenum pname, void **params);
#endif
#endif /* GL_VERSION_1_5 */

#ifndef GL_VERSION_2_0
#define GL_VERSION_2_0 1
typedef char GLchar;
typedef short GLshort;
typedef signed char GLbyte;
typedef unsigned short GLushort;
#define GL_BLEND_EQUATION_RGB             0x8009
#define GL_VERTEX_ATTRIB_ARRAY_ENABLED    0x8622
#define GL_VERTEX_ATTRIB_ARRAY_SIZE       0x8623
#define GL_VERTEX_ATTRIB_ARRAY_STRIDE     0x8624
#define GL_VERTEX_ATTRIB_ARRAY_TYPE       0x8625
#define GL_CURRENT_VERTEX_ATTRIB          0x8626
#define GL_VERTEX_PROGRAM_POINT_SIZE      0x8642
#define GL_VERTEX_ATTRIB_ARRAY_POINTER    0x8645
#define GL_STENCIL_BACK_FUNC              0x8800
#define GL_STENCIL_BACK_FAIL              0x8801
#define GL_STENCIL_BACK_PASS_DEPTH_FAIL   0x8802
#define GL_STENCIL_BACK_PASS_DEPTH_PASS   0x8803
#define GL_MAX_DRAW_BUFFERS               0x8824
#define GL_DRAW_BUFFER0                   0x8825
#define GL_DRAW_BUFFER1                   0x8826
#define GL_DRAW_BUFFER2                   0x8827
#define GL_DRAW_BUFFER3                   0x8828
#define GL_DRAW_BUFFER4                   0x8829
#define GL_DRAW_BUFFER5                   0x882A
#define GL_DRAW_BUFFER6                   0x882B
#define GL_DRAW_BUFFER7                   0x882C
#define GL_DRAW_BUFFER8                   0x882D
#define GL_DRAW_BUFFER9                   0x882E
#define GL_DRAW_BUFFER10                  0x882F
#define GL_DRAW_BUFFER11                  0x8830
#define GL_DRAW_BUFFER12                  0x8831
#define GL_DRAW_BUFFER13                  0x8832
#define GL_DRAW_BUFFER14                  0x8833
#define GL_DRAW_BUFFER15                  0x8834
#define GL_BLEND_EQUATION_ALPHA           0x883D
#define GL_MAX_VERTEX_ATTRIBS             0x8869
#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED 0x886A
#define GL_MAX_TEXTURE_IMAGE_UNITS        0x8872
#define GL_FRAGMENT_SHADER                0x8B30
#define GL_VERTEX_SHADER                  0x8B31
#define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS 0x8B49
#define GL_MAX_VERTEX_UNIFORM_COMPONENTS  0x8B4A
#define GL_MAX_VARYING_FLOATS             0x8B4B
#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS 0x8B4C
#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS 0x8B4D
#define GL_SHADER_TYPE                    0x8B4F
#define GL_FLOAT_VEC2                     0x8B50
#define GL_FLOAT_VEC3                     0x8B51
#define GL_FLOAT_VEC4                     0x8B52
#define GL_INT_VEC2                       0x8B53
#define GL_INT_VEC3                       0x8B54
#define GL_INT_VEC4                       0x8B55
#define GL_BOOL                           0x8B56
#define GL_BOOL_VEC2                      0x8B57
#define GL_BOOL_VEC3                      0x8B58
#define GL_BOOL_VEC4                      0x8B59
#define GL_FLOAT_MAT2                     0x8B5A
#define GL_FLOAT_MAT3                     0x8B5B
#define GL_FLOAT_MAT4                     0x8B5C
#define GL_SAMPLER_1D                     0x8B5D
#define GL_SAMPLER_2D                     0x8B5E
#define GL_SAMPLER_3D                     0x8B5F
#define GL_SAMPLER_CUBE                   0x8B60
#define GL_SAMPLER_1D_SHADOW              0x8B61
#define GL_SAMPLER_2D_SHADOW              0x8B62
#define GL_DELETE_STATUS                  0x8B80
#define GL_COMPILE_STATUS                 0x8B81
#define GL_LINK_STATUS                    0x8B82
#define GL_VALIDATE_STATUS                0x8B83
#define GL_INFO_LOG_LENGTH                0x8B84
#define GL_ATTACHED_SHADERS               0x8B85
#define GL_ACTIVE_UNIFORMS                0x8B86
#define GL_ACTIVE_UNIFORM_MAX_LENGTH      0x8B87
#define GL_SHADER_SOURCE_LENGTH           0x8B88
#define GL_ACTIVE_ATTRIBUTES              0x8B89
#define GL_ACTIVE_ATTRIBUTE_MAX_LENGTH    0x8B8A
#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT 0x8B8B
#define GL_SHADING_LANGUAGE_VERSION       0x8B8C
#define GL_CURRENT_PROGRAM                0x8B8D
#define GL_POINT_SPRITE_COORD_ORIGIN      0x8CA0
#define GL_LOWER_LEFT                     0x8CA1
#define GL_UPPER_LEFT                     0x8CA2
#define GL_STENCIL_BACK_REF               0x8CA3
#define GL_STENCIL_BACK_VALUE_MASK        0x8CA4
#define GL_STENCIL_BACK_WRITEMASK         0x8CA5
typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEPROC) (GLenum modeRGB, GLenum modeAlpha);
typedef void (APIENTRYP PFNGLDRAWBUFFERSPROC) (GLsizei n, const GLenum *bufs);
typedef void (APIENTRYP PFNGLSTENCILOPSEPARATEPROC) (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
typedef void (APIENTRYP PFNGLSTENCILFUNCSEPARATEPROC) (GLenum face, GLenum func, GLint ref, GLuint mask);
typedef void (APIENTRYP PFNGLSTENCILMASKSEPARATEPROC) (GLenum face, GLuint mask);
typedef void (APIENTRYP PFNGLATTACHSHADERPROC) (GLuint program, GLuint shader);
typedef void (APIENTRYP PFNGLBINDATTRIBLOCATIONPROC) (GLuint program, GLuint index, const GLchar *name);
typedef void (APIENTRYP PFNGLCOMPILESHADERPROC) (GLuint shader);
typedef GLuint (APIENTRYP PFNGLCREATEPROGRAMPROC) (void);
typedef GLuint (APIENTRYP PFNGLCREATESHADERPROC) (GLenum type);
typedef void (APIENTRYP PFNGLDELETEPROGRAMPROC) (GLuint program);
typedef void (APIENTRYP PFNGLDELETESHADERPROC) (GLuint shader);
typedef void (APIENTRYP PFNGLDETACHSHADERPROC) (GLuint program, GLuint shader);
typedef void (APIENTRYP PFNGLDISABLEVERTEXATTRIBARRAYPROC) (GLuint index);
typedef void (APIENTRYP PFNGLENABLEVERTEXATTRIBARRAYPROC) (GLuint index);
typedef void (APIENTRYP PFNGLGETACTIVEATTRIBPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
typedef void (APIENTRYP PFNGLGETATTACHEDSHADERSPROC) (GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders);
typedef GLint (APIENTRYP PFNGLGETATTRIBLOCATIONPROC) (GLuint program, const GLchar *name);
typedef void (APIENTRYP PFNGLGETPROGRAMIVPROC) (GLuint program, GLenum pname, GLint *params);
typedef void (APIENTRYP PFNGLGETPROGRAMINFOLOGPROC) (GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
typedef void (APIENTRYP PFNGLGETSHADERIVPROC) (GLuint shader, GLenum pname, GLint *params);
typedef void (APIENTRYP PFNGLGETSHADERINFOLOGPROC) (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
typedef void (APIENTRYP PFNGLGETSHADERSOURCEPROC) (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source);
typedef GLint (APIENTRYP PFNGLGETUNIFORMLOCATIONPROC) (GLuint program, const GLchar *name);
typedef void (APIENTRYP PFNGLGETUNIFORMFVPROC) (GLuint program, GLint location, GLfloat *params);
typedef void (APIENTRYP PFNGLGETUNIFORMIVPROC) (GLuint program, GLint location, GLint *params);
typedef void (APIENTRYP PFNGLGETVERTEXATTRIBDVPROC) (GLuint index, GLenum pname, GLdouble *params);
typedef void (APIENTRYP PFNGLGETVERTEXATTRIBFVPROC) (GLuint index, GLenum pname, GLfloat *params);
typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIVPROC) (GLuint index, GLenum pname, GLint *params);
typedef void (APIENTRYP PFNGLGETVERTEXATTRIBPOINTERVPROC) (GLuint index, GLenum pname, void **pointer);
typedef GLboolean (APIENTRYP PFNGLISPROGRAMPROC) (GLuint program);
typedef GLboolean (APIENTRYP PFNGLISSHADERPROC) (GLuint shader);
typedef void (APIENTRYP PFNGLLINKPROGRAMPROC) (GLuint program);
typedef void (APIENTRYP PFNGLSHADERSOURCEPROC) (GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length);
typedef void (APIENTRYP PFNGLUSEPROGRAMPROC) (GLuint program);
typedef void (APIENTRYP PFNGLUNIFORM1FPROC) (GLint location, GLfloat v0);
typedef void (APIENTRYP PFNGLUNIFORM2FPROC) (GLint location, GLfloat v0, GLfloat v1);
typedef void (APIENTRYP PFNGLUNIFORM3FPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef void (APIENTRYP PFNGLUNIFORM4FPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef void (APIENTRYP PFNGLUNIFORM1IPROC) (GLint location, GLint v0);
typedef void (APIENTRYP PFNGLUNIFORM2IPROC) (GLint location, GLint v0, GLint v1);
typedef void (APIENTRYP PFNGLUNIFORM3IPROC) (GLint location, GLint v0, GLint v1, GLint v2);
typedef void (APIENTRYP PFNGLUNIFORM4IPROC) (GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void (APIENTRYP PFNGLUNIFORM1FVPROC) (GLint location, GLsizei count, const GLfloat *value);
typedef void (APIENTRYP PFNGLUNIFORM2FVPROC) (GLint location, GLsizei count, const GLfloat *value);
typedef void (APIENTRYP PFNGLUNIFORM3FVPROC) (GLint location, GLsizei count, const GLfloat *value);
typedef void (APIENTRYP PFNGLUNIFORM4FVPROC) (GLint location, GLsizei count, const GLfloat *value);
typedef void (APIENTRYP PFNGLUNIFORM1IVPROC) (GLint location, GLsizei count, const GLint *value);
typedef void (APIENTRYP PFNGLUNIFORM2IVPROC) (GLint location, GLsizei count, const GLint *value);
typedef void (APIENTRYP PFNGLUNIFORM3IVPROC) (GLint location, GLsizei count, const GLint *value);
typedef void (APIENTRYP PFNGLUNIFORM4IVPROC) (GLint location, GLsizei count, const GLint *value);
typedef void (APIENTRYP PFNGLUNIFORMMATRIX2FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRYP PFNGLUNIFORMMATRIX3FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRYP PFNGLUNIFORMMATRIX4FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRYP PFNGLVALIDATEPROGRAMPROC) (GLuint program);
typedef void (APIENTRYP PFNGLVERTEXATTRIB1DPROC) (GLuint index, GLdouble x);
typedef void (APIENTRYP PFNGLVERTEXATTRIB1DVPROC) (GLuint index, const GLdouble *v);
typedef void (APIENTRYP PFNGLVERTEXATTRIB1FPROC) (GLuint index, GLfloat x);
typedef void (APIENTRYP PFNGLVERTEXATTRIB1FVPROC) (GLuint index, const GLfloat *v);
typedef void (APIENTRYP PFNGLVERTEXATTRIB1SPROC) (GLuint index, GLshort x);
typedef void (APIENTRYP PFNGLVERTEXATTRIB1SVPROC) (GLuint index, const GLshort *v);
typedef void (APIENTRYP PFNGLVERTEXATTRIB2DPROC) (GLuint index, GLdouble x, GLdouble y);
typedef void (APIENTRYP PFNGLVERTEXATTRIB2DVPROC) (GLuint index, const GLdouble *v);
typedef void (APIENTRYP PFNGLVERTEXATTRIB2FPROC) (GLuint index, GLfloat x, GLfloat y);
typedef void (APIENTRYP PFNGLVERTEXATTRIB2FVPROC) (GLuint index, const GLfloat *v);
typedef void (APIENTRYP PFNGLVERTEXATTRIB2SPROC) (GLuint index, GLshort x, GLshort y);
typedef void (APIENTRYP PFNGLVERTEXATTRIB2SVPROC) (GLuint index, const GLshort *v);
typedef void (APIENTRYP PFNGLVERTEXATTRIB3DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void (APIENTRYP PFNGLVERTEXATTRIB3DVPROC) (GLuint index, const GLdouble *v);
typedef void (APIENTRYP PFNGLVERTEXATTRIB3FPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z);
typedef void (APIENTRYP PFNGLVERTEXATTRIB3FVPROC) (GLuint index, const GLfloat *v);
typedef void (APIENTRYP PFNGLVERTEXATTRIB3SPROC) (GLuint index, GLshort x, GLshort y, GLshort z);
typedef void (APIENTRYP PFNGLVERTEXATTRIB3SVPROC) (GLuint index, const GLshort *v);
typedef void (APIENTRYP PFNGLVERTEXATTRIB4NBVPROC) (GLuint index, const GLbyte *v);
typedef void (APIENTRYP PFNGLVERTEXATTRIB4NIVPROC) (GLuint index, const GLint *v);
typedef void (APIENTRYP PFNGLVERTEXATTRIB4NSVPROC) (GLuint index, const GLshort *v);
typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUBPROC) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUBVPROC) (GLuint index, const GLubyte *v);
typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUIVPROC) (GLuint index, const GLuint *v);
typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUSVPROC) (GLuint index, const GLushort *v);
typedef void (APIENTRYP PFNGLVERTEXATTRIB4BVPROC) (GLuint index, const GLbyte *v);
typedef void (APIENTRYP PFNGLVERTEXATTRIB4DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (APIENTRYP PFNGLVERTEXATTRIB4DVPROC) (GLuint index, const GLdouble *v);
typedef void (APIENTRYP PFNGLVERTEXATTRIB4FPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (APIENTRYP PFNGLVERTEXATTRIB4FVPROC) (GLuint index, const GLfloat *v);
typedef void (APIENTRYP PFNGLVERTEXATTRIB4IVPROC) (GLuint index, const GLint *v);
typedef void (APIENTRYP PFNGLVERTEXATTRIB4SPROC) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
typedef void (APIENTRYP PFNGLVERTEXATTRIB4SVPROC) (GLuint index, const GLshort *v);
typedef void (APIENTRYP PFNGLVERTEXATTRIB4UBVPROC) (GLuint index, const GLubyte *v);
typedef void (APIENTRYP PFNGLVERTEXATTRIB4UIVPROC) (GLuint index, const GLuint *v);
typedef void (APIENTRYP PFNGLVERTEXATTRIB4USVPROC) (GLuint index, const GLushort *v);
typedef void (APIENTRYP PFNGLVERTEXATTRIBPOINTERPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glBlendEquationSeparate (GLenum modeRGB, GLenum modeAlpha);
GLAPI void APIENTRY glDrawBuffers (GLsizei n, const GLenum *bufs);
GLAPI void APIENTRY glStencilOpSeparate (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
GLAPI void APIENTRY glStencilFuncSeparate (GLenum face, GLenum func, GLint ref, GLuint mask);
GLAPI void APIENTRY glStencilMaskSeparate (GLenum face, GLuint mask);
GLAPI void APIENTRY glAttachShader (GLuint program, GLuint shader);
GLAPI void APIENTRY glBindAttribLocation (GLuint program, GLuint index, const GLchar *name);
GLAPI void APIENTRY glCompileShader (GLuint shader);
GLAPI GLuint APIENTRY glCreateProgram (void);
GLAPI GLuint APIENTRY glCreateShader (GLenum type);
GLAPI void APIENTRY glDeleteProgram (GLuint program);
GLAPI void APIENTRY glDeleteShader (GLuint shader);
GLAPI void APIENTRY glDetachShader (GLuint program, GLuint shader);
GLAPI void APIENTRY glDisableVertexAttribArray (GLuint index);
GLAPI void APIENTRY glEnableVertexAttribArray (GLuint index);
GLAPI void APIENTRY glGetActiveAttrib (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
GLAPI void APIENTRY glGetActiveUniform (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
GLAPI void APIENTRY glGetAttachedShaders (GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders);
GLAPI GLint APIENTRY glGetAttribLocation (GLuint program, const GLchar *name);
GLAPI void APIENTRY glGetProgramiv (GLuint program, GLenum pname, GLint *params);
GLAPI void APIENTRY glGetProgramInfoLog (GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
GLAPI void APIENTRY glGetShaderiv (GLuint shader, GLenum pname, GLint *params);
GLAPI void APIENTRY glGetShaderInfoLog (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
GLAPI void APIENTRY glGetShaderSource (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source);
GLAPI GLint APIENTRY glGetUniformLocation (GLuint program, const GLchar *name);
GLAPI void APIENTRY glGetUniformfv (GLuint program, GLint location, GLfloat *params);
GLAPI void APIENTRY glGetUniformiv (GLuint program, GLint location, GLint *params);
GLAPI void APIENTRY glGetVertexAttribdv (GLuint index, GLenum pname, GLdouble *params);
GLAPI void APIENTRY glGetVertexAttribfv (GLuint index, GLenum pname, GLfloat *params);
GLAPI void APIENTRY glGetVertexAttribiv (GLuint index, GLenum pname, GLint *params);
GLAPI void APIENTRY glGetVertexAttribPointerv (GLuint index, GLenum pname, void **pointer);
GLAPI GLboolean APIENTRY glIsProgram (GLuint program);
GLAPI GLboolean APIENTRY glIsShader (GLuint shader);
GLAPI void APIENTRY glLinkProgram (GLuint program);
GLAPI void APIENTRY glShaderSource (GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length);
GLAPI void APIENTRY glUseProgram (GLuint program);
GLAPI void APIENTRY glUniform1f (GLint location, GLfloat v0);
GLAPI void APIENTRY glUniform2f (GLint location, GLfloat v0, GLfloat v1);
GLAPI void APIENTRY glUniform3f (GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
GLAPI void APIENTRY glUniform4f (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
GLAPI void APIENTRY glUniform1i (GLint location, GLint v0);
GLAPI void APIENTRY glUniform2i (GLint location, GLint v0, GLint v1);
GLAPI void APIENTRY glUniform3i (GLint location, GLint v0, GLint v1, GLint v2);
GLAPI void APIENTRY glUniform4i (GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
GLAPI void APIENTRY glUniform1fv (GLint location, GLsizei count, const GLfloat *value);
GLAPI void APIENTRY glUniform2fv (GLint location, GLsizei count, const GLfloat *value);
GLAPI void APIENTRY glUniform3fv (GLint location, GLsizei count, const GLfloat *value);
GLAPI void APIENTRY glUniform4fv (GLint location, GLsizei count, const GLfloat *value);
GLAPI void APIENTRY glUniform1iv (GLint location, GLsizei count, const GLint *value);
GLAPI void APIENTRY glUniform2iv (GLint location, GLsizei count, const GLint *value);
GLAPI void APIENTRY glUniform3iv (GLint location, GLsizei count, const GLint *value);
GLAPI void APIENTRY glUniform4iv (GLint location, GLsizei count, const GLint *value);
GLAPI void APIENTRY glUniformMatrix2fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI void APIENTRY glUniformMatrix3fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI void APIENTRY glUniformMatrix4fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI void APIENTRY glValidateProgram (GLuint program);
GLAPI void APIENTRY glVertexAttrib1d (GLuint index, GLdouble x);
GLAPI void APIENTRY glVertexAttrib1dv (GLuint index, const GLdouble *v);
GLAPI void APIENTRY glVertexAttrib1f (GLuint index, GLfloat x);
GLAPI void APIENTRY glVertexAttrib1fv (GLuint index, const GLfloat *v);
GLAPI void APIENTRY glVertexAttrib1s (GLuint index, GLshort x);
GLAPI void APIENTRY glVertexAttrib1sv (GLuint index, const GLshort *v);
GLAPI void APIENTRY glVertexAttrib2d (GLuint index, GLdouble x, GLdouble y);
GLAPI void APIENTRY glVertexAttrib2dv (GLuint index, const GLdouble *v);
GLAPI void APIENTRY glVertexAttrib2f (GLuint index, GLfloat x, GLfloat y);
GLAPI void APIENTRY glVertexAttrib2fv (GLuint index, const GLfloat *v);
GLAPI void APIENTRY glVertexAttrib2s (GLuint index, GLshort x, GLshort y);
GLAPI void APIENTRY glVertexAttrib2sv (GLuint index, const GLshort *v);
GLAPI void APIENTRY glVertexAttrib3d (GLuint index, GLdouble x, GLdouble y, GLdouble z);
GLAPI void APIENTRY glVertexAttrib3dv (GLuint index, const GLdouble *v);
GLAPI void APIENTRY glVertexAttrib3f (GLuint index, GLfloat x, GLfloat y, GLfloat z);
GLAPI void APIENTRY glVertexAttrib3fv (GLuint index, const GLfloat *v);
GLAPI void APIENTRY glVertexAttrib3s (GLuint index, GLshort x, GLshort y, GLshort z);
GLAPI void APIENTRY glVertexAttrib3sv (GLuint index, const GLshort *v);
GLAPI void APIENTRY glVertexAttrib4Nbv (GLuint index, const GLbyte *v);
GLAPI void APIENTRY glVertexAttrib4Niv (GLuint index, const GLint *v);
GLAPI void APIENTRY glVertexAttrib4Nsv (GLuint index, const GLshort *v);
GLAPI void APIENTRY glVertexAttrib4Nub (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
GLAPI void APIENTRY glVertexAttrib4Nubv (GLuint index, const GLubyte *v);
GLAPI void APIENTRY glVertexAttrib4Nuiv (GLuint index, const GLuint *v);
GLAPI void APIENTRY glVertexAttrib4Nusv (GLuint index, const GLushort *v);
GLAPI void APIENTRY glVertexAttrib4bv (GLuint index, const GLbyte *v);
GLAPI void APIENTRY glVertexAttrib4d (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
GLAPI void APIENTRY glVertexAttrib4dv (GLuint index, const GLdouble *v);
GLAPI void APIENTRY glVertexAttrib4f (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
GLAPI void APIENTRY glVertexAttrib4fv (GLuint index, const GLfloat *v);
GLAPI void APIENTRY glVertexAttrib4iv (GLuint index, const GLint *v);
GLAPI void APIENTRY glVertexAttrib4s (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
GLAPI void APIENTRY glVertexAttrib4sv (GLuint index, const GLshort *v);
GLAPI void APIENTRY glVertexAttrib4ubv (GLuint index, const GLubyte *v);
GLAPI void APIENTRY glVertexAttrib4uiv (GLuint index, const GLuint *v);
GLAPI void APIENTRY glVertexAttrib4usv (GLuint index, const GLushort *v);
GLAPI void APIENTRY glVertexAttribPointer (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer);
#endif
#endif /* GL_VERSION_2_0 */

#ifndef GL_VERSION_2_1
#define GL_VERSION_2_1 1
#define GL_PIXEL_PACK_BUFFER              0x88EB
#define GL_PIXEL_UNPACK_BUFFER            0x88EC
#define GL_PIXEL_PACK_BUFFER_BINDING      0x88ED
#define GL_PIXEL_UNPACK_BUFFER_BINDING    0x88EF
#define GL_FLOAT_MAT2x3                   0x8B65
#define GL_FLOAT_MAT2x4                   0x8B66
#define GL_FLOAT_MAT3x2                   0x8B67
#define GL_FLOAT_MAT3x4                   0x8B68
#define GL_FLOAT_MAT4x2                   0x8B69
#define GL_FLOAT_MAT4x3                   0x8B6A
#define GL_SRGB                           0x8C40
#define GL_SRGB8                          0x8C41
#define GL_SRGB_ALPHA                     0x8C42
#define GL_SRGB8_ALPHA8                   0x8C43
#define GL_COMPRESSED_SRGB                0x8C48
#define GL_COMPRESSED_SRGB_ALPHA          0x8C49
typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X3FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X2FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X4FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X2FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X4FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X3FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glUniformMatrix2x3fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI void APIENTRY glUniformMatrix3x2fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI void APIENTRY glUniformMatrix2x4fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI void APIENTRY glUniformMatrix4x2fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI void APIENTRY glUniformMatrix3x4fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI void APIENTRY glUniformMatrix4x3fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
#endif
#endif /* GL_VERSION_2_1 */

#ifndef GL_VERSION_3_0
#define GL_VERSION_3_0 1
typedef unsigned short GLhalf;
#define GL_COMPARE_REF_TO_TEXTURE         0x884E
#define GL_CLIP_DISTANCE0                 0x3000
#define GL_CLIP_DISTANCE1                 0x3001
#define GL_CLIP_DISTANCE2                 0x3002
#define GL_CLIP_DISTANCE3                 0x3003
#define GL_CLIP_DISTANCE4                 0x3004
#define GL_CLIP_DISTANCE5                 0x3005
#define GL_CLIP_DISTANCE6                 0x3006
#define GL_CLIP_DISTANCE7                 0x3007
#define GL_MAX_CLIP_DISTANCES             0x0D32
#define GL_MAJOR_VERSION                  0x821B
#define GL_MINOR_VERSION                  0x821C
#define GL_NUM_EXTENSIONS                 0x821D
#define GL_CONTEXT_FLAGS                  0x821E
#define GL_COMPRESSED_RED                 0x8225
#define GL_COMPRESSED_RG                  0x8226
#define GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT 0x00000001
#define GL_RGBA32F                        0x8814
#define GL_RGB32F                         0x8815
#define GL_RGBA16F                        0x881A
#define GL_RGB16F                         0x881B
#define GL_VERTEX_ATTRIB_ARRAY_INTEGER    0x88FD
#define GL_MAX_ARRAY_TEXTURE_LAYERS       0x88FF
#define GL_MIN_PROGRAM_TEXEL_OFFSET       0x8904
#define GL_MAX_PROGRAM_TEXEL_OFFSET       0x8905
#define GL_CLAMP_READ_COLOR               0x891C
#define GL_FIXED_ONLY                     0x891D
#define GL_MAX_VARYING_COMPONENTS         0x8B4B
#define GL_TEXTURE_1D_ARRAY               0x8C18
#define GL_PROXY_TEXTURE_1D_ARRAY         0x8C19
#define GL_TEXTURE_2D_ARRAY               0x8C1A
#define GL_PROXY_TEXTURE_2D_ARRAY         0x8C1B
#define GL_TEXTURE_BINDING_1D_ARRAY       0x8C1C
#define GL_TEXTURE_BINDING_2D_ARRAY       0x8C1D
#define GL_R11F_G11F_B10F                 0x8C3A
#define GL_UNSIGNED_INT_10F_11F_11F_REV   0x8C3B
#define GL_RGB9_E5                        0x8C3D
#define GL_UNSIGNED_INT_5_9_9_9_REV       0x8C3E
#define GL_TEXTURE_SHARED_SIZE            0x8C3F
#define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH 0x8C76
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE 0x8C7F
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS 0x8C80
#define GL_TRANSFORM_FEEDBACK_VARYINGS    0x8C83
#define GL_TRANSFORM_FEEDBACK_BUFFER_START 0x8C84
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE 0x8C85
#define GL_PRIMITIVES_GENERATED           0x8C87
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN 0x8C88
#define GL_RASTERIZER_DISCARD             0x8C89
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS 0x8C8A
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS 0x8C8B
#define GL_INTERLEAVED_ATTRIBS            0x8C8C
#define GL_SEPARATE_ATTRIBS               0x8C8D
#define GL_TRANSFORM_FEEDBACK_BUFFER      0x8C8E
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING 0x8C8F
#define GL_RGBA32UI                       0x8D70
#define GL_RGB32UI                        0x8D71
#define GL_RGBA16UI                       0x8D76
#define GL_RGB16UI                        0x8D77
#define GL_RGBA8UI                        0x8D7C
#define GL_RGB8UI                         0x8D7D
#define GL_RGBA32I                        0x8D82
#define GL_RGB32I                         0x8D83
#define GL_RGBA16I                        0x8D88
#define GL_RGB16I                         0x8D89
#define GL_RGBA8I                         0x8D8E
#define GL_RGB8I                          0x8D8F
#define GL_RED_INTEGER                    0x8D94
#define GL_GREEN_INTEGER                  0x8D95
#define GL_BLUE_INTEGER                   0x8D96
#define GL_RGB_INTEGER                    0x8D98
#define GL_RGBA_INTEGER                   0x8D99
#define GL_BGR_INTEGER                    0x8D9A
#define GL_BGRA_INTEGER                   0x8D9B
#define GL_SAMPLER_1D_ARRAY               0x8DC0
#define GL_SAMPLER_2D_ARRAY               0x8DC1
#define GL_SAMPLER_1D_ARRAY_SHADOW        0x8DC3
#define GL_SAMPLER_2D_ARRAY_SHADOW        0x8DC4
#define GL_SAMPLER_CUBE_SHADOW            0x8DC5
#define GL_UNSIGNED_INT_VEC2              0x8DC6
#define GL_UNSIGNED_INT_VEC3              0x8DC7
#define GL_UNSIGNED_INT_VEC4              0x8DC8
#define GL_INT_SAMPLER_1D                 0x8DC9
#define GL_INT_SAMPLER_2D                 0x8DCA
#define GL_INT_SAMPLER_3D                 0x8DCB
#define GL_INT_SAMPLER_CUBE               0x8DCC
#define GL_INT_SAMPLER_1D_ARRAY           0x8DCE
#define GL_INT_SAMPLER_2D_ARRAY           0x8DCF
#define GL_UNSIGNED_INT_SAMPLER_1D        0x8DD1
#define GL_UNSIGNED_INT_SAMPLER_2D        0x8DD2
#define GL_UNSIGNED_INT_SAMPLER_3D        0x8DD3
#define GL_UNSIGNED_INT_SAMPLER_CUBE      0x8DD4
#define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY  0x8DD6
#define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY  0x8DD7
#define GL_QUERY_WAIT                     0x8E13
#define GL_QUERY_NO_WAIT                  0x8E14
#define GL_QUERY_BY_REGION_WAIT           0x8E15
#define GL_QUERY_BY_REGION_NO_WAIT        0x8E16
#define GL_BUFFER_ACCESS_FLAGS            0x911F
#define GL_BUFFER_MAP_LENGTH              0x9120
#define GL_BUFFER_MAP_OFFSET              0x9121
#define GL_DEPTH_COMPONENT32F             0x8CAC
#define GL_DEPTH32F_STENCIL8              0x8CAD
#define GL_FLOAT_32_UNSIGNED_INT_24_8_REV 0x8DAD
#define GL_INVALID_FRAMEBUFFER_OPERATION  0x0506
#define GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING 0x8210
#define GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE 0x8211
#define GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE 0x8212
#define GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE 0x8213
#define GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE 0x8214
#define GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE 0x8215
#define GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE 0x8216
#define GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE 0x8217
#define GL_FRAMEBUFFER_DEFAULT            0x8218
#define GL_FRAMEBUFFER_UNDEFINED          0x8219
#define GL_DEPTH_STENCIL_ATTACHMENT       0x821A
#define GL_MAX_RENDERBUFFER_SIZE          0x84E8
#define GL_DEPTH_STENCIL                  0x84F9
#define GL_UNSIGNED_INT_24_8              0x84FA
#define GL_DEPTH24_STENCIL8               0x88F0
#define GL_TEXTURE_STENCIL_SIZE           0x88F1
#define GL_TEXTURE_RED_TYPE               0x8C10
#define GL_TEXTURE_GREEN_TYPE             0x8C11
#define GL_TEXTURE_BLUE_TYPE              0x8C12
#define GL_TEXTURE_ALPHA_TYPE             0x8C13
#define GL_TEXTURE_DEPTH_TYPE             0x8C16
#define GL_UNSIGNED_NORMALIZED            0x8C17
#define GL_FRAMEBUFFER_BINDING            0x8CA6
#define GL_DRAW_FRAMEBUFFER_BINDING       0x8CA6
#define GL_RENDERBUFFER_BINDING           0x8CA7
#define GL_READ_FRAMEBUFFER               0x8CA8
#define GL_DRAW_FRAMEBUFFER               0x8CA9
#define GL_READ_FRAMEBUFFER_BINDING       0x8CAA
#define GL_RENDERBUFFER_SAMPLES           0x8CAB
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE 0x8CD0
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME 0x8CD1
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL 0x8CD2
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE 0x8CD3
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER 0x8CD4
#define GL_FRAMEBUFFER_COMPLETE           0x8CD5
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT 0x8CD6
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT 0x8CD7
#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER 0x8CDB
#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER 0x8CDC
#define GL_FRAMEBUFFER_UNSUPPORTED        0x8CDD
#define GL_MAX_COLOR_ATTACHMENTS          0x8CDF
#define GL_COLOR_ATTACHMENT0              0x8CE0
#define GL_COLOR_ATTACHMENT1              0x8CE1
#define GL_COLOR_ATTACHMENT2              0x8CE2
#define GL_COLOR_ATTACHMENT3              0x8CE3
#define GL_COLOR_ATTACHMENT4              0x8CE4
#define GL_COLOR_ATTACHMENT5              0x8CE5
#define GL_COLOR_ATTACHMENT6              0x8CE6
#define GL_COLOR_ATTACHMENT7              0x8CE7
#define GL_COLOR_ATTACHMENT8              0x8CE8
#define GL_COLOR_ATTACHMENT9              0x8CE9
#define GL_COLOR_ATTACHMENT10             0x8CEA
#define GL_COLOR_ATTACHMENT11             0x8CEB
#define GL_COLOR_ATTACHMENT12             0x8CEC
#define GL_COLOR_ATTACHMENT13             0x8CED
#define GL_COLOR_ATTACHMENT14             0x8CEE
#define GL_COLOR_ATTACHMENT15             0x8CEF
#define GL_COLOR_ATTACHMENT16             0x8CF0
#define GL_COLOR_ATTACHMENT17             0x8CF1
#define GL_COLOR_ATTACHMENT18             0x8CF2
#define GL_COLOR_ATTACHMENT19             0x8CF3
#define GL_COLOR_ATTACHMENT20             0x8CF4
#define GL_COLOR_ATTACHMENT21             0x8CF5
#define GL_COLOR_ATTACHMENT22             0x8CF6
#define GL_COLOR_ATTACHMENT23             0x8CF7
#define GL_COLOR_ATTACHMENT24             0x8CF8
#define GL_COLOR_ATTACHMENT25             0x8CF9
#define GL_COLOR_ATTACHMENT26             0x8CFA
#define GL_COLOR_ATTACHMENT27             0x8CFB
#define GL_COLOR_ATTACHMENT28             0x8CFC
#define GL_COLOR_ATTACHMENT29             0x8CFD
#define GL_COLOR_ATTACHMENT30             0x8CFE
#define GL_COLOR_ATTACHMENT31             0x8CFF
#define GL_DEPTH_ATTACHMENT               0x8D00
#define GL_STENCIL_ATTACHMENT             0x8D20
#define GL_FRAMEBUFFER                    0x8D40
#define GL_RENDERBUFFER                   0x8D41
#define GL_RENDERBUFFER_WIDTH             0x8D42
#define GL_RENDERBUFFER_HEIGHT            0x8D43
#define GL_RENDERBUFFER_INTERNAL_FORMAT   0x8D44
#define GL_STENCIL_INDEX1                 0x8D46
#define GL_STENCIL_INDEX4                 0x8D47
#define GL_STENCIL_INDEX8                 0x8D48
#define GL_STENCIL_INDEX16                0x8D49
#define GL_RENDERBUFFER_RED_SIZE          0x8D50
#define GL_RENDERBUFFER_GREEN_SIZE        0x8D51
#define GL_RENDERBUFFER_BLUE_SIZE         0x8D52
#define GL_RENDERBUFFER_ALPHA_SIZE        0x8D53
#define GL_RENDERBUFFER_DEPTH_SIZE        0x8D54
#define GL_RENDERBUFFER_STENCIL_SIZE      0x8D55
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE 0x8D56
#define GL_MAX_SAMPLES                    0x8D57
#define GL_FRAMEBUFFER_SRGB               0x8DB9
#define GL_HALF_FLOAT                     0x140B
#define GL_MAP_READ_BIT                   0x0001
#define GL_MAP_WRITE_BIT                  0x0002
#define GL_MAP_INVALIDATE_RANGE_BIT       0x0004
#define GL_MAP_INVALIDATE_BUFFER_BIT      0x0008
#define GL_MAP_FLUSH_EXPLICIT_BIT         0x0010
#define GL_MAP_UNSYNCHRONIZED_BIT         0x0020
#define GL_COMPRESSED_RED_RGTC1           0x8DBB
#define GL_COMPRESSED_SIGNED_RED_RGTC1    0x8DBC
#define GL_COMPRESSED_RG_RGTC2            0x8DBD
#define GL_COMPRESSED_SIGNED_RG_RGTC2     0x8DBE
#define GL_RG                             0x8227
#define GL_RG_INTEGER                     0x8228
#define GL_R8                             0x8229
#define GL_R16                            0x822A
#define GL_RG8                            0x822B
#define GL_RG16                           0x822C
#define GL_R16F                           0x822D
#define GL_R32F                           0x822E
#define GL_RG16F                          0x822F
#define GL_RG32F                          0x8230
#define GL_R8I                            0x8231
#define GL_R8UI                           0x8232
#define GL_R16I                           0x8233
#define GL_R16UI                          0x8234
#define GL_R32I                           0x8235
#define GL_R32UI                          0x8236
#define GL_RG8I                           0x8237
#define GL_RG8UI                          0x8238
#define GL_RG16I                          0x8239
#define GL_RG16UI                         0x823A
#define GL_RG32I                          0x823B
#define GL_RG32UI                         0x823C
#define GL_VERTEX_ARRAY_BINDING           0x85B5
typedef void (APIENTRYP PFNGLCOLORMASKIPROC) (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
typedef void (APIENTRYP PFNGLGETBOOLEANI_VPROC) (GLenum target, GLuint index, GLboolean *data);
typedef void (APIENTRYP PFNGLGETINTEGERI_VPROC) (GLenum target, GLuint index, GLint *data);
typedef void (APIENTRYP PFNGLENABLEIPROC) (GLenum target, GLuint index);
typedef void (APIENTRYP PFNGLDISABLEIPROC) (GLenum target, GLuint index);
typedef GLboolean (APIENTRYP PFNGLISENABLEDIPROC) (GLenum target, GLuint index);
typedef void (APIENTRYP PFNGLBEGINTRANSFORMFEEDBACKPROC) (GLenum primitiveMode);
typedef void (APIENTRYP PFNGLENDTRANSFORMFEEDBACKPROC) (void);
typedef void (APIENTRYP PFNGLBINDBUFFERRANGEPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (APIENTRYP PFNGLBINDBUFFERBASEPROC) (GLenum target, GLuint index, GLuint buffer);
typedef void (APIENTRYP PFNGLTRANSFORMFEEDBACKVARYINGSPROC) (GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode);
typedef void (APIENTRYP PFNGLGETTRANSFORMFEEDBACKVARYINGPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
typedef void (APIENTRYP PFNGLCLAMPCOLORPROC) (GLenum target, GLenum clamp);
typedef void (APIENTRYP PFNGLBEGINCONDITIONALRENDERPROC) (GLuint id, GLenum mode);
typedef void (APIENTRYP PFNGLENDCONDITIONALRENDERPROC) (void);
typedef void (APIENTRYP PFNGLVERTEXATTRIBIPOINTERPROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIIVPROC) (GLuint index, GLenum pname, GLint *params);
typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIUIVPROC) (GLuint index, GLenum pname, GLuint *params);
typedef void (APIENTRYP PFNGLVERTEXATTRIBI1IPROC) (GLuint index, GLint x);
typedef void (APIENTRYP PFNGLVERTEXATTRIBI2IPROC) (GLuint index, GLint x, GLint y);
typedef void (APIENTRYP PFNGLVERTEXATTRIBI3IPROC) (GLuint index, GLint x, GLint y, GLint z);
typedef void (APIENTRYP PFNGLVERTEXATTRIBI4IPROC) (GLuint index, GLint x, GLint y, GLint z, GLint w);
typedef void (APIENTRYP PFNGLVERTEXATTRIBI1UIPROC) (GLuint index, GLuint x);
typedef void (APIENTRYP PFNGLVERTEXATTRIBI2UIPROC) (GLuint index, GLuint x, GLuint y);
typedef void (APIENTRYP PFNGLVERTEXATTRIBI3UIPROC) (GLuint index, GLuint x, GLuint y, GLuint z);
typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UIPROC) (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
typedef void (APIENTRYP PFNGLVERTEXATTRIBI1IVPROC) (GLuint index, const GLint *v);
typedef void (APIENTRYP PFNGLVERTEXATTRIBI2IVPROC) (GLuint index, const GLint *v);
typedef void (APIENTRYP PFNGLVERTEXATTRIBI3IVPROC) (GLuint index, const GLint *v);
typedef void (APIENTRYP PFNGLVERTEXATTRIBI4IVPROC) (GLuint index, const GLint *v);
typedef void (APIENTRYP PFNGLVERTEXATTRIBI1UIVPROC) (GLuint index, const GLuint *v);
typedef void (APIENTRYP PFNGLVERTEXATTRIBI2UIVPROC) (GLuint index, const GLuint *v);
typedef void (APIENTRYP PFNGLVERTEXATTRIBI3UIVPROC) (GLuint index, const GLuint *v);
typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UIVPROC) (GLuint index, const GLuint *v);
typedef void (APIENTRYP PFNGLVERTEXATTRIBI4BVPROC) (GLuint index, const GLbyte *v);
typedef void (APIENTRYP PFNGLVERTEXATTRIBI4SVPROC) (GLuint index, const GLshort *v);
typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UBVPROC) (GLuint index, const GLubyte *v);
typedef void (APIENTRYP PFNGLVERTEXATTRIBI4USVPROC) (GLuint index, const GLushort *v);
typedef void (APIENTRYP PFNGLGETUNIFORMUIVPROC) (GLuint program, GLint location, GLuint *params);
typedef void (APIENTRYP PFNGLBINDFRAGDATALOCATIONPROC) (GLuint program, GLuint color, const GLchar *name);
typedef GLint (APIENTRYP PFNGLGETFRAGDATALOCATIONPROC) (GLuint program, const GLchar *name);
typedef void (APIENTRYP PFNGLUNIFORM1UIPROC) (GLint location, GLuint v0);
typedef void (APIENTRYP PFNGLUNIFORM2UIPROC) (GLint location, GLuint v0, GLuint v1);
typedef void (APIENTRYP PFNGLUNIFORM3UIPROC) (GLint location, GLuint v0, GLuint v1, GLuint v2);
typedef void (APIENTRYP PFNGLUNIFORM4UIPROC) (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
typedef void (APIENTRYP PFNGLUNIFORM1UIVPROC) (GLint location, GLsizei count, const GLuint *value);
typedef void (APIENTRYP PFNGLUNIFORM2UIVPROC) (GLint location, GLsizei count, const GLuint *value);
typedef void (APIENTRYP PFNGLUNIFORM3UIVPROC) (GLint location, GLsizei count, const GLuint *value);
typedef void (APIENTRYP PFNGLUNIFORM4UIVPROC) (GLint location, GLsizei count, const GLuint *value);
typedef void (APIENTRYP PFNGLTEXPARAMETERIIVPROC) (GLenum target, GLenum pname, const GLint *params);
typedef void (APIENTRYP PFNGLTEXPARAMETERIUIVPROC) (GLenum target, GLenum pname, const GLuint *params);
typedef void (APIENTRYP PFNGLGETTEXPARAMETERIIVPROC) (GLenum target, GLenum pname, GLint *params);
typedef void (APIENTRYP PFNGLGETTEXPARAMETERIUIVPROC) (GLenum target, GLenum pname, GLuint *params);
typedef void (APIENTRYP PFNGLCLEARBUFFERIVPROC) (GLenum buffer, GLint drawbuffer, const GLint *value);
typedef void (APIENTRYP PFNGLCLEARBUFFERUIVPROC) (GLenum buffer, GLint drawbuffer, const GLuint *value);
typedef void (APIENTRYP PFNGLCLEARBUFFERFVPROC) (GLenum buffer, GLint drawbuffer, const GLfloat *value);
typedef void (APIENTRYP PFNGLCLEARBUFFERFIPROC) (GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
typedef const GLubyte *(APIENTRYP PFNGLGETSTRINGIPROC) (GLenum name, GLuint index);
typedef GLboolean (APIENTRYP PFNGLISRENDERBUFFERPROC) (GLuint renderbuffer);
typedef void (APIENTRYP PFNGLBINDRENDERBUFFERPROC) (GLenum target, GLuint renderbuffer);
typedef void (APIENTRYP PFNGLDELETERENDERBUFFERSPROC) (GLsizei n, const GLuint *renderbuffers);
typedef void (APIENTRYP PFNGLGENRENDERBUFFERSPROC) (GLsizei n, GLuint *renderbuffers);
typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (APIENTRYP PFNGLGETRENDERBUFFERPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);
typedef GLboolean (APIENTRYP PFNGLISFRAMEBUFFERPROC) (GLuint framebuffer);
typedef void (APIENTRYP PFNGLBINDFRAMEBUFFERPROC) (GLenum target, GLuint framebuffer);
typedef void (APIENTRYP PFNGLDELETEFRAMEBUFFERSPROC) (GLsizei n, const GLuint *framebuffers);
typedef void (APIENTRYP PFNGLGENFRAMEBUFFERSPROC) (GLsizei n, GLuint *framebuffers);
typedef GLenum (APIENTRYP PFNGLCHECKFRAMEBUFFERSTATUSPROC) (GLenum target);
typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE1DPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE2DPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE3DPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
typedef void (APIENTRYP PFNGLFRAMEBUFFERRENDERBUFFERPROC) (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
typedef void (APIENTRYP PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC) (GLenum target, GLenum attachment, GLenum pname, GLint *params);
typedef void (APIENTRYP PFNGLGENERATEMIPMAPPROC) (GLenum target);
typedef void (APIENTRYP PFNGLBLITFRAMEBUFFERPROC) (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURELAYERPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef void *(APIENTRYP PFNGLMAPBUFFERRANGEPROC) (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
typedef void (APIENTRYP PFNGLFLUSHMAPPEDBUFFERRANGEPROC) (GLenum target, GLintptr offset, GLsizeiptr length);
typedef void (APIENTRYP PFNGLBINDVERTEXARRAYPROC) (GLuint array);
typedef void (APIENTRYP PFNGLDELETEVERTEXARRAYSPROC) (GLsizei n, const GLuint *arrays);
typedef void (APIENTRYP PFNGLGENVERTEXARRAYSPROC) (GLsizei n, GLuint *arrays);
typedef GLboolean (APIENTRYP PFNGLISVERTEXARRAYPROC) (GLuint array);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glColorMaski (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
GLAPI void APIENTRY glGetBooleani_v (GLenum target, GLuint index, GLboolean *data);
GLAPI void APIENTRY glGetIntegeri_v (GLenum target, GLuint index, GLint *data);
GLAPI void APIENTRY glEnablei (GLenum target, GLuint index);
GLAPI void APIENTRY glDisablei (GLenum target, GLuint index);
GLAPI GLboolean APIENTRY glIsEnabledi (GLenum target, GLuint index);
GLAPI void APIENTRY glBeginTransformFeedback (GLenum primitiveMode);
GLAPI void APIENTRY glEndTransformFeedback (void);
GLAPI void APIENTRY glBindBufferRange (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
GLAPI void APIENTRY glBindBufferBase (GLenum target, GLuint index, GLuint buffer);
GLAPI void APIENTRY glTransformFeedbackVaryings (GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode);
GLAPI void APIENTRY glGetTransformFeedbackVarying (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
GLAPI void APIENTRY glClampColor (GLenum target, GLenum clamp);
GLAPI void APIENTRY glBeginConditionalRender (GLuint id, GLenum mode);
GLAPI void APIENTRY glEndConditionalRender (void);
GLAPI void APIENTRY glVertexAttribIPointer (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
GLAPI void APIENTRY glGetVertexAttribIiv (GLuint index, GLenum pname, GLint *params);
GLAPI void APIENTRY glGetVertexAttribIuiv (GLuint index, GLenum pname, GLuint *params);
GLAPI void APIENTRY glVertexAttribI1i (GLuint index, GLint x);
GLAPI void APIENTRY glVertexAttribI2i (GLuint index, GLint x, GLint y);
GLAPI void APIENTRY glVertexAttribI3i (GLuint index, GLint x, GLint y, GLint z);
GLAPI void APIENTRY glVertexAttribI4i (GLuint index, GLint x, GLint y, GLint z, GLint w);
GLAPI void APIENTRY glVertexAttribI1ui (GLuint index, GLuint x);
GLAPI void APIENTRY glVertexAttribI2ui (GLuint index, GLuint x, GLuint y);
GLAPI void APIENTRY glVertexAttribI3ui (GLuint index, GLuint x, GLuint y, GLuint z);
GLAPI void APIENTRY glVertexAttribI4ui (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
GLAPI void APIENTRY glVertexAttribI1iv (GLuint index, const GLint *v);
GLAPI void APIENTRY glVertexAttribI2iv (GLuint index, const GLint *v);
GLAPI void APIENTRY glVertexAttribI3iv (GLuint index, const GLint *v);
GLAPI void APIENTRY glVertexAttribI4iv (GLuint index, const GLint *v);
GLAPI void APIENTRY glVertexAttribI1uiv (GLuint index, const GLuint *v);
GLAPI void APIENTRY glVertexAttribI2uiv (GLuint index, const GLuint *v);
GLAPI void APIENTRY glVertexAttribI3uiv (GLuint index, const GLuint *v);
GLAPI void APIENTRY glVertexAttribI4uiv (GLuint index, const GLuint *v);
GLAPI void APIENTRY glVertexAttribI4bv (GLuint index, const GLbyte *v);
GLAPI void APIENTRY glVertexAttribI4sv (GLuint index, const GLshort *v);
GLAPI void APIENTRY glVertexAttribI4ubv (GLuint index, const GLubyte *v);
GLAPI void APIENTRY glVertexAttribI4usv (GLuint index, const GLushort *v);
GLAPI void APIENTRY glGetUniformuiv (GLuint program, GLint location, GLuint *params);
GLAPI void APIENTRY glBindFragDataLocation (GLuint program, GLuint color, const GLchar *name);
GLAPI GLint APIENTRY glGetFragDataLocation (GLuint program, const GLchar *name);
GLAPI void APIENTRY glUniform1ui (GLint location, GLuint v0);
GLAPI void APIENTRY glUniform2ui (GLint location, GLuint v0, GLuint v1);
GLAPI void APIENTRY glUniform3ui (GLint location, GLuint v0, GLuint v1, GLuint v2);
GLAPI void APIENTRY glUniform4ui (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
GLAPI void APIENTRY glUniform1uiv (GLint location, GLsizei count, const GLuint *value);
GLAPI void APIENTRY glUniform2uiv (GLint location, GLsizei count, const GLuint *value);
GLAPI void APIENTRY glUniform3uiv (GLint location, GLsizei count, const GLuint *value);
GLAPI void APIENTRY glUniform4uiv (GLint location, GLsizei count, const GLuint *value);
GLAPI void APIENTRY glTexParameterIiv (GLenum target, GLenum pname, const GLint *params);
GLAPI void APIENTRY glTexParameterIuiv (GLenum target, GLenum pname, const GLuint *params);
GLAPI void APIENTRY glGetTexParameterIiv (GLenum target, GLenum pname, GLint *params);
GLAPI void APIENTRY glGetTexParameterIuiv (GLenum target, GLenum pname, GLuint *params);
GLAPI void APIENTRY glClearBufferiv (GLenum buffer, GLint drawbuffer, const GLint *value);
GLAPI void APIENTRY glClearBufferuiv (GLenum buffer, GLint drawbuffer, const GLuint *value);
GLAPI void APIENTRY glClearBufferfv (GLenum buffer, GLint drawbuffer, const GLfloat *value);
GLAPI void APIENTRY glClearBufferfi (GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
GLAPI const GLubyte *APIENTRY glGetStringi (GLenum name, GLuint index);
GLAPI GLboolean APIENTRY glIsRenderbuffer (GLuint renderbuffer);
GLAPI void APIENTRY glBindRenderbuffer (GLenum target, GLuint renderbuffer);
GLAPI void APIENTRY glDeleteRenderbuffers (GLsizei n, const GLuint *renderbuffers);
GLAPI void APIENTRY glGenRenderbuffers (GLsizei n, GLuint *renderbuffers);
GLAPI void APIENTRY glRenderbufferStorage (GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
GLAPI void APIENTRY glGetRenderbufferParameteriv (GLenum target, GLenum pname, GLint *params);
GLAPI GLboolean APIENTRY glIsFramebuffer (GLuint framebuffer);
GLAPI void APIENTRY glBindFramebuffer (GLenum target, GLuint framebuffer);
GLAPI void APIENTRY glDeleteFramebuffers (GLsizei n, const GLuint *framebuffers);
GLAPI void APIENTRY glGenFramebuffers (GLsizei n, GLuint *framebuffers);
GLAPI GLenum APIENTRY glCheckFramebufferStatus (GLenum target);
GLAPI void APIENTRY glFramebufferTexture1D (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
GLAPI void APIENTRY glFramebufferTexture2D (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
GLAPI void APIENTRY glFramebufferTexture3D (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
GLAPI void APIENTRY glFramebufferRenderbuffer (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
GLAPI void APIENTRY glGetFramebufferAttachmentParameteriv (GLenum target, GLenum attachment, GLenum pname, GLint *params);
GLAPI void APIENTRY glGenerateMipmap (GLenum target);
GLAPI void APIENTRY glBlitFramebuffer (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
GLAPI void APIENTRY glRenderbufferStorageMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
GLAPI void APIENTRY glFramebufferTextureLayer (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
GLAPI void *APIENTRY glMapBufferRange (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
GLAPI void APIENTRY glFlushMappedBufferRange (GLenum target, GLintptr offset, GLsizeiptr length);
GLAPI void APIENTRY glBindVertexArray (GLuint array);
GLAPI void APIENTRY glDeleteVertexArrays (GLsizei n, const GLuint *arrays);
GLAPI void APIENTRY glGenVertexArrays (GLsizei n, GLuint *arrays);
GLAPI GLboolean APIENTRY glIsVertexArray (GLuint array);
#endif
#endif /* GL_VERSION_3_0 */

#ifndef GL_VERSION_3_1
#define GL_VERSION_3_1 1
#define GL_SAMPLER_2D_RECT                0x8B63
#define GL_SAMPLER_2D_RECT_SHADOW         0x8B64
#define GL_SAMPLER_BUFFER                 0x8DC2
#define GL_INT_SAMPLER_2D_RECT            0x8DCD
#define GL_INT_SAMPLER_BUFFER             0x8DD0
#define GL_UNSIGNED_INT_SAMPLER_2D_RECT   0x8DD5
#define GL_UNSIGNED_INT_SAMPLER_BUFFER    0x8DD8
#define GL_TEXTURE_BUFFER                 0x8C2A
#define GL_MAX_TEXTURE_BUFFER_SIZE        0x8C2B
#define GL_TEXTURE_BINDING_BUFFER         0x8C2C
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING 0x8C2D
#define GL_TEXTURE_RECTANGLE              0x84F5
#define GL_TEXTURE_BINDING_RECTANGLE      0x84F6
#define GL_PROXY_TEXTURE_RECTANGLE        0x84F7
#define GL_MAX_RECTANGLE_TEXTURE_SIZE     0x84F8
#define GL_R8_SNORM                       0x8F94
#define GL_RG8_SNORM                      0x8F95
#define GL_RGB8_SNORM                     0x8F96
#define GL_RGBA8_SNORM                    0x8F97
#define GL_R16_SNORM                      0x8F98
#define GL_RG16_SNORM                     0x8F99
#define GL_RGB16_SNORM                    0x8F9A
#define GL_RGBA16_SNORM                   0x8F9B
#define GL_SIGNED_NORMALIZED              0x8F9C
#define GL_PRIMITIVE_RESTART              0x8F9D
#define GL_PRIMITIVE_RESTART_INDEX        0x8F9E
#define GL_COPY_READ_BUFFER               0x8F36
#define GL_COPY_WRITE_BUFFER              0x8F37
#define GL_UNIFORM_BUFFER                 0x8A11
#define GL_UNIFORM_BUFFER_BINDING         0x8A28
#define GL_UNIFORM_BUFFER_START           0x8A29
#define GL_UNIFORM_BUFFER_SIZE            0x8A2A
#define GL_MAX_VERTEX_UNIFORM_BLOCKS      0x8A2B
#define GL_MAX_GEOMETRY_UNIFORM_BLOCKS    0x8A2C
#define GL_MAX_FRAGMENT_UNIFORM_BLOCKS    0x8A2D
#define GL_MAX_COMBINED_UNIFORM_BLOCKS    0x8A2E
#define GL_MAX_UNIFORM_BUFFER_BINDINGS    0x8A2F
#define GL_MAX_UNIFORM_BLOCK_SIZE         0x8A30
#define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0x8A31
#define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS 0x8A32
#define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0x8A33
#define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT 0x8A34
#define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH 0x8A35
#define GL_ACTIVE_UNIFORM_BLOCKS          0x8A36
#define GL_UNIFORM_TYPE                   0x8A37
#define GL_UNIFORM_SIZE                   0x8A38
#define GL_UNIFORM_NAME_LENGTH            0x8A39
#define GL_UNIFORM_BLOCK_INDEX            0x8A3A
#define GL_UNIFORM_OFFSET                 0x8A3B
#define GL_UNIFORM_ARRAY_STRIDE           0x8A3C
#define GL_UNIFORM_MATRIX_STRIDE          0x8A3D
#define GL_UNIFORM_IS_ROW_MAJOR           0x8A3E
#define GL_UNIFORM_BLOCK_BINDING          0x8A3F
#define GL_UNIFORM_BLOCK_DATA_SIZE        0x8A40
#define GL_UNIFORM_BLOCK_NAME_LENGTH      0x8A41
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS  0x8A42
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES 0x8A43
#define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0x8A44
#define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER 0x8A45
#define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0x8A46
#define GL_INVALID_INDEX                  0xFFFFFFFFu
typedef void (APIENTRYP PFNGLDRAWARRAYSINSTANCEDPROC) (GLenum mode, GLint first, GLsizei count, GLsizei instancecount);
typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount);
typedef void (APIENTRYP PFNGLTEXBUFFERPROC) (GLenum target, GLenum internalformat, GLuint buffer);
typedef void (APIENTRYP PFNGLPRIMITIVERESTARTINDEXPROC) (GLuint index);
typedef void (APIENTRYP PFNGLCOPYBUFFERSUBDATAPROC) (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
typedef void (APIENTRYP PFNGLGETUNIFORMINDICESPROC) (GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices);
typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMSIVPROC) (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMNAMEPROC) (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
typedef GLuint (APIENTRYP PFNGLGETUNIFORMBLOCKINDEXPROC) (GLuint program, const GLchar *uniformBlockName);
typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMBLOCKIVPROC) (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC) (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
typedef void (APIENTRYP PFNGLUNIFORMBLOCKBINDINGPROC) (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glDrawArraysInstanced (GLenum mode, GLint first, GLsizei count, GLsizei instancecount);
GLAPI void APIENTRY glDrawElementsInstanced (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount);
GLAPI void APIENTRY glTexBuffer (GLenum target, GLenum internalformat, GLuint buffer);
GLAPI void APIENTRY glPrimitiveRestartIndex (GLuint index);
GLAPI void APIENTRY glCopyBufferSubData (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
GLAPI void APIENTRY glGetUniformIndices (GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices);
GLAPI void APIENTRY glGetActiveUniformsiv (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
GLAPI void APIENTRY glGetActiveUniformName (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
GLAPI GLuint APIENTRY glGetUniformBlockIndex (GLuint program, const GLchar *uniformBlockName);
GLAPI void APIENTRY glGetActiveUniformBlockiv (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
GLAPI void APIENTRY glGetActiveUniformBlockName (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
GLAPI void APIENTRY glUniformBlockBinding (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
#endif
#endif /* GL_VERSION_3_1 */

#ifndef GL_VERSION_3_2
#define GL_VERSION_3_2 1
typedef struct __GLsync *GLsync;
#ifndef GLEXT_64_TYPES_DEFINED
/* This code block is duplicated in glxext.h, so must be protected */
#define GLEXT_64_TYPES_DEFINED
/* Define int32_t, int64_t, and uint64_t types for UST/MSC */
/* (as used in the GL_EXT_timer_query extension). */
#if defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
#include <inttypes.h>
#elif defined(__sun__) || defined(__digital__)
#include <inttypes.h>
#if defined(__STDC__)
#if defined(__arch64__) || defined(_LP64)
typedef long int int64_t;
typedef unsigned long int uint64_t;
#else
typedef long long int int64_t;
typedef unsigned long long int uint64_t;
#endif /* __arch64__ */
#endif /* __STDC__ */
#elif defined( __VMS ) || defined(__sgi)
#include <inttypes.h>
#elif defined(__SCO__) || defined(__USLC__)
#include <stdint.h>
#elif defined(__UNIXOS2__) || defined(__SOL64__)
typedef long int int32_t;
typedef long long int int64_t;
typedef unsigned long long int uint64_t;
#elif defined(_WIN32) && defined(__GNUC__)
#include <stdint.h>
#elif defined(_WIN32)
typedef __int32 int32_t;
typedef __int64 int64_t;
typedef unsigned __int64 uint64_t;
#else
/* Fallback if nothing above works */
#include <inttypes.h>
#endif
#endif
typedef uint64_t GLuint64;
typedef int64_t GLint64;
#define GL_CONTEXT_CORE_PROFILE_BIT       0x00000001
#define GL_CONTEXT_COMPATIBILITY_PROFILE_BIT 0x00000002
#define GL_LINES_ADJACENCY                0x000A
#define GL_LINE_STRIP_ADJACENCY           0x000B
#define GL_TRIANGLES_ADJACENCY            0x000C
#define GL_TRIANGLE_STRIP_ADJACENCY       0x000D
#define GL_PROGRAM_POINT_SIZE             0x8642
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS 0x8C29
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED 0x8DA7
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS 0x8DA8
#define GL_GEOMETRY_SHADER                0x8DD9
#define GL_GEOMETRY_VERTICES_OUT          0x8916
#define GL_GEOMETRY_INPUT_TYPE            0x8917
#define GL_GEOMETRY_OUTPUT_TYPE           0x8918
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS 0x8DDF
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES   0x8DE0
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS 0x8DE1
#define GL_MAX_VERTEX_OUTPUT_COMPONENTS   0x9122
#define GL_MAX_GEOMETRY_INPUT_COMPONENTS  0x9123
#define GL_MAX_GEOMETRY_OUTPUT_COMPONENTS 0x9124
#define GL_MAX_FRAGMENT_INPUT_COMPONENTS  0x9125
#define GL_CONTEXT_PROFILE_MASK           0x9126
#define GL_DEPTH_CLAMP                    0x864F
#define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION 0x8E4C
#define GL_FIRST_VERTEX_CONVENTION        0x8E4D
#define GL_LAST_VERTEX_CONVENTION         0x8E4E
#define GL_PROVOKING_VERTEX               0x8E4F
#define GL_TEXTURE_CUBE_MAP_SEAMLESS      0x884F
#define GL_MAX_SERVER_WAIT_TIMEOUT        0x9111
#define GL_OBJECT_TYPE                    0x9112
#define GL_SYNC_CONDITION                 0x9113
#define GL_SYNC_STATUS                    0x9114
#define GL_SYNC_FLAGS                     0x9115
#define GL_SYNC_FENCE                     0x9116
#define GL_SYNC_GPU_COMMANDS_COMPLETE     0x9117
#define GL_UNSIGNALED                     0x9118
#define GL_SIGNALED                       0x9119
#define GL_ALREADY_SIGNALED               0x911A
#define GL_TIMEOUT_EXPIRED                0x911B
#define GL_CONDITION_SATISFIED            0x911C
#define GL_WAIT_FAILED                    0x911D
#define GL_TIMEOUT_IGNORED                0xFFFFFFFFFFFFFFFFull
#define GL_SYNC_FLUSH_COMMANDS_BIT        0x00000001
#define GL_SAMPLE_POSITION                0x8E50
#define GL_SAMPLE_MASK                    0x8E51
#define GL_SAMPLE_MASK_VALUE              0x8E52
#define GL_MAX_SAMPLE_MASK_WORDS          0x8E59
#define GL_TEXTURE_2D_MULTISAMPLE         0x9100
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE   0x9101
#define GL_TEXTURE_2D_MULTISAMPLE_ARRAY   0x9102
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9103
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE 0x9104
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY 0x9105
#define GL_TEXTURE_SAMPLES                0x9106
#define GL_TEXTURE_FIXED_SAMPLE_LOCATIONS 0x9107
#define GL_SAMPLER_2D_MULTISAMPLE         0x9108
#define GL_INT_SAMPLER_2D_MULTISAMPLE     0x9109
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE 0x910A
#define GL_SAMPLER_2D_MULTISAMPLE_ARRAY   0x910B
#define GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910C
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910D
#define GL_MAX_COLOR_TEXTURE_SAMPLES      0x910E
#define GL_MAX_DEPTH_TEXTURE_SAMPLES      0x910F
#define GL_MAX_INTEGER_SAMPLES            0x9110
typedef void (APIENTRYP PFNGLDRAWELEMENTSBASEVERTEXPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex);
typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex);
typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex);
typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC) (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex);
typedef void (APIENTRYP PFNGLPROVOKINGVERTEXPROC) (GLenum mode);
typedef GLsync (APIENTRYP PFNGLFENCESYNCPROC) (GLenum condition, GLbitfield flags);
typedef GLboolean (APIENTRYP PFNGLISSYNCPROC) (GLsync sync);
typedef void (APIENTRYP PFNGLDELETESYNCPROC) (GLsync sync);
typedef GLenum (APIENTRYP PFNGLCLIENTWAITSYNCPROC) (GLsync sync, GLbitfield flags, GLuint64 timeout);
typedef void (APIENTRYP PFNGLWAITSYNCPROC) (GLsync sync, GLbitfield flags, GLuint64 timeout);
typedef void (APIENTRYP PFNGLGETINTEGER64VPROC) (GLenum pname, GLint64 *data);
typedef void (APIENTRYP PFNGLGETSYNCIVPROC) (GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);
typedef void (APIENTRYP PFNGLGETINTEGER64I_VPROC) (GLenum target, GLuint index, GLint64 *data);
typedef void (APIENTRYP PFNGLGETBUFFERPARAMETERI64VPROC) (GLenum target, GLenum pname, GLint64 *params);
typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTUREPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level);
typedef void (APIENTRYP PFNGLTEXIMAGE2DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
typedef void (APIENTRYP PFNGLTEXIMAGE3DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
typedef void (APIENTRYP PFNGLGETMULTISAMPLEFVPROC) (GLenum pname, GLuint index, GLfloat *val);
typedef void (APIENTRYP PFNGLSAMPLEMASKIPROC) (GLuint maskNumber, GLbitfield mask);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glDrawElementsBaseVertex (GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex);
GLAPI void APIENTRY glDrawRangeElementsBaseVertex (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex);
GLAPI void APIENTRY glDrawElementsInstancedBaseVertex (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex);
GLAPI void APIENTRY glMultiDrawElementsBaseVertex (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex);
GLAPI void APIENTRY glProvokingVertex (GLenum mode);
GLAPI GLsync APIENTRY glFenceSync (GLenum condition, GLbitfield flags);
GLAPI GLboolean APIENTRY glIsSync (GLsync sync);
GLAPI void APIENTRY glDeleteSync (GLsync sync);
GLAPI GLenum APIENTRY glClientWaitSync (GLsync sync, GLbitfield flags, GLuint64 timeout);
GLAPI void APIENTRY glWaitSync (GLsync sync, GLbitfield flags, GLuint64 timeout);
GLAPI void APIENTRY glGetInteger64v (GLenum pname, GLint64 *data);
GLAPI void APIENTRY glGetSynciv (GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);
GLAPI void APIENTRY glGetInteger64i_v (GLenum target, GLuint index, GLint64 *data);
GLAPI void APIENTRY glGetBufferParameteri64v (GLenum target, GLenum pname, GLint64 *params);
GLAPI void APIENTRY glFramebufferTexture (GLenum target, GLenum attachment, GLuint texture, GLint level);
GLAPI void APIENTRY glTexImage2DMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
GLAPI void APIENTRY glTexImage3DMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
GLAPI void APIENTRY glGetMultisamplefv (GLenum pname, GLuint index, GLfloat *val);
GLAPI void APIENTRY glSampleMaski (GLuint maskNumber, GLbitfield mask);
#endif
#endif /* GL_VERSION_3_2 */

#ifndef GL_VERSION_3_3
#define GL_VERSION_3_3 1
#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR    0x88FE
#define GL_SRC1_COLOR                     0x88F9
#define GL_ONE_MINUS_SRC1_COLOR           0x88FA
#define GL_ONE_MINUS_SRC1_ALPHA           0x88FB
#define GL_MAX_DUAL_SOURCE_DRAW_BUFFERS   0x88FC
#define GL_ANY_SAMPLES_PASSED             0x8C2F
#define GL_SAMPLER_BINDING                0x8919
#define GL_RGB10_A2UI                     0x906F
#define GL_TEXTURE_SWIZZLE_R              0x8E42
#define GL_TEXTURE_SWIZZLE_G              0x8E43
#define GL_TEXTURE_SWIZZLE_B              0x8E44
#define GL_TEXTURE_SWIZZLE_A              0x8E45
#define GL_TEXTURE_SWIZZLE_RGBA           0x8E46
#define GL_TIME_ELAPSED                   0x88BF
#define GL_TIMESTAMP                      0x8E28
#define GL_INT_2_10_10_10_REV             0x8D9F
typedef void (APIENTRYP PFNGLBINDFRAGDATALOCATIONINDEXEDPROC) (GLuint program, GLuint colorNumber, GLuint index, const GLchar *name);
typedef GLint (APIENTRYP PFNGLGETFRAGDATAINDEXPROC) (GLuint program, const GLchar *name);
typedef void (APIENTRYP PFNGLGENSAMPLERSPROC) (GLsizei count, GLuint *samplers);
typedef void (APIENTRYP PFNGLDELETESAMPLERSPROC) (GLsizei count, const GLuint *samplers);
typedef GLboolean (APIENTRYP PFNGLISSAMPLERPROC) (GLuint sampler);
typedef void (APIENTRYP PFNGLBINDSAMPLERPROC) (GLuint unit, GLuint sampler);
typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIPROC) (GLuint sampler, GLenum pname, GLint param);
typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIVPROC) (GLuint sampler, GLenum pname, const GLint *param);
typedef void (APIENTRYP PFNGLSAMPLERPARAMETERFPROC) (GLuint sampler, GLenum pname, GLfloat param);
typedef void (APIENTRYP PFNGLSAMPLERPARAMETERFVPROC) (GLuint sampler, GLenum pname, const GLfloat *param);
typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIIVPROC) (GLuint sampler, GLenum pname, const GLint *param);
typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIUIVPROC) (GLuint sampler, GLenum pname, const GLuint *param);
typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERIVPROC) (GLuint sampler, GLenum pname, GLint *params);
typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERIIVPROC) (GLuint sampler, GLenum pname, GLint *params);
typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERFVPROC) (GLuint sampler, GLenum pname, GLfloat *params);
typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERIUIVPROC) (GLuint sampler, GLenum pname, GLuint *params);
typedef void (APIENTRYP PFNGLQUERYCOUNTERPROC) (GLuint id, GLenum target);
typedef void (APIENTRYP PFNGLGETQUERYOBJECTI64VPROC) (GLuint id, GLenum pname, GLint64 *params);
typedef void (APIENTRYP PFNGLGETQUERYOBJECTUI64VPROC) (GLuint id, GLenum pname, GLuint64 *params);
typedef void (APIENTRYP PFNGLVERTEXATTRIBDIVISORPROC) (GLuint index, GLuint divisor);
typedef void (APIENTRYP PFNGLVERTEXATTRIBP1UIPROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void (APIENTRYP PFNGLVERTEXATTRIBP1UIVPROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
typedef void (APIENTRYP PFNGLVERTEXATTRIBP2UIPROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void (APIENTRYP PFNGLVERTEXATTRIBP2UIVPROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
typedef void (APIENTRYP PFNGLVERTEXATTRIBP3UIPROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void (APIENTRYP PFNGLVERTEXATTRIBP3UIVPROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
typedef void (APIENTRYP PFNGLVERTEXATTRIBP4UIPROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void (APIENTRYP PFNGLVERTEXATTRIBP4UIVPROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glBindFragDataLocationIndexed (GLuint program, GLuint colorNumber, GLuint index, const GLchar *name);
GLAPI GLint APIENTRY glGetFragDataIndex (GLuint program, const GLchar *name);
GLAPI void APIENTRY glGenSamplers (GLsizei count, GLuint *samplers);
GLAPI void APIENTRY glDeleteSamplers (GLsizei count, const GLuint *samplers);
GLAPI GLboolean APIENTRY glIsSampler (GLuint sampler);
GLAPI void APIENTRY glBindSampler (GLuint unit, GLuint sampler);
GLAPI void APIENTRY glSamplerParameteri (GLuint sampler, GLenum pname, GLint param);
GLAPI void APIENTRY glSamplerParameteriv (GLuint sampler, GLenum pname, const GLint *param);
GLAPI void APIENTRY glSamplerParameterf (GLuint sampler, GLenum pname, GLfloat param);
GLAPI void APIENTRY glSamplerParameterfv (GLuint sampler, GLenum pname, const GLfloat *param);
GLAPI void APIENTRY glSamplerParameterIiv (GLuint sampler, GLenum pname, const GLint *param);
GLAPI void APIENTRY glSamplerParameterIuiv (GLuint sampler, GLenum pname, const GLuint *param);
GLAPI void APIENTRY glGetSamplerParameteriv (GLuint sampler, GLenum pname, GLint *params);
GLAPI void APIENTRY glGetSamplerParameterIiv (GLuint sampler, GLenum pname, GLint *params);
GLAPI void APIENTRY glGetSamplerParameterfv (GLuint sampler, GLenum pname, GLfloat *params);
GLAPI void APIENTRY glGetSamplerParameterIuiv (GLuint sampler, GLenum pname, GLuint *params);
GLAPI void APIENTRY glQueryCounter (GLuint id, GLenum target);
GLAPI void APIENTRY glGetQueryObjecti64v (GLuint id, GLenum pname, GLint64 *params);
GLAPI void APIENTRY glGetQueryObjectui64v (GLuint id, GLenum pname, GLuint64 *params);
GLAPI void APIENTRY glVertexAttribDivisor (GLuint index, GLuint divisor);
GLAPI void APIENTRY glVertexAttribP1ui (GLuint index, GLenum type, GLboolean normalized, GLuint value);
GLAPI void APIENTRY glVertexAttribP1uiv (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
GLAPI void APIENTRY glVertexAttribP2ui (GLuint index, GLenum type, GLboolean normalized, GLuint value);
GLAPI void APIENTRY glVertexAttribP2uiv (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
GLAPI void APIENTRY glVertexAttribP3ui (GLuint index, GLenum type, GLboolean normalized, GLuint value);
GLAPI void APIENTRY glVertexAttribP3uiv (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
GLAPI void APIENTRY glVertexAttribP4ui (GLuint index, GLenum type, GLboolean normalized, GLuint value);
GLAPI void APIENTRY glVertexAttribP4uiv (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
#endif
#endif /* GL_VERSION_3_3 */

#ifndef GL_VERSION_4_0
#define GL_VERSION_4_0 1
#define GL_SAMPLE_SHADING                 0x8C36
#define GL_MIN_SAMPLE_SHADING_VALUE       0x8C37
#define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5E
#define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5F
#define GL_TEXTURE_CUBE_MAP_ARRAY         0x9009
#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY 0x900A
#define GL_PROXY_TEXTURE_CUBE_MAP_ARRAY   0x900B
#define GL_SAMPLER_CUBE_MAP_ARRAY         0x900C
#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW  0x900D
#define GL_INT_SAMPLER_CUBE_MAP_ARRAY     0x900E
#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY 0x900F
#define GL_DRAW_INDIRECT_BUFFER           0x8F3F
#define GL_DRAW_INDIRECT_BUFFER_BINDING   0x8F43
#define GL_GEOMETRY_SHADER_INVOCATIONS    0x887F
#define GL_MAX_GEOMETRY_SHADER_INVOCATIONS 0x8E5A
#define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET 0x8E5B
#define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET 0x8E5C
#define GL_FRAGMENT_INTERPOLATION_OFFSET_BITS 0x8E5D
#define GL_MAX_VERTEX_STREAMS             0x8E71
#define GL_DOUBLE_VEC2                    0x8FFC
#define GL_DOUBLE_VEC3                    0x8FFD
#define GL_DOUBLE_VEC4                    0x8FFE
#define GL_DOUBLE_MAT2                    0x8F46
#define GL_DOUBLE_MAT3                    0x8F47
#define GL_DOUBLE_MAT4                    0x8F48
#define GL_DOUBLE_MAT2x3                  0x8F49
#define GL_DOUBLE_MAT2x4                  0x8F4A
#define GL_DOUBLE_MAT3x2                  0x8F4B
#define GL_DOUBLE_MAT3x4                  0x8F4C
#define GL_DOUBLE_MAT4x2                  0x8F4D
#define GL_DOUBLE_MAT4x3                  0x8F4E
#define GL_ACTIVE_SUBROUTINES             0x8DE5
#define GL_ACTIVE_SUBROUTINE_UNIFORMS     0x8DE6
#define GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS 0x8E47
#define GL_ACTIVE_SUBROUTINE_MAX_LENGTH   0x8E48
#define GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH 0x8E49
#define GL_MAX_SUBROUTINES                0x8DE7
#define GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS 0x8DE8
#define GL_NUM_COMPATIBLE_SUBROUTINES     0x8E4A
#define GL_COMPATIBLE_SUBROUTINES         0x8E4B
#define GL_PATCHES                        0x000E
#define GL_PATCH_VERTICES                 0x8E72
#define GL_PATCH_DEFAULT_INNER_LEVEL      0x8E73
#define GL_PATCH_DEFAULT_OUTER_LEVEL      0x8E74
#define GL_TESS_CONTROL_OUTPUT_VERTICES   0x8E75
#define GL_TESS_GEN_MODE                  0x8E76
#define GL_TESS_GEN_SPACING               0x8E77
#define GL_TESS_GEN_VERTEX_ORDER          0x8E78
#define GL_TESS_GEN_POINT_MODE            0x8E79
#define GL_ISOLINES                       0x8E7A
#define GL_FRACTIONAL_ODD                 0x8E7B
#define GL_FRACTIONAL_EVEN                0x8E7C
#define GL_MAX_PATCH_VERTICES             0x8E7D
#define GL_MAX_TESS_GEN_LEVEL             0x8E7E
#define GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E7F
#define GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E80
#define GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS 0x8E81
#define GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS 0x8E82
#define GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS 0x8E83
#define GL_MAX_TESS_PATCH_COMPONENTS      0x8E84
#define GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS 0x8E85
#define GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS 0x8E86
#define GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS 0x8E89
#define GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS 0x8E8A
#define GL_MAX_TESS_CONTROL_INPUT_COMPONENTS 0x886C
#define GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS 0x886D
#define GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E1E
#define GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E1F
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER 0x84F0
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER 0x84F1
#define GL_TESS_EVALUATION_SHADER         0x8E87
#define GL_TESS_CONTROL_SHADER            0x8E88
#define GL_TRANSFORM_FEEDBACK             0x8E22
#define GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED 0x8E23
#define GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE 0x8E24
#define GL_TRANSFORM_FEEDBACK_BINDING     0x8E25
#define GL_MAX_TRANSFORM_FEEDBACK_BUFFERS 0x8E70
typedef void (APIENTRYP PFNGLMINSAMPLESHADINGPROC) (GLfloat value);
typedef void (APIENTRYP PFNGLBLENDEQUATIONIPROC) (GLuint buf, GLenum mode);
typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEIPROC) (GLuint buf, GLenum modeRGB, GLenum modeAlpha);
typedef void (APIENTRYP PFNGLBLENDFUNCIPROC) (GLuint buf, GLenum src, GLenum dst);
typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEIPROC) (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
typedef void (APIENTRYP PFNGLDRAWARRAYSINDIRECTPROC) (GLenum mode, const void *indirect);
typedef void (APIENTRYP PFNGLDRAWELEMENTSINDIRECTPROC) (GLenum mode, GLenum type, const void *indirect);
typedef void (APIENTRYP PFNGLUNIFORM1DPROC) (GLint location, GLdouble x);
typedef void (APIENTRYP PFNGLUNIFORM2DPROC) (GLint location, GLdouble x, GLdouble y);
typedef void (APIENTRYP PFNGLUNIFORM3DPROC) (GLint location, GLdouble x, GLdouble y, GLdouble z);
typedef void (APIENTRYP PFNGLUNIFORM4DPROC) (GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (APIENTRYP PFNGLUNIFORM1DVPROC) (GLint location, GLsizei count, const GLdouble *value);
typedef void (APIENTRYP PFNGLUNIFORM2DVPROC) (GLint location, GLsizei count, const GLdouble *value);
typedef void (APIENTRYP PFNGLUNIFORM3DVPROC) (GLint location, GLsizei count, const GLdouble *value);
typedef void (APIENTRYP PFNGLUNIFORM4DVPROC) (GLint location, GLsizei count, const GLdouble *value);
typedef void (APIENTRYP PFNGLUNIFORMMATRIX2DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRYP PFNGLUNIFORMMATRIX3DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRYP PFNGLUNIFORMMATRIX4DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X3DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X4DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X2DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X4DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X2DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X3DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRYP PFNGLGETUNIFORMDVPROC) (GLuint program, GLint location, GLdouble *params);
typedef GLint (APIENTRYP PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC) (GLuint program, GLenum shadertype, const GLchar *name);
typedef GLuint (APIENTRYP PFNGLGETSUBROUTINEINDEXPROC) (GLuint program, GLenum shadertype, const GLchar *name);
typedef void (APIENTRYP PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC) (GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values);
typedef void (APIENTRYP PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC) (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);
typedef void (APIENTRYP PFNGLGETACTIVESUBROUTINENAMEPROC) (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);
typedef void (APIENTRYP PFNGLUNIFORMSUBROUTINESUIVPROC) (GLenum shadertype, GLsizei count, const GLuint *indices);
typedef void (APIENTRYP PFNGLGETUNIFORMSUBROUTINEUIVPROC) (GLenum shadertype, GLint location, GLuint *params);
typedef void (APIENTRYP PFNGLGETPROGRAMSTAGEIVPROC) (GLuint program, GLenum shadertype, GLenum pname, GLint *values);
typedef void (APIENTRYP PFNGLPATCHPARAMETERIPROC) (GLenum pname, GLint value);
typedef void (APIENTRYP PFNGLPATCHPARAMETERFVPROC) (GLenum pname, const GLfloat *values);
typedef void (APIENTRYP PFNGLBINDTRANSFORMFEEDBACKPROC) (GLenum target, GLuint id);
typedef void (APIENTRYP PFNGLDELETETRANSFORMFEEDBACKSPROC) (GLsizei n, const GLuint *ids);
typedef void (APIENTRYP PFNGLGENTRANSFORMFEEDBACKSPROC) (GLsizei n, GLuint *ids);
typedef GLboolean (APIENTRYP PFNGLISTRANSFORMFEEDBACKPROC) (GLuint id);
typedef void (APIENTRYP PFNGLPAUSETRANSFORMFEEDBACKPROC) (void);
typedef void (APIENTRYP PFNGLRESUMETRANSFORMFEEDBACKPROC) (void);
typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKPROC) (GLenum mode, GLuint id);
typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC) (GLenum mode, GLuint id, GLuint stream);
typedef void (APIENTRYP PFNGLBEGINQUERYINDEXEDPROC) (GLenum target, GLuint index, GLuint id);
typedef void (APIENTRYP PFNGLENDQUERYINDEXEDPROC) (GLenum target, GLuint index);
typedef void (APIENTRYP PFNGLGETQUERYINDEXEDIVPROC) (GLenum target, GLuint index, GLenum pname, GLint *params);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glMinSampleShading (GLfloat value);
GLAPI void APIENTRY glBlendEquationi (GLuint buf, GLenum mode);
GLAPI void APIENTRY glBlendEquationSeparatei (GLuint buf, GLenum modeRGB, GLenum modeAlpha);
GLAPI void APIENTRY glBlendFunci (GLuint buf, GLenum src, GLenum dst);
GLAPI void APIENTRY glBlendFuncSeparatei (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
GLAPI void APIENTRY glDrawArraysIndirect (GLenum mode, const void *indirect);
GLAPI void APIENTRY glDrawElementsIndirect (GLenum mode, GLenum type, const void *indirect);
GLAPI void APIENTRY glUniform1d (GLint location, GLdouble x);
GLAPI void APIENTRY glUniform2d (GLint location, GLdouble x, GLdouble y);
GLAPI void APIENTRY glUniform3d (GLint location, GLdouble x, GLdouble y, GLdouble z);
GLAPI void APIENTRY glUniform4d (GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
GLAPI void APIENTRY glUniform1dv (GLint location, GLsizei count, const GLdouble *value);
GLAPI void APIENTRY glUniform2dv (GLint location, GLsizei count, const GLdouble *value);
GLAPI void APIENTRY glUniform3dv (GLint location, GLsizei count, const GLdouble *value);
GLAPI void APIENTRY glUniform4dv (GLint location, GLsizei count, const GLdouble *value);
GLAPI void APIENTRY glUniformMatrix2dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI void APIENTRY glUniformMatrix3dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI void APIENTRY glUniformMatrix4dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI void APIENTRY glUniformMatrix2x3dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI void APIENTRY glUniformMatrix2x4dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI void APIENTRY glUniformMatrix3x2dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI void APIENTRY glUniformMatrix3x4dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI void APIENTRY glUniformMatrix4x2dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI void APIENTRY glUniformMatrix4x3dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI void APIENTRY glGetUniformdv (GLuint program, GLint location, GLdouble *params);
GLAPI GLint APIENTRY glGetSubroutineUniformLocation (GLuint program, GLenum shadertype, const GLchar *name);
GLAPI GLuint APIENTRY glGetSubroutineIndex (GLuint program, GLenum shadertype, const GLchar *name);
GLAPI void APIENTRY glGetActiveSubroutineUniformiv (GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values);
GLAPI void APIENTRY glGetActiveSubroutineUniformName (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);
GLAPI void APIENTRY glGetActiveSubroutineName (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);
GLAPI void APIENTRY glUniformSubroutinesuiv (GLenum shadertype, GLsizei count, const GLuint *indices);
GLAPI void APIENTRY glGetUniformSubroutineuiv (GLenum shadertype, GLint location, GLuint *params);
GLAPI void APIENTRY glGetProgramStageiv (GLuint program, GLenum shadertype, GLenum pname, GLint *values);
GLAPI void APIENTRY glPatchParameteri (GLenum pname, GLint value);
GLAPI void APIENTRY glPatchParameterfv (GLenum pname, const GLfloat *values);
GLAPI void APIENTRY glBindTransformFeedback (GLenum target, GLuint id);
GLAPI void APIENTRY glDeleteTransformFeedbacks (GLsizei n, const GLuint *ids);
GLAPI void APIENTRY glGenTransformFeedbacks (GLsizei n, GLuint *ids);
GLAPI GLboolean APIENTRY glIsTransformFeedback (GLuint id);
GLAPI void APIENTRY glPauseTransformFeedback (void);
GLAPI void APIENTRY glResumeTransformFeedback (void);
GLAPI void APIENTRY glDrawTransformFeedback (GLenum mode, GLuint id);
GLAPI void APIENTRY glDrawTransformFeedbackStream (GLenum mode, GLuint id, GLuint stream);
GLAPI void APIENTRY glBeginQueryIndexed (GLenum target, GLuint index, GLuint id);
GLAPI void APIENTRY glEndQueryIndexed (GLenum target, GLuint index);
GLAPI void APIENTRY glGetQueryIndexediv (GLenum target, GLuint index, GLenum pname, GLint *params);
#endif
#endif /* GL_VERSION_4_0 */

#ifndef GL_VERSION_4_1
#define GL_VERSION_4_1 1
#define GL_FIXED                          0x140C
#define GL_IMPLEMENTATION_COLOR_READ_TYPE 0x8B9A
#define GL_IMPLEMENTATION_COLOR_READ_FORMAT 0x8B9B
#define GL_LOW_FLOAT                      0x8DF0
#define GL_MEDIUM_FLOAT                   0x8DF1
#define GL_HIGH_FLOAT                     0x8DF2
#define GL_LOW_INT                        0x8DF3
#define GL_MEDIUM_INT                     0x8DF4
#define GL_HIGH_INT                       0x8DF5
#define GL_SHADER_COMPILER                0x8DFA
#define GL_SHADER_BINARY_FORMATS          0x8DF8
#define GL_NUM_SHADER_BINARY_FORMATS      0x8DF9
#define GL_MAX_VERTEX_UNIFORM_VECTORS     0x8DFB
#define GL_MAX_VARYING_VECTORS            0x8DFC
#define GL_MAX_FRAGMENT_UNIFORM_VECTORS   0x8DFD
#define GL_RGB565                         0x8D62
#define GL_PROGRAM_BINARY_RETRIEVABLE_HINT 0x8257
#define GL_PROGRAM_BINARY_LENGTH          0x8741
#define GL_NUM_PROGRAM_BINARY_FORMATS     0x87FE
#define GL_PROGRAM_BINARY_FORMATS         0x87FF
#define GL_VERTEX_SHADER_BIT              0x00000001
#define GL_FRAGMENT_SHADER_BIT            0x00000002
#define GL_GEOMETRY_SHADER_BIT            0x00000004
#define GL_TESS_CONTROL_SHADER_BIT        0x00000008
#define GL_TESS_EVALUATION_SHADER_BIT     0x00000010
#define GL_ALL_SHADER_BITS                0xFFFFFFFF
#define GL_PROGRAM_SEPARABLE              0x8258
#define GL_ACTIVE_PROGRAM                 0x8259
#define GL_PROGRAM_PIPELINE_BINDING       0x825A
#define GL_MAX_VIEWPORTS                  0x825B
#define GL_VIEWPORT_SUBPIXEL_BITS         0x825C
#define GL_VIEWPORT_BOUNDS_RANGE          0x825D
#define GL_LAYER_PROVOKING_VERTEX         0x825E
#define GL_VIEWPORT_INDEX_PROVOKING_VERTEX 0x825F
#define GL_UNDEFINED_VERTEX               0x8260
typedef void (APIENTRYP PFNGLRELEASESHADERCOMPILERPROC) (void);
typedef void (APIENTRYP PFNGLSHADERBINARYPROC) (GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length);
typedef void (APIENTRYP PFNGLGETSHADERPRECISIONFORMATPROC) (GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision);
typedef void (APIENTRYP PFNGLDEPTHRANGEFPROC) (GLfloat n, GLfloat f);
typedef void (APIENTRYP PFNGLCLEARDEPTHFPROC) (GLfloat d);
typedef void (APIENTRYP PFNGLGETPROGRAMBINARYPROC) (GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary);
typedef void (APIENTRYP PFNGLPROGRAMBINARYPROC) (GLuint program, GLenum binaryFormat, const void *binary, GLsizei length);
typedef void (APIENTRYP PFNGLPROGRAMPARAMETERIPROC) (GLuint program, GLenum pname, GLint value);
typedef void (APIENTRYP PFNGLUSEPROGRAMSTAGESPROC) (GLuint pipeline, GLbitfield stages, GLuint program);
typedef void (APIENTRYP PFNGLACTIVESHADERPROGRAMPROC) (GLuint pipeline, GLuint program);
typedef GLuint (APIENTRYP PFNGLCREATESHADERPROGRAMVPROC) (GLenum type, GLsizei count, const GLchar *const*strings);
typedef void (APIENTRYP PFNGLBINDPROGRAMPIPELINEPROC) (GLuint pipeline);
typedef void (APIENTRYP PFNGLDELETEPROGRAMPIPELINESPROC) (GLsizei n, const GLuint *pipelines);
typedef void (APIENTRYP PFNGLGENPROGRAMPIPELINESPROC) (GLsizei n, GLuint *pipelines);
typedef GLboolean (APIENTRYP PFNGLISPROGRAMPIPELINEPROC) (GLuint pipeline);
typedef void (APIENTRYP PFNGLGETPROGRAMPIPELINEIVPROC) (GLuint pipeline, GLenum pname, GLint *params);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1IPROC) (GLuint program, GLint location, GLint v0);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1IVPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1FPROC) (GLuint program, GLint location, GLfloat v0);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1FVPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1DPROC) (GLuint program, GLint location, GLdouble v0);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1DVPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UIPROC) (GLuint program, GLint location, GLuint v0);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UIVPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2IPROC) (GLuint program, GLint location, GLint v0, GLint v1);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2IVPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2FPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2FVPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2DPROC) (GLuint program, GLint location, GLdouble v0, GLdouble v1);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2DVPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UIPROC) (GLuint program, GLint location, GLuint v0, GLuint v1);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UIVPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3IPROC) (GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3IVPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3FPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3FVPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3DPROC) (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3DVPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UIPROC) (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UIVPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4IPROC) (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4IVPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4FPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4FVPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4DPROC) (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4DVPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UIPROC) (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UIVPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRYP PFNGLVALIDATEPROGRAMPIPELINEPROC) (GLuint pipeline);
typedef void (APIENTRYP PFNGLGETPROGRAMPIPELINEINFOLOGPROC) (GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
typedef void (APIENTRYP PFNGLVERTEXATTRIBL1DPROC) (GLuint index, GLdouble x);
typedef void (APIENTRYP PFNGLVERTEXATTRIBL2DPROC) (GLuint index, GLdouble x, GLdouble y);
typedef void (APIENTRYP PFNGLVERTEXATTRIBL3DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void (APIENTRYP PFNGLVERTEXATTRIBL4DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (APIENTRYP PFNGLVERTEXATTRIBL1DVPROC) (GLuint index, const GLdouble *v);
typedef void (APIENTRYP PFNGLVERTEXATTRIBL2DVPROC) (GLuint index, const GLdouble *v);
typedef void (APIENTRYP PFNGLVERTEXATTRIBL3DVPROC) (GLuint index, const GLdouble *v);
typedef void (APIENTRYP PFNGLVERTEXATTRIBL4DVPROC) (GLuint index, const GLdouble *v);
typedef void (APIENTRYP PFNGLVERTEXATTRIBLPOINTERPROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
typedef void (APIENTRYP PFNGLGETVERTEXATTRIBLDVPROC) (GLuint index, GLenum pname, GLdouble *params);
typedef void (APIENTRYP PFNGLVIEWPORTARRAYVPROC) (GLuint first, GLsizei count, const GLfloat *v);
typedef void (APIENTRYP PFNGLVIEWPORTINDEXEDFPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
typedef void (APIENTRYP PFNGLVIEWPORTINDEXEDFVPROC) (GLuint index, const GLfloat *v);
typedef void (APIENTRYP PFNGLSCISSORARRAYVPROC) (GLuint first, GLsizei count, const GLint *v);
typedef void (APIENTRYP PFNGLSCISSORINDEXEDPROC) (GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
typedef void (APIENTRYP PFNGLSCISSORINDEXEDVPROC) (GLuint index, const GLint *v);
typedef void (APIENTRYP PFNGLDEPTHRANGEARRAYVPROC) (GLuint first, GLsizei count, const GLdouble *v);
typedef void (APIENTRYP PFNGLDEPTHRANGEINDEXEDPROC) (GLuint index, GLdouble n, GLdouble f);
typedef void (APIENTRYP PFNGLGETFLOATI_VPROC) (GLenum target, GLuint index, GLfloat *data);
typedef void (APIENTRYP PFNGLGETDOUBLEI_VPROC) (GLenum target, GLuint index, GLdouble *data);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glReleaseShaderCompiler (void);
GLAPI void APIENTRY glShaderBinary (GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length);
GLAPI void APIENTRY glGetShaderPrecisionFormat (GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision);
GLAPI void APIENTRY glDepthRangef (GLfloat n, GLfloat f);
GLAPI void APIENTRY glClearDepthf (GLfloat d);
GLAPI void APIENTRY glGetProgramBinary (GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary);
GLAPI void APIENTRY glProgramBinary (GLuint program, GLenum binaryFormat, const void *binary, GLsizei length);
GLAPI void APIENTRY glProgramParameteri (GLuint program, GLenum pname, GLint value);
GLAPI void APIENTRY glUseProgramStages (GLuint pipeline, GLbitfield stages, GLuint program);
GLAPI void APIENTRY glActiveShaderProgram (GLuint pipeline, GLuint program);
GLAPI GLuint APIENTRY glCreateShaderProgramv (GLenum type, GLsizei count, const GLchar *const*strings);
GLAPI void APIENTRY glBindProgramPipeline (GLuint pipeline);
GLAPI void APIENTRY glDeleteProgramPipelines (GLsizei n, const GLuint *pipelines);
GLAPI void APIENTRY glGenProgramPipelines (GLsizei n, GLuint *pipelines);
GLAPI GLboolean APIENTRY glIsProgramPipeline (GLuint pipeline);
GLAPI void APIENTRY glGetProgramPipelineiv (GLuint pipeline, GLenum pname, GLint *params);
GLAPI void APIENTRY glProgramUniform1i (GLuint program, GLint location, GLint v0);
GLAPI void APIENTRY glProgramUniform1iv (GLuint program, GLint location, GLsizei count, const GLint *value);
GLAPI void APIENTRY glProgramUniform1f (GLuint program, GLint location, GLfloat v0);
GLAPI void APIENTRY glProgramUniform1fv (GLuint program, GLint location, GLsizei count, const GLfloat *value);
GLAPI void APIENTRY glProgramUniform1d (GLuint program, GLint location, GLdouble v0);
GLAPI void APIENTRY glProgramUniform1dv (GLuint program, GLint location, GLsizei count, const GLdouble *value);
GLAPI void APIENTRY glProgramUniform1ui (GLuint program, GLint location, GLuint v0);
GLAPI void APIENTRY glProgramUniform1uiv (GLuint program, GLint location, GLsizei count, const GLuint *value);
GLAPI void APIENTRY glProgramUniform2i (GLuint program, GLint location, GLint v0, GLint v1);
GLAPI void APIENTRY glProgramUniform2iv (GLuint program, GLint location, GLsizei count, const GLint *value);
GLAPI void APIENTRY glProgramUniform2f (GLuint program, GLint location, GLfloat v0, GLfloat v1);
GLAPI void APIENTRY glProgramUniform2fv (GLuint program, GLint location, GLsizei count, const GLfloat *value);
GLAPI void APIENTRY glProgramUniform2d (GLuint program, GLint location, GLdouble v0, GLdouble v1);
GLAPI void APIENTRY glProgramUniform2dv (GLuint program, GLint location, GLsizei count, const GLdouble *value);
GLAPI void APIENTRY glProgramUniform2ui (GLuint program, GLint location, GLuint v0, GLuint v1);
GLAPI void APIENTRY glProgramUniform2uiv (GLuint program, GLint location, GLsizei count, const GLuint *value);
GLAPI void APIENTRY glProgramUniform3i (GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
GLAPI void APIENTRY glProgramUniform3iv (GLuint program, GLint location, GLsizei count, const GLint *value);
GLAPI void APIENTRY glProgramUniform3f (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
GLAPI void APIENTRY glProgramUniform3fv (GLuint program, GLint location, GLsizei count, const GLfloat *value);
GLAPI void APIENTRY glProgramUniform3d (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);
GLAPI void APIENTRY glProgramUniform3dv (GLuint program, GLint location, GLsizei count, const GLdouble *value);
GLAPI void APIENTRY glProgramUniform3ui (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
GLAPI void APIENTRY glProgramUniform3uiv (GLuint program, GLint location, GLsizei count, const GLuint *value);
GLAPI void APIENTRY glProgramUniform4i (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
GLAPI void APIENTRY glProgramUniform4iv (GLuint program, GLint location, GLsizei count, const GLint *value);
GLAPI void APIENTRY glProgramUniform4f (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
GLAPI void APIENTRY glProgramUniform4fv (GLuint program, GLint location, GLsizei count, const GLfloat *value);
GLAPI void APIENTRY glProgramUniform4d (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
GLAPI void APIENTRY glProgramUniform4dv (GLuint program, GLint location, GLsizei count, const GLdouble *value);
GLAPI void APIENTRY glProgramUniform4ui (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
GLAPI void APIENTRY glProgramUniform4uiv (GLuint program, GLint location, GLsizei count, const GLuint *value);
GLAPI void APIENTRY glProgramUniformMatrix2fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI void APIENTRY glProgramUniformMatrix3fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI void APIENTRY glProgramUniformMatrix4fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI void APIENTRY glProgramUniformMatrix2dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI void APIENTRY glProgramUniformMatrix3dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI void APIENTRY glProgramUniformMatrix4dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI void APIENTRY glProgramUniformMatrix2x3fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI void APIENTRY glProgramUniformMatrix3x2fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI void APIENTRY glProgramUniformMatrix2x4fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI void APIENTRY glProgramUniformMatrix4x2fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI void APIENTRY glProgramUniformMatrix3x4fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI void APIENTRY glProgramUniformMatrix4x3fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI void APIENTRY glProgramUniformMatrix2x3dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI void APIENTRY glProgramUniformMatrix3x2dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI void APIENTRY glProgramUniformMatrix2x4dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI void APIENTRY glProgramUniformMatrix4x2dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI void APIENTRY glProgramUniformMatrix3x4dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI void APIENTRY glProgramUniformMatrix4x3dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI void APIENTRY glValidateProgramPipeline (GLuint pipeline);
GLAPI void APIENTRY glGetProgramPipelineInfoLog (GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
GLAPI void APIENTRY glVertexAttribL1d (GLuint index, GLdouble x);
GLAPI void APIENTRY glVertexAttribL2d (GLuint index, GLdouble x, GLdouble y);
GLAPI void APIENTRY glVertexAttribL3d (GLuint index, GLdouble x, GLdouble y, GLdouble z);
GLAPI void APIENTRY glVertexAttribL4d (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
GLAPI void APIENTRY glVertexAttribL1dv (GLuint index, const GLdouble *v);
GLAPI void APIENTRY glVertexAttribL2dv (GLuint index, const GLdouble *v);
GLAPI void APIENTRY glVertexAttribL3dv (GLuint index, const GLdouble *v);
GLAPI void APIENTRY glVertexAttribL4dv (GLuint index, const GLdouble *v);
GLAPI void APIENTRY glVertexAttribLPointer (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
GLAPI void APIENTRY glGetVertexAttribLdv (GLuint index, GLenum pname, GLdouble *params);
GLAPI void APIENTRY glViewportArrayv (GLuint first, GLsizei count, const GLfloat *v);
GLAPI void APIENTRY glViewportIndexedf (GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
GLAPI void APIENTRY glViewportIndexedfv (GLuint index, const GLfloat *v);
GLAPI void APIENTRY glScissorArrayv (GLuint first, GLsizei count, const GLint *v);
GLAPI void APIENTRY glScissorIndexed (GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
GLAPI void APIENTRY glScissorIndexedv (GLuint index, const GLint *v);
GLAPI void APIENTRY glDepthRangeArrayv (GLuint first, GLsizei count, const GLdouble *v);
GLAPI void APIENTRY glDepthRangeIndexed (GLuint index, GLdouble n, GLdouble f);
GLAPI void APIENTRY glGetFloati_v (GLenum target, GLuint index, GLfloat *data);
GLAPI void APIENTRY glGetDoublei_v (GLenum target, GLuint index, GLdouble *data);
#endif
#endif /* GL_VERSION_4_1 */

#ifndef GL_VERSION_4_2
#define GL_VERSION_4_2 1
#define GL_COPY_READ_BUFFER_BINDING       0x8F36
#define GL_COPY_WRITE_BUFFER_BINDING      0x8F37
#define GL_TRANSFORM_FEEDBACK_ACTIVE      0x8E24
#define GL_TRANSFORM_FEEDBACK_PAUSED      0x8E23
#define GL_UNPACK_COMPRESSED_BLOCK_WIDTH  0x9127
#define GL_UNPACK_COMPRESSED_BLOCK_HEIGHT 0x9128
#define GL_UNPACK_COMPRESSED_BLOCK_DEPTH  0x9129
#define GL_UNPACK_COMPRESSED_BLOCK_SIZE   0x912A
#define GL_PACK_COMPRESSED_BLOCK_WIDTH    0x912B
#define GL_PACK_COMPRESSED_BLOCK_HEIGHT   0x912C
#define GL_PACK_COMPRESSED_BLOCK_DEPTH    0x912D
#define GL_PACK_COMPRESSED_BLOCK_SIZE     0x912E
#define GL_NUM_SAMPLE_COUNTS              0x9380
#define GL_MIN_MAP_BUFFER_ALIGNMENT       0x90BC
#define GL_ATOMIC_COUNTER_BUFFER          0x92C0
#define GL_ATOMIC_COUNTER_BUFFER_BINDING  0x92C1
#define GL_ATOMIC_COUNTER_BUFFER_START    0x92C2
#define GL_ATOMIC_COUNTER_BUFFER_SIZE     0x92C3
#define GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE 0x92C4
#define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS 0x92C5
#define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES 0x92C6
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER 0x92C7
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER 0x92C8
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER 0x92C9
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER 0x92CA
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER 0x92CB
#define GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS 0x92CC
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS 0x92CD
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS 0x92CE
#define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS 0x92CF
#define GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS 0x92D0
#define GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS 0x92D1
#define GL_MAX_VERTEX_ATOMIC_COUNTERS     0x92D2
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS 0x92D3
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS 0x92D4
#define GL_MAX_GEOMETRY_ATOMIC_COUNTERS   0x92D5
#define GL_MAX_FRAGMENT_ATOMIC_COUNTERS   0x92D6
#define GL_MAX_COMBINED_ATOMIC_COUNTERS   0x92D7
#define GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE 0x92D8
#define GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS 0x92DC
#define GL_ACTIVE_ATOMIC_COUNTER_BUFFERS  0x92D9
#define GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX 0x92DA
#define GL_UNSIGNED_INT_ATOMIC_COUNTER    0x92DB
#define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT 0x00000001
#define GL_ELEMENT_ARRAY_BARRIER_BIT      0x00000002
#define GL_UNIFORM_BARRIER_BIT            0x00000004
#define GL_TEXTURE_FETCH_BARRIER_BIT      0x00000008
#define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT 0x00000020
#define GL_COMMAND_BARRIER_BIT            0x00000040
#define GL_PIXEL_BUFFER_BARRIER_BIT       0x00000080
#define GL_TEXTURE_UPDATE_BARRIER_BIT     0x00000100
#define GL_BUFFER_UPDATE_BARRIER_BIT      0x00000200
#define GL_FRAMEBUFFER_BARRIER_BIT        0x00000400
#define GL_TRANSFORM_FEEDBACK_BARRIER_BIT 0x00000800
#define GL_ATOMIC_COUNTER_BARRIER_BIT     0x00001000
#define GL_ALL_BARRIER_BITS               0xFFFFFFFF
#define GL_MAX_IMAGE_UNITS                0x8F38
#define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS 0x8F39
#define GL_IMAGE_BINDING_NAME             0x8F3A
#define GL_IMAGE_BINDING_LEVEL            0x8F3B
#define GL_IMAGE_BINDING_LAYERED          0x8F3C
#define GL_IMAGE_BINDING_LAYER            0x8F3D
#define GL_IMAGE_BINDING_ACCESS           0x8F3E
#define GL_IMAGE_1D                       0x904C
#define GL_IMAGE_2D                       0x904D
#define GL_IMAGE_3D                       0x904E
#define GL_IMAGE_2D_RECT                  0x904F
#define GL_IMAGE_CUBE                     0x9050
#define GL_IMAGE_BUFFER                   0x9051
#define GL_IMAGE_1D_ARRAY                 0x9052
#define GL_IMAGE_2D_ARRAY                 0x9053
#define GL_IMAGE_CUBE_MAP_ARRAY           0x9054
#define GL_IMAGE_2D_MULTISAMPLE           0x9055
#define GL_IMAGE_2D_MULTISAMPLE_ARRAY     0x9056
#define GL_INT_IMAGE_1D                   0x9057
#define GL_INT_IMAGE_2D                   0x9058
#define GL_INT_IMAGE_3D                   0x9059
#define GL_INT_IMAGE_2D_RECT              0x905A
#define GL_INT_IMAGE_CUBE                 0x905B
#define GL_INT_IMAGE_BUFFER               0x905C
#define GL_INT_IMAGE_1D_ARRAY             0x905D
#define GL_INT_IMAGE_2D_ARRAY             0x905E
#define GL_INT_IMAGE_CUBE_MAP_ARRAY       0x905F
#define GL_INT_IMAGE_2D_MULTISAMPLE       0x9060
#define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x9061
#define GL_UNSIGNED_INT_IMAGE_1D          0x9062
#define GL_UNSIGNED_INT_IMAGE_2D          0x9063
#define GL_UNSIGNED_INT_IMAGE_3D          0x9064
#define GL_UNSIGNED_INT_IMAGE_2D_RECT     0x9065
#define GL_UNSIGNED_INT_IMAGE_CUBE        0x9066
#define GL_UNSIGNED_INT_IMAGE_BUFFER      0x9067
#define GL_UNSIGNED_INT_IMAGE_1D_ARRAY    0x9068
#define GL_UNSIGNED_INT_IMAGE_2D_ARRAY    0x9069
#define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY 0x906A
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE 0x906B
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x906C
#define GL_MAX_IMAGE_SAMPLES              0x906D
#define GL_IMAGE_BINDING_FORMAT           0x906E
#define GL_IMAGE_FORMAT_COMPATIBILITY_TYPE 0x90C7
#define GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE 0x90C8
#define GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS 0x90C9
#define GL_MAX_VERTEX_IMAGE_UNIFORMS      0x90CA
#define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS 0x90CB
#define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS 0x90CC
#define GL_MAX_GEOMETRY_IMAGE_UNIFORMS    0x90CD
#define GL_MAX_FRAGMENT_IMAGE_UNIFORMS    0x90CE
#define GL_MAX_COMBINED_IMAGE_UNIFORMS    0x90CF
#define GL_COMPRESSED_RGBA_BPTC_UNORM     0x8E8C
#define GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM 0x8E8D
#define GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT 0x8E8E
#define GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT 0x8E8F
#define GL_TEXTURE_IMMUTABLE_FORMAT       0x912F
typedef void (APIENTRYP PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC) (GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance);
typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance);
typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance);
typedef void (APIENTRYP PFNGLGETINTERNALFORMATIVPROC) (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params);
typedef void (APIENTRYP PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC) (GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);
typedef void (APIENTRYP PFNGLBINDIMAGETEXTUREPROC) (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
typedef void (APIENTRYP PFNGLMEMORYBARRIERPROC) (GLbitfield barriers);
typedef void (APIENTRYP PFNGLTEXSTORAGE1DPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
typedef void (APIENTRYP PFNGLTEXSTORAGE2DPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (APIENTRYP PFNGLTEXSTORAGE3DPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC) (GLenum mode, GLuint id, GLsizei instancecount);
typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC) (GLenum mode, GLuint id, GLuint stream, GLsizei instancecount);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glDrawArraysInstancedBaseInstance (GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance);
GLAPI void APIENTRY glDrawElementsInstancedBaseInstance (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance);
GLAPI void APIENTRY glDrawElementsInstancedBaseVertexBaseInstance (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance);
GLAPI void APIENTRY glGetInternalformativ (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params);
GLAPI void APIENTRY glGetActiveAtomicCounterBufferiv (GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);
GLAPI void APIENTRY glBindImageTexture (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
GLAPI void APIENTRY glMemoryBarrier (GLbitfield barriers);
GLAPI void APIENTRY glTexStorage1D (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
GLAPI void APIENTRY glTexStorage2D (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
GLAPI void APIENTRY glTexStorage3D (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
GLAPI void APIENTRY glDrawTransformFeedbackInstanced (GLenum mode, GLuint id, GLsizei instancecount);
GLAPI void APIENTRY glDrawTransformFeedbackStreamInstanced (GLenum mode, GLuint id, GLuint stream, GLsizei instancecount);
#endif
#endif /* GL_VERSION_4_2 */

#ifndef GL_VERSION_4_3
#define GL_VERSION_4_3 1
typedef void (APIENTRY  *GLDEBUGPROC)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
#define GL_NUM_SHADING_LANGUAGE_VERSIONS  0x82E9
#define GL_VERTEX_ATTRIB_ARRAY_LONG       0x874E
#define GL_COMPRESSED_RGB8_ETC2           0x9274
#define GL_COMPRESSED_SRGB8_ETC2          0x9275
#define GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 0x9276
#define GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 0x9277
#define GL_COMPRESSED_RGBA8_ETC2_EAC      0x9278
#define GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC 0x9279
#define GL_COMPRESSED_R11_EAC             0x9270
#define GL_COMPRESSED_SIGNED_R11_EAC      0x9271
#define GL_COMPRESSED_RG11_EAC            0x9272
#define GL_COMPRESSED_SIGNED_RG11_EAC     0x9273
#define GL_PRIMITIVE_RESTART_FIXED_INDEX  0x8D69
#define GL_ANY_SAMPLES_PASSED_CONSERVATIVE 0x8D6A
#define GL_MAX_ELEMENT_INDEX              0x8D6B
#define GL_COMPUTE_SHADER                 0x91B9
#define GL_MAX_COMPUTE_UNIFORM_BLOCKS     0x91BB
#define GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS 0x91BC
#define GL_MAX_COMPUTE_IMAGE_UNIFORMS     0x91BD
#define GL_MAX_COMPUTE_SHARED_MEMORY_SIZE 0x8262
#define GL_MAX_COMPUTE_UNIFORM_COMPONENTS 0x8263
#define GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS 0x8264
#define GL_MAX_COMPUTE_ATOMIC_COUNTERS    0x8265
#define GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS 0x8266
#define GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS 0x90EB
#define GL_MAX_COMPUTE_WORK_GROUP_COUNT   0x91BE
#define GL_MAX_COMPUTE_WORK_GROUP_SIZE    0x91BF
#define GL_COMPUTE_WORK_GROUP_SIZE        0x8267
#define GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER 0x90EC
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER 0x90ED
#define GL_DISPATCH_INDIRECT_BUFFER       0x90EE
#define GL_DISPATCH_INDIRECT_BUFFER_BINDING 0x90EF
#define GL_COMPUTE_SHADER_BIT             0x00000020
#define GL_DEBUG_OUTPUT_SYNCHRONOUS       0x8242
#define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH 0x8243
#define GL_DEBUG_CALLBACK_FUNCTION        0x8244
#define GL_DEBUG_CALLBACK_USER_PARAM      0x8245
#define GL_DEBUG_SOURCE_API               0x8246
#define GL_DEBUG_SOURCE_WINDOW_SYSTEM     0x8247
#define GL_DEBUG_SOURCE_SHADER_COMPILER   0x8248
#define GL_DEBUG_SOURCE_THIRD_PARTY       0x8249
#define GL_DEBUG_SOURCE_APPLICATION       0x824A
#define GL_DEBUG_SOURCE_OTHER             0x824B
#define GL_DEBUG_TYPE_ERROR               0x824C
#define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR 0x824D
#define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR  0x824E
#define GL_DEBUG_TYPE_PORTABILITY         0x824F
#define GL_DEBUG_TYPE_PERFORMANCE         0x8250
#define GL_DEBUG_TYPE_OTHER               0x8251
#define GL_MAX_DEBUG_MESSAGE_LENGTH       0x9143
#define GL_MAX_DEBUG_LOGGED_MESSAGES      0x9144
#define GL_DEBUG_LOGGED_MESSAGES          0x9145
#define GL_DEBUG_SEVERITY_HIGH            0x9146
#define GL_DEBUG_SEVERITY_MEDIUM          0x9147
#define GL_DEBUG_SEVERITY_LOW             0x9148
#define GL_DEBUG_TYPE_MARKER              0x8268
#define GL_DEBUG_TYPE_PUSH_GROUP          0x8269
#define GL_DEBUG_TYPE_POP_GROUP           0x826A
#define GL_DEBUG_SEVERITY_NOTIFICATION    0x826B
#define GL_MAX_DEBUG_GROUP_STACK_DEPTH    0x826C
#define GL_DEBUG_GROUP_STACK_DEPTH        0x826D
#define GL_BUFFER                         0x82E0
#define GL_SHADER                         0x82E1
#define GL_PROGRAM                        0x82E2
#define GL_QUERY                          0x82E3
#define GL_PROGRAM_PIPELINE               0x82E4
#define GL_SAMPLER                        0x82E6
#define GL_MAX_LABEL_LENGTH               0x82E8
#define GL_DEBUG_OUTPUT                   0x92E0
#define GL_CONTEXT_FLAG_DEBUG_BIT         0x00000002
#define GL_MAX_UNIFORM_LOCATIONS          0x826E
#define GL_FRAMEBUFFER_DEFAULT_WIDTH      0x9310
#define GL_FRAMEBUFFER_DEFAULT_HEIGHT     0x9311
#define GL_FRAMEBUFFER_DEFAULT_LAYERS     0x9312
#define GL_FRAMEBUFFER_DEFAULT_SAMPLES    0x9313
#define GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS 0x9314
#define GL_MAX_FRAMEBUFFER_WIDTH          0x9315
#define GL_MAX_FRAMEBUFFER_HEIGHT         0x9316
#define GL_MAX_FRAMEBUFFER_LAYERS         0x9317
#define GL_MAX_FRAMEBUFFER_SAMPLES        0x9318
#define GL_INTERNALFORMAT_SUPPORTED       0x826F
#define GL_INTERNALFORMAT_PREFERRED       0x8270
#define GL_INTERNALFORMAT_RED_SIZE        0x8271
#define GL_INTERNALFORMAT_GREEN_SIZE      0x8272
#define GL_INTERNALFORMAT_BLUE_SIZE       0x8273
#define GL_INTERNALFORMAT_ALPHA_SIZE      0x8274
#define GL_INTERNALFORMAT_DEPTH_SIZE      0x8275
#define GL_INTERNALFORMAT_STENCIL_SIZE    0x8276
#define GL_INTERNALFORMAT_SHARED_SIZE     0x8277
#define GL_INTERNALFORMAT_RED_TYPE        0x8278
#define GL_INTERNALFORMAT_GREEN_TYPE      0x8279
#define GL_INTERNALFORMAT_BLUE_TYPE       0x827A
#define GL_INTERNALFORMAT_ALPHA_TYPE      0x827B
#define GL_INTERNALFORMAT_DEPTH_TYPE      0x827C
#define GL_INTERNALFORMAT_STENCIL_TYPE    0x827D
#define GL_MAX_WIDTH                      0x827E
#define GL_MAX_HEIGHT                     0x827F
#define GL_MAX_DEPTH                      0x8280
#define GL_MAX_LAYERS                     0x8281
#define GL_MAX_COMBINED_DIMENSIONS        0x8282
#define GL_COLOR_COMPONENTS               0x8283
#define GL_DEPTH_COMPONENTS               0x8284
#define GL_STENCIL_COMPONENTS             0x8285
#define GL_COLOR_RENDERABLE               0x8286
#define GL_DEPTH_RENDERABLE               0x8287
#define GL_STENCIL_RENDERABLE             0x8288
#define GL_FRAMEBUFFER_RENDERABLE         0x8289
#define GL_FRAMEBUFFER_RENDERABLE_LAYERED 0x828A
#define GL_FRAMEBUFFER_BLEND              0x828B
#define GL_READ_PIXELS                    0x828C
#define GL_READ_PIXELS_FORMAT             0x828D
#define GL_READ_PIXELS_TYPE               0x828E
#define GL_TEXTURE_IMAGE_FORMAT           0x828F
#define GL_TEXTURE_IMAGE_TYPE             0x8290
#define GL_GET_TEXTURE_IMAGE_FORMAT       0x8291
#define GL_GET_TEXTURE_IMAGE_TYPE         0x8292
#define GL_MIPMAP                         0x8293
#define GL_MANUAL_GENERATE_MIPMAP         0x8294
#define GL_AUTO_GENERATE_MIPMAP           0x8295
#define GL_COLOR_ENCODING                 0x8296
#define GL_SRGB_READ                      0x8297
#define GL_SRGB_WRITE                     0x8298
#define GL_FILTER                         0x829A
#define GL_VERTEX_TEXTURE                 0x829B
#define GL_TESS_CONTROL_TEXTURE           0x829C
#define GL_TESS_EVALUATION_TEXTURE        0x829D
#define GL_GEOMETRY_TEXTURE               0x829E
#define GL_FRAGMENT_TEXTURE               0x829F
#define GL_COMPUTE_TEXTURE                0x82A0
#define GL_TEXTURE_SHADOW                 0x82A1
#define GL_TEXTURE_GATHER                 0x82A2
#define GL_TEXTURE_GATHER_SHADOW          0x82A3
#define GL_SHADER_IMAGE_LOAD              0x82A4
#define GL_SHADER_IMAGE_STORE             0x82A5
#define GL_SHADER_IMAGE_ATOMIC            0x82A6
#define GL_IMAGE_TEXEL_SIZE               0x82A7
#define GL_IMAGE_COMPATIBILITY_CLASS      0x82A8
#define GL_IMAGE_PIXEL_FORMAT             0x82A9
#define GL_IMAGE_PIXEL_TYPE               0x82AA
#define GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST 0x82AC
#define GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST 0x82AD
#define GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE 0x82AE
#define GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE 0x82AF
#define GL_TEXTURE_COMPRESSED_BLOCK_WIDTH 0x82B1
#define GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT 0x82B2
#define GL_TEXTURE_COMPRESSED_BLOCK_SIZE  0x82B3
#define GL_CLEAR_BUFFER                   0x82B4
#define GL_TEXTURE_VIEW                   0x82B5
#define GL_VIEW_COMPATIBILITY_CLASS       0x82B6
#define GL_FULL_SUPPORT                   0x82B7
#define GL_CAVEAT_SUPPORT                 0x82B8
#define GL_IMAGE_CLASS_4_X_32             0x82B9
#define GL_IMAGE_CLASS_2_X_32             0x82BA
#define GL_IMAGE_CLASS_1_X_32             0x82BB
#define GL_IMAGE_CLASS_4_X_16             0x82BC
#define GL_IMAGE_CLASS_2_X_16             0x82BD
#define GL_IMAGE_CLASS_1_X_16             0x82BE
#define GL_IMAGE_CLASS_4_X_8              0x82BF
#define GL_IMAGE_CLASS_2_X_8              0x82C0
#define GL_IMAGE_CLASS_1_X_8              0x82C1
#define GL_IMAGE_CLASS_11_11_10           0x82C2
#define GL_IMAGE_CLASS_10_10_10_2         0x82C3
#define GL_VIEW_CLASS_128_BITS            0x82C4
#define GL_VIEW_CLASS_96_BITS             0x82C5
#define GL_VIEW_CLASS_64_BITS             0x82C6
#define GL_VIEW_CLASS_48_BITS             0x82C7
#define GL_VIEW_CLASS_32_BITS             0x82C8
#define GL_VIEW_CLASS_24_BITS             0x82C9
#define GL_VIEW_CLASS_16_BITS             0x82CA
#define GL_VIEW_CLASS_8_BITS              0x82CB
#define GL_VIEW_CLASS_S3TC_DXT1_RGB       0x82CC
#define GL_VIEW_CLASS_S3TC_DXT1_RGBA      0x82CD
#define GL_VIEW_CLASS_S3TC_DXT3_RGBA      0x82CE
#define GL_VIEW_CLASS_S3TC_DXT5_RGBA      0x82CF
#define GL_VIEW_CLASS_RGTC1_RED           0x82D0
#define GL_VIEW_CLASS_RGTC2_RG            0x82D1
#define GL_VIEW_CLASS_BPTC_UNORM          0x82D2
#define GL_VIEW_CLASS_BPTC_FLOAT          0x82D3
#define GL_UNIFORM                        0x92E1
#define GL_UNIFORM_BLOCK                  0x92E2
#define GL_PROGRAM_INPUT                  0x92E3
#define GL_PROGRAM_OUTPUT                 0x92E4
#define GL_BUFFER_VARIABLE                0x92E5
#define GL_SHADER_STORAGE_BLOCK           0x92E6
#define GL_VERTEX_SUBROUTINE              0x92E8
#define GL_TESS_CONTROL_SUBROUTINE        0x92E9
#define GL_TESS_EVALUATION_SUBROUTINE     0x92EA
#define GL_GEOMETRY_SUBROUTINE            0x92EB
#define GL_FRAGMENT_SUBROUTINE            0x92EC
#define GL_COMPUTE_SUBROUTINE             0x92ED
#define GL_VERTEX_SUBROUTINE_UNIFORM      0x92EE
#define GL_TESS_CONTROL_SUBROUTINE_UNIFORM 0x92EF
#define GL_TESS_EVALUATION_SUBROUTINE_UNIFORM 0x92F0
#define GL_GEOMETRY_SUBROUTINE_UNIFORM    0x92F1
#define GL_FRAGMENT_SUBROUTINE_UNIFORM    0x92F2
#define GL_COMPUTE_SUBROUTINE_UNIFORM     0x92F3
#define GL_TRANSFORM_FEEDBACK_VARYING     0x92F4
#define GL_ACTIVE_RESOURCES               0x92F5
#define GL_MAX_NAME_LENGTH                0x92F6
#define GL_MAX_NUM_ACTIVE_VARIABLES       0x92F7
#define GL_MAX_NUM_COMPATIBLE_SUBROUTINES 0x92F8
#define GL_NAME_LENGTH                    0x92F9
#define GL_TYPE                           0x92FA
#define GL_ARRAY_SIZE                     0x92FB
#define GL_OFFSET                         0x92FC
#define GL_BLOCK_INDEX                    0x92FD
#define GL_ARRAY_STRIDE                   0x92FE
#define GL_MATRIX_STRIDE                  0x92FF
#define GL_IS_ROW_MAJOR                   0x9300
#define GL_ATOMIC_COUNTER_BUFFER_INDEX    0x9301
#define GL_BUFFER_BINDING                 0x9302
#define GL_BUFFER_DATA_SIZE               0x9303
#define GL_NUM_ACTIVE_VARIABLES           0x9304
#define GL_ACTIVE_VARIABLES               0x9305
#define GL_REFERENCED_BY_VERTEX_SHADER    0x9306
#define GL_REFERENCED_BY_TESS_CONTROL_SHADER 0x9307
#define GL_REFERENCED_BY_TESS_EVALUATION_SHADER 0x9308
#define GL_REFERENCED_BY_GEOMETRY_SHADER  0x9309
#define GL_REFERENCED_BY_FRAGMENT_SHADER  0x930A
#define GL_REFERENCED_BY_COMPUTE_SHADER   0x930B
#define GL_TOP_LEVEL_ARRAY_SIZE           0x930C
#define GL_TOP_LEVEL_ARRAY_STRIDE         0x930D
#define GL_LOCATION                       0x930E
#define GL_LOCATION_INDEX                 0x930F
#define GL_IS_PER_PATCH                   0x92E7
#define GL_SHADER_STORAGE_BUFFER          0x90D2
#define GL_SHADER_STORAGE_BUFFER_BINDING  0x90D3
#define GL_SHADER_STORAGE_BUFFER_START    0x90D4
#define GL_SHADER_STORAGE_BUFFER_SIZE     0x90D5
#define GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS 0x90D6
#define GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS 0x90D7
#define GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS 0x90D8
#define GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS 0x90D9
#define GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS 0x90DA
#define GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS 0x90DB
#define GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS 0x90DC
#define GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS 0x90DD
#define GL_MAX_SHADER_STORAGE_BLOCK_SIZE  0x90DE
#define GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT 0x90DF
#define GL_SHADER_STORAGE_BARRIER_BIT     0x00002000
#define GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES 0x8F39
#define GL_DEPTH_STENCIL_TEXTURE_MODE     0x90EA
#define GL_TEXTURE_BUFFER_OFFSET          0x919D
#define GL_TEXTURE_BUFFER_SIZE            0x919E
#define GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT 0x919F
#define GL_TEXTURE_VIEW_MIN_LEVEL         0x82DB
#define GL_TEXTURE_VIEW_NUM_LEVELS        0x82DC
#define GL_TEXTURE_VIEW_MIN_LAYER         0x82DD
#define GL_TEXTURE_VIEW_NUM_LAYERS        0x82DE
#define GL_TEXTURE_IMMUTABLE_LEVELS       0x82DF
#define GL_VERTEX_ATTRIB_BINDING          0x82D4
#define GL_VERTEX_ATTRIB_RELATIVE_OFFSET  0x82D5
#define GL_VERTEX_BINDING_DIVISOR         0x82D6
#define GL_VERTEX_BINDING_OFFSET          0x82D7
#define GL_VERTEX_BINDING_STRIDE          0x82D8
#define GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET 0x82D9
#define GL_MAX_VERTEX_ATTRIB_BINDINGS     0x82DA
#define GL_VERTEX_BINDING_BUFFER          0x8F4F
typedef void (APIENTRYP PFNGLCLEARBUFFERDATAPROC) (GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data);
typedef void (APIENTRYP PFNGLCLEARBUFFERSUBDATAPROC) (GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
typedef void (APIENTRYP PFNGLDISPATCHCOMPUTEPROC) (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
typedef void (APIENTRYP PFNGLDISPATCHCOMPUTEINDIRECTPROC) (GLintptr indirect);
typedef void (APIENTRYP PFNGLCOPYIMAGESUBDATAPROC) (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
typedef void (APIENTRYP PFNGLFRAMEBUFFERPARAMETERIPROC) (GLenum target, GLenum pname, GLint param);
typedef void (APIENTRYP PFNGLGETFRAMEBUFFERPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);
typedef void (APIENTRYP PFNGLGETINTERNALFORMATI64VPROC) (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params);
typedef void (APIENTRYP PFNGLINVALIDATETEXSUBIMAGEPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth);
typedef void (APIENTRYP PFNGLINVALIDATETEXIMAGEPROC) (GLuint texture, GLint level);
typedef void (APIENTRYP PFNGLINVALIDATEBUFFERSUBDATAPROC) (GLuint buffer, GLintptr offset, GLsizeiptr length);
typedef void (APIENTRYP PFNGLINVALIDATEBUFFERDATAPROC) (GLuint buffer);
typedef void (APIENTRYP PFNGLINVALIDATEFRAMEBUFFERPROC) (GLenum target, GLsizei numAttachments, const GLenum *attachments);
typedef void (APIENTRYP PFNGLINVALIDATESUBFRAMEBUFFERPROC) (GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSINDIRECTPROC) (GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride);
typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSINDIRECTPROC) (GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride);
typedef void (APIENTRYP PFNGLGETPROGRAMINTERFACEIVPROC) (GLuint program, GLenum programInterface, GLenum pname, GLint *params);
typedef GLuint (APIENTRYP PFNGLGETPROGRAMRESOURCEINDEXPROC) (GLuint program, GLenum programInterface, const GLchar *name);
typedef void (APIENTRYP PFNGLGETPROGRAMRESOURCENAMEPROC) (GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);
typedef void (APIENTRYP PFNGLGETPROGRAMRESOURCEIVPROC) (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params);
typedef GLint (APIENTRYP PFNGLGETPROGRAMRESOURCELOCATIONPROC) (GLuint program, GLenum programInterface, const GLchar *name);
typedef GLint (APIENTRYP PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC) (GLuint program, GLenum programInterface, const GLchar *name);
typedef void (APIENTRYP PFNGLSHADERSTORAGEBLOCKBINDINGPROC) (GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding);
typedef void (APIENTRYP PFNGLTEXBUFFERRANGEPROC) (GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (APIENTRYP PFNGLTEXSTORAGE2DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
typedef void (APIENTRYP PFNGLTEXSTORAGE3DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
typedef void (APIENTRYP PFNGLTEXTUREVIEWPROC) (GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);
typedef void (APIENTRYP PFNGLBINDVERTEXBUFFERPROC) (GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
typedef void (APIENTRYP PFNGLVERTEXATTRIBFORMATPROC) (GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
typedef void (APIENTRYP PFNGLVERTEXATTRIBIFORMATPROC) (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (APIENTRYP PFNGLVERTEXATTRIBLFORMATPROC) (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (APIENTRYP PFNGLVERTEXATTRIBBINDINGPROC) (GLuint attribindex, GLuint bindingindex);
typedef void (APIENTRYP PFNGLVERTEXBINDINGDIVISORPROC) (GLuint bindingindex, GLuint divisor);
typedef void (APIENTRYP PFNGLDEBUGMESSAGECONTROLPROC) (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
typedef void (APIENTRYP PFNGLDEBUGMESSAGEINSERTPROC) (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
typedef void (APIENTRYP PFNGLDEBUGMESSAGECALLBACKPROC) (GLDEBUGPROC callback, const void *userParam);
typedef GLuint (APIENTRYP PFNGLGETDEBUGMESSAGELOGPROC) (GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
typedef void (APIENTRYP PFNGLPUSHDEBUGGROUPPROC) (GLenum source, GLuint id, GLsizei length, const GLchar *message);
typedef void (APIENTRYP PFNGLPOPDEBUGGROUPPROC) (void);
typedef void (APIENTRYP PFNGLOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
typedef void (APIENTRYP PFNGLGETOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
typedef void (APIENTRYP PFNGLOBJECTPTRLABELPROC) (const void *ptr, GLsizei length, const GLchar *label);
typedef void (APIENTRYP PFNGLGETOBJECTPTRLABELPROC) (const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glClearBufferData (GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data);
GLAPI void APIENTRY glClearBufferSubData (GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
GLAPI void APIENTRY glDispatchCompute (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
GLAPI void APIENTRY glDispatchComputeIndirect (GLintptr indirect);
GLAPI void APIENTRY glCopyImageSubData (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
GLAPI void APIENTRY glFramebufferParameteri (GLenum target, GLenum pname, GLint param);
GLAPI void APIENTRY glGetFramebufferParameteriv (GLenum target, GLenum pname, GLint *params);
GLAPI void APIENTRY glGetInternalformati64v (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params);
GLAPI void APIENTRY glInvalidateTexSubImage (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth);
GLAPI void APIENTRY glInvalidateTexImage (GLuint texture, GLint level);
GLAPI void APIENTRY glInvalidateBufferSubData (GLuint buffer, GLintptr offset, GLsizeiptr length);
GLAPI void APIENTRY glInvalidateBufferData (GLuint buffer);
GLAPI void APIENTRY glInvalidateFramebuffer (GLenum target, GLsizei numAttachments, const GLenum *attachments);
GLAPI void APIENTRY glInvalidateSubFramebuffer (GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI void APIENTRY glMultiDrawArraysIndirect (GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride);
GLAPI void APIENTRY glMultiDrawElementsIndirect (GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride);
GLAPI void APIENTRY glGetProgramInterfaceiv (GLuint program, GLenum programInterface, GLenum pname, GLint *params);
GLAPI GLuint APIENTRY glGetProgramResourceIndex (GLuint program, GLenum programInterface, const GLchar *name);
GLAPI void APIENTRY glGetProgramResourceName (GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);
GLAPI void APIENTRY glGetProgramResourceiv (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params);
GLAPI GLint APIENTRY glGetProgramResourceLocation (GLuint program, GLenum programInterface, const GLchar *name);
GLAPI GLint APIENTRY glGetProgramResourceLocationIndex (GLuint program, GLenum programInterface, const GLchar *name);
GLAPI void APIENTRY glShaderStorageBlockBinding (GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding);
GLAPI void APIENTRY glTexBufferRange (GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
GLAPI void APIENTRY glTexStorage2DMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
GLAPI void APIENTRY glTexStorage3DMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
GLAPI void APIENTRY glTextureView (GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);
GLAPI void APIENTRY glBindVertexBuffer (GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
GLAPI void APIENTRY glVertexAttribFormat (GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
GLAPI void APIENTRY glVertexAttribIFormat (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
GLAPI void APIENTRY glVertexAttribLFormat (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
GLAPI void APIENTRY glVertexAttribBinding (GLuint attribindex, GLuint bindingindex);
GLAPI void APIENTRY glVertexBindingDivisor (GLuint bindingindex, GLuint divisor);
GLAPI void APIENTRY glDebugMessageControl (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
GLAPI void APIENTRY glDebugMessageInsert (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
GLAPI void APIENTRY glDebugMessageCallback (GLDEBUGPROC callback, const void *userParam);
GLAPI GLuint APIENTRY glGetDebugMessageLog (GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
GLAPI void APIENTRY glPushDebugGroup (GLenum source, GLuint id, GLsizei length, const GLchar *message);
GLAPI void APIENTRY glPopDebugGroup (void);
GLAPI void APIENTRY glObjectLabel (GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
GLAPI void APIENTRY glGetObjectLabel (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
GLAPI void APIENTRY glObjectPtrLabel (const void *ptr, GLsizei length, const GLchar *label);
GLAPI void APIENTRY glGetObjectPtrLabel (const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);
#endif
#endif /* GL_VERSION_4_3 */

#ifndef GL_VERSION_4_4
#define GL_VERSION_4_4 1
#define GL_MAX_VERTEX_ATTRIB_STRIDE       0x82E5
#define GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED 0x8221
#define GL_TEXTURE_BUFFER_BINDING         0x8C2A
#define GL_MAP_PERSISTENT_BIT             0x0040
#define GL_MAP_COHERENT_BIT               0x0080
#define GL_DYNAMIC_STORAGE_BIT            0x0100
#define GL_CLIENT_STORAGE_BIT             0x0200
#define GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT 0x00004000
#define GL_BUFFER_IMMUTABLE_STORAGE       0x821F
#define GL_BUFFER_STORAGE_FLAGS           0x8220
#define GL_CLEAR_TEXTURE                  0x9365
#define GL_LOCATION_COMPONENT             0x934A
#define GL_TRANSFORM_FEEDBACK_BUFFER_INDEX 0x934B
#define GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE 0x934C
#define GL_QUERY_BUFFER                   0x9192
#define GL_QUERY_BUFFER_BARRIER_BIT       0x00008000
#define GL_QUERY_BUFFER_BINDING           0x9193
#define GL_QUERY_RESULT_NO_WAIT           0x9194
#define GL_MIRROR_CLAMP_TO_EDGE           0x8743
typedef void (APIENTRYP PFNGLBUFFERSTORAGEPROC) (GLenum target, GLsizeiptr size, const void *data, GLbitfield flags);
typedef void (APIENTRYP PFNGLCLEARTEXIMAGEPROC) (GLuint texture, GLint level, GLenum format, GLenum type, const void *data);
typedef void (APIENTRYP PFNGLCLEARTEXSUBIMAGEPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data);
typedef void (APIENTRYP PFNGLBINDBUFFERSBASEPROC) (GLenum target, GLuint first, GLsizei count, const GLuint *buffers);
typedef void (APIENTRYP PFNGLBINDBUFFERSRANGEPROC) (GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes);
typedef void (APIENTRYP PFNGLBINDTEXTURESPROC) (GLuint first, GLsizei count, const GLuint *textures);
typedef void (APIENTRYP PFNGLBINDSAMPLERSPROC) (GLuint first, GLsizei count, const GLuint *samplers);
typedef void (APIENTRYP PFNGLBINDIMAGETEXTURESPROC) (GLuint first, GLsizei count, const GLuint *textures);
typedef void (APIENTRYP PFNGLBINDVERTEXBUFFERSPROC) (GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glBufferStorage (GLenum target, GLsizeiptr size, const void *data, GLbitfield flags);
GLAPI void APIENTRY glClearTexImage (GLuint texture, GLint level, GLenum format, GLenum type, const void *data);
GLAPI void APIENTRY glClearTexSubImage (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data);
GLAPI void APIENTRY glBindBuffersBase (GLenum target, GLuint first, GLsizei count, const GLuint *buffers);
GLAPI void APIENTRY glBindBuffersRange (GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes);
GLAPI void APIENTRY glBindTextures (GLuint first, GLsizei count, const GLuint *textures);
GLAPI void APIENTRY glBindSamplers (GLuint first, GLsizei count, const GLuint *samplers);
GLAPI void APIENTRY glBindImageTextures (GLuint first, GLsizei count, const GLuint *textures);
GLAPI void APIENTRY glBindVertexBuffers (GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides);
#endif
#endif /* GL_VERSION_4_4 */

#ifndef GL_VERSION_4_5
#define GL_VERSION_4_5 1
#define GL_CONTEXT_LOST                   0x0507
#define GL_NEGATIVE_ONE_TO_ONE            0x935E
#define GL_ZERO_TO_ONE                    0x935F
#define GL_CLIP_ORIGIN                    0x935C
#define GL_CLIP_DEPTH_MODE                0x935D
#define GL_QUERY_WAIT_INVERTED            0x8E17
#define GL_QUERY_NO_WAIT_INVERTED         0x8E18
#define GL_QUERY_BY_REGION_WAIT_INVERTED  0x8E19
#define GL_QUERY_BY_REGION_NO_WAIT_INVERTED 0x8E1A
#define GL_MAX_CULL_DISTANCES             0x82F9
#define GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES 0x82FA
#define GL_TEXTURE_TARGET                 0x1006
#define GL_QUERY_TARGET                   0x82EA
#define GL_GUILTY_CONTEXT_RESET           0x8253
#define GL_INNOCENT_CONTEXT_RESET         0x8254
#define GL_UNKNOWN_CONTEXT_RESET          0x8255
#define GL_RESET_NOTIFICATION_STRATEGY    0x8256
#define GL_LOSE_CONTEXT_ON_RESET          0x8252
#define GL_NO_RESET_NOTIFICATION          0x8261
#define GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT 0x00000004
#define GL_CONTEXT_RELEASE_BEHAVIOR       0x82FB
#define GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH 0x82FC
typedef void (APIENTRYP PFNGLCLIPCONTROLPROC) (GLenum origin, GLenum depth);
typedef void (APIENTRYP PFNGLCREATETRANSFORMFEEDBACKSPROC) (GLsizei n, GLuint *ids);
typedef void (APIENTRYP PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC) (GLuint xfb, GLuint index, GLuint buffer);
typedef void (APIENTRYP PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC) (GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (APIENTRYP PFNGLGETTRANSFORMFEEDBACKIVPROC) (GLuint xfb, GLenum pname, GLint *param);
typedef void (APIENTRYP PFNGLGETTRANSFORMFEEDBACKI_VPROC) (GLuint xfb, GLenum pname, GLuint index, GLint *param);
typedef void (APIENTRYP PFNGLGETTRANSFORMFEEDBACKI64_VPROC) (GLuint xfb, GLenum pname, GLuint index, GLint64 *param);
typedef void (APIENTRYP PFNGLCREATEBUFFERSPROC) (GLsizei n, GLuint *buffers);
typedef void (APIENTRYP PFNGLNAMEDBUFFERSTORAGEPROC) (GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags);
typedef void (APIENTRYP PFNGLNAMEDBUFFERDATAPROC) (GLuint buffer, GLsizeiptr size, const void *data, GLenum usage);
typedef void (APIENTRYP PFNGLNAMEDBUFFERSUBDATAPROC) (GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data);
typedef void (APIENTRYP PFNGLCOPYNAMEDBUFFERSUBDATAPROC) (GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
typedef void (APIENTRYP PFNGLCLEARNAMEDBUFFERDATAPROC) (GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data);
typedef void (APIENTRYP PFNGLCLEARNAMEDBUFFERSUBDATAPROC) (GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
typedef void *(APIENTRYP PFNGLMAPNAMEDBUFFERPROC) (GLuint buffer, GLenum access);
typedef void *(APIENTRYP PFNGLMAPNAMEDBUFFERRANGEPROC) (GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
typedef GLboolean (APIENTRYP PFNGLUNMAPNAMEDBUFFERPROC) (GLuint buffer);
typedef void (APIENTRYP PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC) (GLuint buffer, GLintptr offset, GLsizeiptr length);
typedef void (APIENTRYP PFNGLGETNAMEDBUFFERPARAMETERIVPROC) (GLuint buffer, GLenum pname, GLint *params);
typedef void (APIENTRYP PFNGLGETNAMEDBUFFERPARAMETERI64VPROC) (GLuint buffer, GLenum pname, GLint64 *params);
typedef void (APIENTRYP PFNGLGETNAMEDBUFFERPOINTERVPROC) (GLuint buffer, GLenum pname, void **params);
typedef void (APIENTRYP PFNGLGETNAMEDBUFFERSUBDATAPROC) (GLuint buffer, GLintptr offset, GLsizeiptr size, void *data);
typedef void (APIENTRYP PFNGLCREATEFRAMEBUFFERSPROC) (GLsizei n, GLuint *framebuffers);
typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC) (GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC) (GLuint framebuffer, GLenum pname, GLint param);
typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTUREPROC) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC) (GLuint framebuffer, GLenum buf);
typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC) (GLuint framebuffer, GLsizei n, const GLenum *bufs);
typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC) (GLuint framebuffer, GLenum src);
typedef void (APIENTRYP PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC) (GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments);
typedef void (APIENTRYP PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC) (GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (APIENTRYP PFNGLCLEARNAMEDFRAMEBUFFERIVPROC) (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint *value);
typedef void (APIENTRYP PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC) (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint *value);
typedef void (APIENTRYP PFNGLCLEARNAMEDFRAMEBUFFERFVPROC) (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat *value);
typedef void (APIENTRYP PFNGLCLEARNAMEDFRAMEBUFFERFIPROC) (GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
typedef void (APIENTRYP PFNGLBLITNAMEDFRAMEBUFFERPROC) (GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
typedef GLenum (APIENTRYP PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC) (GLuint framebuffer, GLenum target);
typedef void (APIENTRYP PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC) (GLuint framebuffer, GLenum pname, GLint *param);
typedef void (APIENTRYP PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC) (GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params);
typedef void (APIENTRYP PFNGLCREATERENDERBUFFERSPROC) (GLsizei n, GLuint *renderbuffers);
typedef void (APIENTRYP PFNGLNAMEDRENDERBUFFERSTORAGEPROC) (GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (APIENTRYP PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC) (GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (APIENTRYP PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC) (GLuint renderbuffer, GLenum pname, GLint *params);
typedef void (APIENTRYP PFNGLCREATETEXTURESPROC) (GLenum target, GLsizei n, GLuint *textures);
typedef void (APIENTRYP PFNGLTEXTUREBUFFERPROC) (GLuint texture, GLenum internalformat, GLuint buffer);
typedef void (APIENTRYP PFNGLTEXTUREBUFFERRANGEPROC) (GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (APIENTRYP PFNGLTEXTURESTORAGE1DPROC) (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width);
typedef void (APIENTRYP PFNGLTEXTURESTORAGE2DPROC) (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (APIENTRYP PFNGLTEXTURESTORAGE3DPROC) (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
typedef void (APIENTRYP PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC) (GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
typedef void (APIENTRYP PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC) (GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
typedef void (APIENTRYP PFNGLTEXTURESUBIMAGE1DPROC) (GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRYP PFNGLTEXTURESUBIMAGE2DPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRYP PFNGLTEXTURESUBIMAGE3DPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC) (GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
typedef void (APIENTRYP PFNGLCOPYTEXTURESUBIMAGE1DPROC) (GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef void (APIENTRYP PFNGLCOPYTEXTURESUBIMAGE2DPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (APIENTRYP PFNGLCOPYTEXTURESUBIMAGE3DPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (APIENTRYP PFNGLTEXTUREPARAMETERFPROC) (GLuint texture, GLenum pname, GLfloat param);
typedef void (APIENTRYP PFNGLTEXTUREPARAMETERFVPROC) (GLuint texture, GLenum pname, const GLfloat *param);
typedef void (APIENTRYP PFNGLTEXTUREPARAMETERIPROC) (GLuint texture, GLenum pname, GLint param);
typedef void (APIENTRYP PFNGLTEXTUREPARAMETERIIVPROC) (GLuint texture, GLenum pname, const GLint *params);
typedef void (APIENTRYP PFNGLTEXTUREPARAMETERIUIVPROC) (GLuint texture, GLenum pname, const GLuint *params);
typedef void (APIENTRYP PFNGLTEXTUREPARAMETERIVPROC) (GLuint texture, GLenum pname, const GLint *param);
typedef void (APIENTRYP PFNGLGENERATETEXTUREMIPMAPPROC) (GLuint texture);
typedef void (APIENTRYP PFNGLBINDTEXTUREUNITPROC) (GLuint unit, GLuint texture);
typedef void (APIENTRYP PFNGLGETTEXTUREIMAGEPROC) (GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
typedef void (APIENTRYP PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC) (GLuint texture, GLint level, GLsizei bufSize, void *pixels);
typedef void (APIENTRYP PFNGLGETTEXTURELEVELPARAMETERFVPROC) (GLuint texture, GLint level, GLenum pname, GLfloat *params);
typedef void (APIENTRYP PFNGLGETTEXTURELEVELPARAMETERIVPROC) (GLuint texture, GLint level, GLenum pname, GLint *params);
typedef void (APIENTRYP PFNGLGETTEXTUREPARAMETERFVPROC) (GLuint texture, GLenum pname, GLfloat *params);
typedef void (APIENTRYP PFNGLGETTEXTUREPARAMETERIIVPROC) (GLuint texture, GLenum pname, GLint *params);
typedef void (APIENTRYP PFNGLGETTEXTUREPARAMETERIUIVPROC) (GLuint texture, GLenum pname, GLuint *params);
typedef void (APIENTRYP PFNGLGETTEXTUREPARAMETERIVPROC) (GLuint texture, GLenum pname, GLint *params);
typedef void (APIENTRYP PFNGLCREATEVERTEXARRAYSPROC) (GLsizei n, GLuint *arrays);
typedef void (APIENTRYP PFNGLDISABLEVERTEXARRAYATTRIBPROC) (GLuint vaobj, GLuint index);
typedef void (APIENTRYP PFNGLENABLEVERTEXARRAYATTRIBPROC) (GLuint vaobj, GLuint index);
typedef void (APIENTRYP PFNGLVERTEXARRAYELEMENTBUFFERPROC) (GLuint vaobj, GLuint buffer);
typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXBUFFERPROC) (GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXBUFFERSPROC) (GLuint vaobj, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides);
typedef void (APIENTRYP PFNGLVERTEXARRAYATTRIBBINDINGPROC) (GLuint vaobj, GLuint attribindex, GLuint bindingindex);
typedef void (APIENTRYP PFNGLVERTEXARRAYATTRIBFORMATPROC) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
typedef void (APIENTRYP PFNGLVERTEXARRAYATTRIBIFORMATPROC) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (APIENTRYP PFNGLVERTEXARRAYATTRIBLFORMATPROC) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (APIENTRYP PFNGLVERTEXARRAYBINDINGDIVISORPROC) (GLuint vaobj, GLuint bindingindex, GLuint divisor);
typedef void (APIENTRYP PFNGLGETVERTEXARRAYIVPROC) (GLuint vaobj, GLenum pname, GLint *param);
typedef void (APIENTRYP PFNGLGETVERTEXARRAYINDEXEDIVPROC) (GLuint vaobj, GLuint index, GLenum pname, GLint *param);
typedef void (APIENTRYP PFNGLGETVERTEXARRAYINDEXED64IVPROC) (GLuint vaobj, GLuint index, GLenum pname, GLint64 *param);
typedef void (APIENTRYP PFNGLCREATESAMPLERSPROC) (GLsizei n, GLuint *samplers);
typedef void (APIENTRYP PFNGLCREATEPROGRAMPIPELINESPROC) (GLsizei n, GLuint *pipelines);
typedef void (APIENTRYP PFNGLCREATEQUERIESPROC) (GLenum target, GLsizei n, GLuint *ids);
typedef void (APIENTRYP PFNGLGETQUERYBUFFEROBJECTI64VPROC) (GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
typedef void (APIENTRYP PFNGLGETQUERYBUFFEROBJECTIVPROC) (GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
typedef void (APIENTRYP PFNGLGETQUERYBUFFEROBJECTUI64VPROC) (GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
typedef void (APIENTRYP PFNGLGETQUERYBUFFEROBJECTUIVPROC) (GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
typedef void (APIENTRYP PFNGLMEMORYBARRIERBYREGIONPROC) (GLbitfield barriers);
typedef void (APIENTRYP PFNGLGETTEXTURESUBIMAGEPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
typedef void (APIENTRYP PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels);
typedef GLenum (APIENTRYP PFNGLGETGRAPHICSRESETSTATUSPROC) (void);
typedef void (APIENTRYP PFNGLGETNCOMPRESSEDTEXIMAGEPROC) (GLenum target, GLint lod, GLsizei bufSize, void *pixels);
typedef void (APIENTRYP PFNGLGETNTEXIMAGEPROC) (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
typedef void (APIENTRYP PFNGLGETNUNIFORMDVPROC) (GLuint program, GLint location, GLsizei bufSize, GLdouble *params);
typedef void (APIENTRYP PFNGLGETNUNIFORMFVPROC) (GLuint program, GLint location, GLsizei bufSize, GLfloat *params);
typedef void (APIENTRYP PFNGLGETNUNIFORMIVPROC) (GLuint program, GLint location, GLsizei bufSize, GLint *params);
typedef void (APIENTRYP PFNGLGETNUNIFORMUIVPROC) (GLuint program, GLint location, GLsizei bufSize, GLuint *params);
typedef void (APIENTRYP PFNGLREADNPIXELSPROC) (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data);
typedef void (APIENTRYP PFNGLTEXTUREBARRIERPROC) (void);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glClipControl (GLenum origin, GLenum depth);
GLAPI void APIENTRY glCreateTransformFeedbacks (GLsizei n, GLuint *ids);
GLAPI void APIENTRY glTransformFeedbackBufferBase (GLuint xfb, GLuint index, GLuint buffer);
GLAPI void APIENTRY glTransformFeedbackBufferRange (GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
GLAPI void APIENTRY glGetTransformFeedbackiv (GLuint xfb, GLenum pname, GLint *param);
GLAPI void APIENTRY glGetTransformFeedbacki_v (GLuint xfb, GLenum pname, GLuint index, GLint *param);
GLAPI void APIENTRY glGetTransformFeedbacki64_v (GLuint xfb, GLenum pname, GLuint index, GLint64 *param);
GLAPI void APIENTRY glCreateBuffers (GLsizei n, GLuint *buffers);
GLAPI void APIENTRY glNamedBufferStorage (GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags);
GLAPI void APIENTRY glNamedBufferData (GLuint buffer, GLsizeiptr size, const void *data, GLenum usage);
GLAPI void APIENTRY glNamedBufferSubData (GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data);
GLAPI void APIENTRY glCopyNamedBufferSubData (GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
GLAPI void APIENTRY glClearNamedBufferData (GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data);
GLAPI void APIENTRY glClearNamedBufferSubData (GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
GLAPI void *APIENTRY glMapNamedBuffer (GLuint buffer, GLenum access);
GLAPI void *APIENTRY glMapNamedBufferRange (GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
GLAPI GLboolean APIENTRY glUnmapNamedBuffer (GLuint buffer);
GLAPI void APIENTRY glFlushMappedNamedBufferRange (GLuint buffer, GLintptr offset, GLsizeiptr length);
GLAPI void APIENTRY glGetNamedBufferParameteriv (GLuint buffer, GLenum pname, GLint *params);
GLAPI void APIENTRY glGetNamedBufferParameteri64v (GLuint buffer, GLenum pname, GLint64 *params);
GLAPI void APIENTRY glGetNamedBufferPointerv (GLuint buffer, GLenum pname, void **params);
GLAPI void APIENTRY glGetNamedBufferSubData (GLuint buffer, GLintptr offset, GLsizeiptr size, void *data);
GLAPI void APIENTRY glCreateFramebuffers (GLsizei n, GLuint *framebuffers);
GLAPI void APIENTRY glNamedFramebufferRenderbuffer (GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
GLAPI void APIENTRY glNamedFramebufferParameteri (GLuint framebuffer, GLenum pname, GLint param);
GLAPI void APIENTRY glNamedFramebufferTexture (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
GLAPI void APIENTRY glNamedFramebufferTextureLayer (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
GLAPI void APIENTRY glNamedFramebufferDrawBuffer (GLuint framebuffer, GLenum buf);
GLAPI void APIENTRY glNamedFramebufferDrawBuffers (GLuint framebuffer, GLsizei n, const GLenum *bufs);
GLAPI void APIENTRY glNamedFramebufferReadBuffer (GLuint framebuffer, GLenum src);
GLAPI void APIENTRY glInvalidateNamedFramebufferData (GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments);
GLAPI void APIENTRY glInvalidateNamedFramebufferSubData (GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI void APIENTRY glClearNamedFramebufferiv (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint *value);
GLAPI void APIENTRY glClearNamedFramebufferuiv (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint *value);
GLAPI void APIENTRY glClearNamedFramebufferfv (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat *value);
GLAPI void APIENTRY glClearNamedFramebufferfi (GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
GLAPI void APIENTRY glBlitNamedFramebuffer (GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
GLAPI GLenum APIENTRY glCheckNamedFramebufferStatus (GLuint framebuffer, GLenum target);
GLAPI void APIENTRY glGetNamedFramebufferParameteriv (GLuint framebuffer, GLenum pname, GLint *param);
GLAPI void APIENTRY glGetNamedFramebufferAttachmentParameteriv (GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params);
GLAPI void APIENTRY glCreateRenderbuffers (GLsizei n, GLuint *renderbuffers);
GLAPI void APIENTRY glNamedRenderbufferStorage (GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
GLAPI void APIENTRY glNamedRenderbufferStorageMultisample (GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
GLAPI void APIENTRY glGetNamedRenderbufferParameteriv (GLuint renderbuffer, GLenum pname, GLint *params);
GLAPI void APIENTRY glCreateTextures (GLenum target, GLsizei n, GLuint *textures);
GLAPI void APIENTRY glTextureBuffer (GLuint texture, GLenum internalformat, GLuint buffer);
GLAPI void APIENTRY glTextureBufferRange (GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
GLAPI void APIENTRY glTextureStorage1D (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width);
GLAPI void APIENTRY glTextureStorage2D (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
GLAPI void APIENTRY glTextureStorage3D (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
GLAPI void APIENTRY glTextureStorage2DMultisample (GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
GLAPI void APIENTRY glTextureStorage3DMultisample (GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
GLAPI void APIENTRY glTextureSubImage1D (GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
GLAPI void APIENTRY glTextureSubImage2D (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
GLAPI void APIENTRY glTextureSubImage3D (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
GLAPI void APIENTRY glCompressedTextureSubImage1D (GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);
GLAPI void APIENTRY glCompressedTextureSubImage2D (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
GLAPI void APIENTRY glCompressedTextureSubImage3D (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
GLAPI void APIENTRY glCopyTextureSubImage1D (GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
GLAPI void APIENTRY glCopyTextureSubImage2D (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI void APIENTRY glCopyTextureSubImage3D (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI void APIENTRY glTextureParameterf (GLuint texture, GLenum pname, GLfloat param);
GLAPI void APIENTRY glTextureParameterfv (GLuint texture, GLenum pname, const GLfloat *param);
GLAPI void APIENTRY glTextureParameteri (GLuint texture, GLenum pname, GLint param);
GLAPI void APIENTRY glTextureParameterIiv (GLuint texture, GLenum pname, const GLint *params);
GLAPI void APIENTRY glTextureParameterIuiv (GLuint texture, GLenum pname, const GLuint *params);
GLAPI void APIENTRY glTextureParameteriv (GLuint texture, GLenum pname, const GLint *param);
GLAPI void APIENTRY glGenerateTextureMipmap (GLuint texture);
GLAPI void APIENTRY glBindTextureUnit (GLuint unit, GLuint texture);
GLAPI void APIENTRY glGetTextureImage (GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
GLAPI void APIENTRY glGetCompressedTextureImage (GLuint texture, GLint level, GLsizei bufSize, void *pixels);
GLAPI void APIENTRY glGetTextureLevelParameterfv (GLuint texture, GLint level, GLenum pname, GLfloat *params);
GLAPI void APIENTRY glGetTextureLevelParameteriv (GLuint texture, GLint level, GLenum pname, GLint *params);
GLAPI void APIENTRY glGetTextureParameterfv (GLuint texture, GLenum pname, GLfloat *params);
GLAPI void APIENTRY glGetTextureParameterIiv (GLuint texture, GLenum pname, GLint *params);
GLAPI void APIENTRY glGetTextureParameterIuiv (GLuint texture, GLenum pname, GLuint *params);
GLAPI void APIENTRY glGetTextureParameteriv (GLuint texture, GLenum pname, GLint *params);
GLAPI void APIENTRY glCreateVertexArrays (GLsizei n, GLuint *arrays);
GLAPI void APIENTRY glDisableVertexArrayAttrib (GLuint vaobj, GLuint index);
GLAPI void APIENTRY glEnableVertexArrayAttrib (GLuint vaobj, GLuint index);
GLAPI void APIENTRY glVertexArrayElementBuffer (GLuint vaobj, GLuint buffer);
GLAPI void APIENTRY glVertexArrayVertexBuffer (GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
GLAPI void APIENTRY glVertexArrayVertexBuffers (GLuint vaobj, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides);
GLAPI void APIENTRY glVertexArrayAttribBinding (GLuint vaobj, GLuint attribindex, GLuint bindingindex);
GLAPI void APIENTRY glVertexArrayAttribFormat (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
GLAPI void APIENTRY glVertexArrayAttribIFormat (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
GLAPI void APIENTRY glVertexArrayAttribLFormat (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
GLAPI void APIENTRY glVertexArrayBindingDivisor (GLuint vaobj, GLuint bindingindex, GLuint divisor);
GLAPI void APIENTRY glGetVertexArrayiv (GLuint vaobj, GLenum pname, GLint *param);
GLAPI void APIENTRY glGetVertexArrayIndexediv (GLuint vaobj, GLuint index, GLenum pname, GLint *param);
GLAPI void APIENTRY glGetVertexArrayIndexed64iv (GLuint vaobj, GLuint index, GLenum pname, GLint64 *param);
GLAPI void APIENTRY glCreateSamplers (GLsizei n, GLuint *samplers);
GLAPI void APIENTRY glCreateProgramPipelines (GLsizei n, GLuint *pipelines);
GLAPI void APIENTRY glCreateQueries (GLenum target, GLsizei n, GLuint *ids);
GLAPI void APIENTRY glGetQueryBufferObjecti64v (GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
GLAPI void APIENTRY glGetQueryBufferObjectiv (GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
GLAPI void APIENTRY glGetQueryBufferObjectui64v (GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
GLAPI void APIENTRY glGetQueryBufferObjectuiv (GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
GLAPI void APIENTRY glMemoryBarrierByRegion (GLbitfield barriers);
GLAPI void APIENTRY glGetTextureSubImage (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
GLAPI void APIENTRY glGetCompressedTextureSubImage (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels);
GLAPI GLenum APIENTRY glGetGraphicsResetStatus (void);
GLAPI void APIENTRY glGetnCompressedTexImage (GLenum target, GLint lod, GLsizei bufSize, void *pixels);
GLAPI void APIENTRY glGetnTexImage (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
GLAPI void APIENTRY glGetnUniformdv (GLuint program, GLint location, GLsizei bufSize, GLdouble *params);
GLAPI void APIENTRY glGetnUniformfv (GLuint program, GLint location, GLsizei bufSize, GLfloat *params);
GLAPI void APIENTRY glGetnUniformiv (GLuint program, GLint location, GLsizei bufSize, GLint *params);
GLAPI void APIENTRY glGetnUniformuiv (GLuint program, GLint location, GLsizei bufSize, GLuint *params);
GLAPI void APIENTRY glReadnPixels (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data);
GLAPI void APIENTRY glTextureBarrier (void);
#endif
#endif /* GL_VERSION_4_5 */

#ifndef GL_VERSION_4_6
#define GL_VERSION_4_6 1
#define GL_SHADER_BINARY_FORMAT_SPIR_V    0x9551
#define GL_SPIR_V_BINARY                  0x9552
#define GL_PARAMETER_BUFFER               0x80EE
#define GL_PARAMETER_BUFFER_BINDING       0x80EF
#define GL_CONTEXT_FLAG_NO_ERROR_BIT      0x00000008
#define GL_VERTICES_SUBMITTED             0x82EE
#define GL_PRIMITIVES_SUBMITTED           0x82EF
#define GL_VERTEX_SHADER_INVOCATIONS      0x82F0
#define GL_TESS_CONTROL_SHADER_PATCHES    0x82F1
#define GL_TESS_EVALUATION_SHADER_INVOCATIONS 0x82F2
#define GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED 0x82F3
#define GL_FRAGMENT_SHADER_INVOCATIONS    0x82F4
#define GL_COMPUTE_SHADER_INVOCATIONS     0x82F5
#define GL_CLIPPING_INPUT_PRIMITIVES      0x82F6
#define GL_CLIPPING_OUTPUT_PRIMITIVES     0x82F7
#define GL_POLYGON_OFFSET_CLAMP           0x8E1B
#define GL_SPIR_V_EXTENSIONS              0x9553
#define GL_NUM_SPIR_V_EXTENSIONS          0x9554
#define GL_TEXTURE_MAX_ANISOTROPY         0x84FE
#define GL_MAX_TEXTURE_MAX_ANISOTROPY     0x84FF
#define GL_TRANSFORM_FEEDBACK_OVERFLOW    0x82EC
#define GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW 0x82ED
typedef void (APIENTRYP PFNGLSPECIALIZESHADERPROC) (GLuint shader, const GLchar *pEntryPoint, GLuint numSpecializationConstants, const GLuint *pConstantIndex, const GLuint *pConstantValue);
typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC) (GLenum mode, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC) (GLenum mode, GLenum type, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
typedef void (APIENTRYP PFNGLPOLYGONOFFSETCLAMPPROC) (GLfloat factor, GLfloat units, GLfloat clamp);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glSpecializeShader (GLuint shader, const GLchar *pEntryPoint, GLuint numSpecializationConstants, const GLuint *pConstantIndex, const GLuint *pConstantValue);
GLAPI void APIENTRY glMultiDrawArraysIndirectCount (GLenum mode, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
GLAPI void APIENTRY glMultiDrawElementsIndirectCount (GLenum mode, GLenum type, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
GLAPI void APIENTRY glPolygonOffsetClamp (GLfloat factor, GLfloat units, GLfloat clamp);
#endif
#endif /* GL_VERSION_4_6 */

#ifndef GL_ARB_ES2_compatibility
#define GL_ARB_ES2_compatibility 1
#endif /* GL_ARB_ES2_compatibility */

#ifndef GL_ARB_ES3_1_compatibility
#define GL_ARB_ES3_1_compatibility 1
#endif /* GL_ARB_ES3_1_compatibility */

#ifndef GL_ARB_ES3_2_compatibility
#define GL_ARB_ES3_2_compatibility 1
#define GL_PRIMITIVE_BOUNDING_BOX_ARB     0x92BE
#define GL_MULTISAMPLE_LINE_WIDTH_RANGE_ARB 0x9381
#define GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY_ARB 0x9382
typedef void (APIENTRYP PFNGLPRIMITIVEBOUNDINGBOXARBPROC) (GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glPrimitiveBoundingBoxARB (GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW);
#endif
#endif /* GL_ARB_ES3_2_compatibility */

#ifndef GL_ARB_ES3_compatibility
#define GL_ARB_ES3_compatibility 1
#endif /* GL_ARB_ES3_compatibility */

#ifndef GL_ARB_arrays_of_arrays
#define GL_ARB_arrays_of_arrays 1
#endif /* GL_ARB_arrays_of_arrays */

#ifndef GL_ARB_base_instance
#define GL_ARB_base_instance 1
#endif /* GL_ARB_base_instance */

#ifndef GL_ARB_bindless_texture
#define GL_ARB_bindless_texture 1
typedef uint64_t GLuint64EXT;
#define GL_UNSIGNED_INT64_ARB             0x140F
typedef GLuint64 (APIENTRYP PFNGLGETTEXTUREHANDLEARBPROC) (GLuint texture);
typedef GLuint64 (APIENTRYP PFNGLGETTEXTURESAMPLERHANDLEARBPROC) (GLuint texture, GLuint sampler);
typedef void (APIENTRYP PFNGLMAKETEXTUREHANDLERESIDENTARBPROC) (GLuint64 handle);
typedef void (APIENTRYP PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC) (GLuint64 handle);
typedef GLuint64 (APIENTRYP PFNGLGETIMAGEHANDLEARBPROC) (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format);
typedef void (APIENTRYP PFNGLMAKEIMAGEHANDLERESIDENTARBPROC) (GLuint64 handle, GLenum access);
typedef void (APIENTRYP PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC) (GLuint64 handle);
typedef void (APIENTRYP PFNGLUNIFORMHANDLEUI64ARBPROC) (GLint location, GLuint64 value);
typedef void (APIENTRYP PFNGLUNIFORMHANDLEUI64VARBPROC) (GLint location, GLsizei count, const GLuint64 *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC) (GLuint program, GLint location, GLuint64 value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC) (GLuint program, GLint location, GLsizei count, const GLuint64 *values);
typedef GLboolean (APIENTRYP PFNGLISTEXTUREHANDLERESIDENTARBPROC) (GLuint64 handle);
typedef GLboolean (APIENTRYP PFNGLISIMAGEHANDLERESIDENTARBPROC) (GLuint64 handle);
typedef void (APIENTRYP PFNGLVERTEXATTRIBL1UI64ARBPROC) (GLuint index, GLuint64EXT x);
typedef void (APIENTRYP PFNGLVERTEXATTRIBL1UI64VARBPROC) (GLuint index, const GLuint64EXT *v);
typedef void (APIENTRYP PFNGLGETVERTEXATTRIBLUI64VARBPROC) (GLuint index, GLenum pname, GLuint64EXT *params);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI GLuint64 APIENTRY glGetTextureHandleARB (GLuint texture);
GLAPI GLuint64 APIENTRY glGetTextureSamplerHandleARB (GLuint texture, GLuint sampler);
GLAPI void APIENTRY glMakeTextureHandleResidentARB (GLuint64 handle);
GLAPI void APIENTRY glMakeTextureHandleNonResidentARB (GLuint64 handle);
GLAPI GLuint64 APIENTRY glGetImageHandleARB (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format);
GLAPI void APIENTRY glMakeImageHandleResidentARB (GLuint64 handle, GLenum access);
GLAPI void APIENTRY glMakeImageHandleNonResidentARB (GLuint64 handle);
GLAPI void APIENTRY glUniformHandleui64ARB (GLint location, GLuint64 value);
GLAPI void APIENTRY glUniformHandleui64vARB (GLint location, GLsizei count, const GLuint64 *value);
GLAPI void APIENTRY glProgramUniformHandleui64ARB (GLuint program, GLint location, GLuint64 value);
GLAPI void APIENTRY glProgramUniformHandleui64vARB (GLuint program, GLint location, GLsizei count, const GLuint64 *values);
GLAPI GLboolean APIENTRY glIsTextureHandleResidentARB (GLuint64 handle);
GLAPI GLboolean APIENTRY glIsImageHandleResidentARB (GLuint64 handle);
GLAPI void APIENTRY glVertexAttribL1ui64ARB (GLuint index, GLuint64EXT x);
GLAPI void APIENTRY glVertexAttribL1ui64vARB (GLuint index, const GLuint64EXT *v);
GLAPI void APIENTRY glGetVertexAttribLui64vARB (GLuint index, GLenum pname, GLuint64EXT *params);
#endif
#endif /* GL_ARB_bindless_texture */

#ifndef GL_ARB_blend_func_extended
#define GL_ARB_blend_func_extended 1
#endif /* GL_ARB_blend_func_extended */

#ifndef GL_ARB_buffer_storage
#define GL_ARB_buffer_storage 1
#endif /* GL_ARB_buffer_storage */

#ifndef GL_ARB_cl_event
#define GL_ARB_cl_event 1
struct _cl_context;
struct _cl_event;
#define GL_SYNC_CL_EVENT_ARB              0x8240
#define GL_SYNC_CL_EVENT_COMPLETE_ARB     0x8241
typedef GLsync (APIENTRYP PFNGLCREATESYNCFROMCLEVENTARBPROC) (struct _cl_context *context, struct _cl_event *event, GLbitfield flags);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI GLsync APIENTRY glCreateSyncFromCLeventARB (struct _cl_context *context, struct _cl_event *event, GLbitfield flags);
#endif
#endif /* GL_ARB_cl_event */

#ifndef GL_ARB_clear_buffer_object
#define GL_ARB_clear_buffer_object 1
#endif /* GL_ARB_clear_buffer_object */

#ifndef GL_ARB_clear_texture
#define GL_ARB_clear_texture 1
#endif /* GL_ARB_clear_texture */

#ifndef GL_ARB_clip_control
#define GL_ARB_clip_control 1
#endif /* GL_ARB_clip_control */

#ifndef GL_ARB_compressed_texture_pixel_storage
#define GL_ARB_compressed_texture_pixel_storage 1
#endif /* GL_ARB_compressed_texture_pixel_storage */

#ifndef GL_ARB_compute_shader
#define GL_ARB_compute_shader 1
#endif /* GL_ARB_compute_shader */

#ifndef GL_ARB_compute_variable_group_size
#define GL_ARB_compute_variable_group_size 1
#define GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB 0x9344
#define GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB 0x90EB
#define GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB 0x9345
#define GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB 0x91BF
typedef void (APIENTRYP PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC) (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glDispatchComputeGroupSizeARB (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z);
#endif
#endif /* GL_ARB_compute_variable_group_size */

#ifndef GL_ARB_conditional_render_inverted
#define GL_ARB_conditional_render_inverted 1
#endif /* GL_ARB_conditional_render_inverted */

#ifndef GL_ARB_conservative_depth
#define GL_ARB_conservative_depth 1
#endif /* GL_ARB_conservative_depth */

#ifndef GL_ARB_copy_buffer
#define GL_ARB_copy_buffer 1
#endif /* GL_ARB_copy_buffer */

#ifndef GL_ARB_copy_image
#define GL_ARB_copy_image 1
#endif /* GL_ARB_copy_image */

#ifndef GL_ARB_cull_distance
#define GL_ARB_cull_distance 1
#endif /* GL_ARB_cull_distance */

#ifndef GL_ARB_debug_output
#define GL_ARB_debug_output 1
typedef void (APIENTRY  *GLDEBUGPROCARB)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
#define GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB   0x8242
#define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB 0x8243
#define GL_DEBUG_CALLBACK_FUNCTION_ARB    0x8244
#define GL_DEBUG_CALLBACK_USER_PARAM_ARB  0x8245
#define GL_DEBUG_SOURCE_API_ARB           0x8246
#define GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB 0x8247
#define GL_DEBUG_SOURCE_SHADER_COMPILER_ARB 0x8248
#define GL_DEBUG_SOURCE_THIRD_PARTY_ARB   0x8249
#define GL_DEBUG_SOURCE_APPLICATION_ARB   0x824A
#define GL_DEBUG_SOURCE_OTHER_ARB         0x824B
#define GL_DEBUG_TYPE_ERROR_ARB           0x824C
#define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB 0x824D
#define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB 0x824E
#define GL_DEBUG_TYPE_PORTABILITY_ARB     0x824F
#define GL_DEBUG_TYPE_PERFORMANCE_ARB     0x8250
#define GL_DEBUG_TYPE_OTHER_ARB           0x8251
#define GL_MAX_DEBUG_MESSAGE_LENGTH_ARB   0x9143
#define GL_MAX_DEBUG_LOGGED_MESSAGES_ARB  0x9144
#define GL_DEBUG_LOGGED_MESSAGES_ARB      0x9145
#define GL_DEBUG_SEVERITY_HIGH_ARB        0x9146
#define GL_DEBUG_SEVERITY_MEDIUM_ARB      0x9147
#define GL_DEBUG_SEVERITY_LOW_ARB         0x9148
typedef void (APIENTRYP PFNGLDEBUGMESSAGECONTROLARBPROC) (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
typedef void (APIENTRYP PFNGLDEBUGMESSAGEINSERTARBPROC) (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
typedef void (APIENTRYP PFNGLDEBUGMESSAGECALLBACKARBPROC) (GLDEBUGPROCARB callback, const void *userParam);
typedef GLuint (APIENTRYP PFNGLGETDEBUGMESSAGELOGARBPROC) (GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glDebugMessageControlARB (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
GLAPI void APIENTRY glDebugMessageInsertARB (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
GLAPI void APIENTRY glDebugMessageCallbackARB (GLDEBUGPROCARB callback, const void *userParam);
GLAPI GLuint APIENTRY glGetDebugMessageLogARB (GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
#endif
#endif /* GL_ARB_debug_output */

#ifndef GL_ARB_depth_buffer_float
#define GL_ARB_depth_buffer_float 1
#endif /* GL_ARB_depth_buffer_float */

#ifndef GL_ARB_depth_clamp
#define GL_ARB_depth_clamp 1
#endif /* GL_ARB_depth_clamp */

#ifndef GL_ARB_derivative_control
#define GL_ARB_derivative_control 1
#endif /* GL_ARB_derivative_control */

#ifndef GL_ARB_direct_state_access
#define GL_ARB_direct_state_access 1
#endif /* GL_ARB_direct_state_access */

#ifndef GL_ARB_draw_buffers_blend
#define GL_ARB_draw_buffers_blend 1
typedef void (APIENTRYP PFNGLBLENDEQUATIONIARBPROC) (GLuint buf, GLenum mode);
typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEIARBPROC) (GLuint buf, GLenum modeRGB, GLenum modeAlpha);
typedef void (APIENTRYP PFNGLBLENDFUNCIARBPROC) (GLuint buf, GLenum src, GLenum dst);
typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEIARBPROC) (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glBlendEquationiARB (GLuint buf, GLenum mode);
GLAPI void APIENTRY glBlendEquationSeparateiARB (GLuint buf, GLenum modeRGB, GLenum modeAlpha);
GLAPI void APIENTRY glBlendFunciARB (GLuint buf, GLenum src, GLenum dst);
GLAPI void APIENTRY glBlendFuncSeparateiARB (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
#endif
#endif /* GL_ARB_draw_buffers_blend */

#ifndef GL_ARB_draw_elements_base_vertex
#define GL_ARB_draw_elements_base_vertex 1
#endif /* GL_ARB_draw_elements_base_vertex */

#ifndef GL_ARB_draw_indirect
#define GL_ARB_draw_indirect 1
#endif /* GL_ARB_draw_indirect */

#ifndef GL_ARB_draw_instanced
#define GL_ARB_draw_instanced 1
typedef void (APIENTRYP PFNGLDRAWARRAYSINSTANCEDARBPROC) (GLenum mode, GLint first, GLsizei count, GLsizei primcount);
typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDARBPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glDrawArraysInstancedARB (GLenum mode, GLint first, GLsizei count, GLsizei primcount);
GLAPI void APIENTRY glDrawElementsInstancedARB (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount);
#endif
#endif /* GL_ARB_draw_instanced */

#ifndef GL_ARB_enhanced_layouts
#define GL_ARB_enhanced_layouts 1
#endif /* GL_ARB_enhanced_layouts */

#ifndef GL_ARB_explicit_attrib_location
#define GL_ARB_explicit_attrib_location 1
#endif /* GL_ARB_explicit_attrib_location */

#ifndef GL_ARB_explicit_uniform_location
#define GL_ARB_explicit_uniform_location 1
#endif /* GL_ARB_explicit_uniform_location */

#ifndef GL_ARB_fragment_coord_conventions
#define GL_ARB_fragment_coord_conventions 1
#endif /* GL_ARB_fragment_coord_conventions */

#ifndef GL_ARB_fragment_layer_viewport
#define GL_ARB_fragment_layer_viewport 1
#endif /* GL_ARB_fragment_layer_viewport */

#ifndef GL_ARB_fragment_shader_interlock
#define GL_ARB_fragment_shader_interlock 1
#endif /* GL_ARB_fragment_shader_interlock */

#ifndef GL_ARB_framebuffer_no_attachments
#define GL_ARB_framebuffer_no_attachments 1
#endif /* GL_ARB_framebuffer_no_attachments */

#ifndef GL_ARB_framebuffer_object
#define GL_ARB_framebuffer_object 1
#endif /* GL_ARB_framebuffer_object */

#ifndef GL_ARB_framebuffer_sRGB
#define GL_ARB_framebuffer_sRGB 1
#endif /* GL_ARB_framebuffer_sRGB */

#ifndef GL_ARB_geometry_shader4
#define GL_ARB_geometry_shader4 1
#define GL_LINES_ADJACENCY_ARB            0x000A
#define GL_LINE_STRIP_ADJACENCY_ARB       0x000B
#define GL_TRIANGLES_ADJACENCY_ARB        0x000C
#define GL_TRIANGLE_STRIP_ADJACENCY_ARB   0x000D
#define GL_PROGRAM_POINT_SIZE_ARB         0x8642
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB 0x8C29
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB 0x8DA7
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB 0x8DA8
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB 0x8DA9
#define GL_GEOMETRY_SHADER_ARB            0x8DD9
#define GL_GEOMETRY_VERTICES_OUT_ARB      0x8DDA
#define GL_GEOMETRY_INPUT_TYPE_ARB        0x8DDB
#define GL_GEOMETRY_OUTPUT_TYPE_ARB       0x8DDC
#define GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB 0x8DDD
#define GL_MAX_VERTEX_VARYING_COMPONENTS_ARB 0x8DDE
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB 0x8DDF
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB 0x8DE0
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB 0x8DE1
typedef void (APIENTRYP PFNGLPROGRAMPARAMETERIARBPROC) (GLuint program, GLenum pname, GLint value);
typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTUREARBPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level);
typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURELAYERARBPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTUREFACEARBPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glProgramParameteriARB (GLuint program, GLenum pname, GLint value);
GLAPI void APIENTRY glFramebufferTextureARB (GLenum target, GLenum attachment, GLuint texture, GLint level);
GLAPI void APIENTRY glFramebufferTextureLayerARB (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
GLAPI void APIENTRY glFramebufferTextureFaceARB (GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
#endif
#endif /* GL_ARB_geometry_shader4 */

#ifndef GL_ARB_get_program_binary
#define GL_ARB_get_program_binary 1
#endif /* GL_ARB_get_program_binary */

#ifndef GL_ARB_get_texture_sub_image
#define GL_ARB_get_texture_sub_image 1
#endif /* GL_ARB_get_texture_sub_image */

#ifndef GL_ARB_gl_spirv
#define GL_ARB_gl_spirv 1
#define GL_SHADER_BINARY_FORMAT_SPIR_V_ARB 0x9551
#define GL_SPIR_V_BINARY_ARB              0x9552
typedef void (APIENTRYP PFNGLSPECIALIZESHADERARBPROC) (GLuint shader, const GLchar *pEntryPoint, GLuint numSpecializationConstants, const GLuint *pConstantIndex, const GLuint *pConstantValue);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glSpecializeShaderARB (GLuint shader, const GLchar *pEntryPoint, GLuint numSpecializationConstants, const GLuint *pConstantIndex, const GLuint *pConstantValue);
#endif
#endif /* GL_ARB_gl_spirv */

#ifndef GL_ARB_gpu_shader5
#define GL_ARB_gpu_shader5 1
#endif /* GL_ARB_gpu_shader5 */

#ifndef GL_ARB_gpu_shader_fp64
#define GL_ARB_gpu_shader_fp64 1
#endif /* GL_ARB_gpu_shader_fp64 */

#ifndef GL_ARB_gpu_shader_int64
#define GL_ARB_gpu_shader_int64 1
#define GL_INT64_ARB                      0x140E
#define GL_INT64_VEC2_ARB                 0x8FE9
#define GL_INT64_VEC3_ARB                 0x8FEA
#define GL_INT64_VEC4_ARB                 0x8FEB
#define GL_UNSIGNED_INT64_VEC2_ARB        0x8FF5
#define GL_UNSIGNED_INT64_VEC3_ARB        0x8FF6
#define GL_UNSIGNED_INT64_VEC4_ARB        0x8FF7
typedef void (APIENTRYP PFNGLUNIFORM1I64ARBPROC) (GLint location, GLint64 x);
typedef void (APIENTRYP PFNGLUNIFORM2I64ARBPROC) (GLint location, GLint64 x, GLint64 y);
typedef void (APIENTRYP PFNGLUNIFORM3I64ARBPROC) (GLint location, GLint64 x, GLint64 y, GLint64 z);
typedef void (APIENTRYP PFNGLUNIFORM4I64ARBPROC) (GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w);
typedef void (APIENTRYP PFNGLUNIFORM1I64VARBPROC) (GLint location, GLsizei count, const GLint64 *value);
typedef void (APIENTRYP PFNGLUNIFORM2I64VARBPROC) (GLint location, GLsizei count, const GLint64 *value);
typedef void (APIENTRYP PFNGLUNIFORM3I64VARBPROC) (GLint location, GLsizei count, const GLint64 *value);
typedef void (APIENTRYP PFNGLUNIFORM4I64VARBPROC) (GLint location, GLsizei count, const GLint64 *value);
typedef void (APIENTRYP PFNGLUNIFORM1UI64ARBPROC) (GLint location, GLuint64 x);
typedef void (APIENTRYP PFNGLUNIFORM2UI64ARBPROC) (GLint location, GLuint64 x, GLuint64 y);
typedef void (APIENTRYP PFNGLUNIFORM3UI64ARBPROC) (GLint location, GLuint64 x, GLuint64 y, GLuint64 z);
typedef void (APIENTRYP PFNGLUNIFORM4UI64ARBPROC) (GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w);
typedef void (APIENTRYP PFNGLUNIFORM1UI64VARBPROC) (GLint location, GLsizei count, const GLuint64 *value);
typedef void (APIENTRYP PFNGLUNIFORM2UI64VARBPROC) (GLint location, GLsizei count, const GLuint64 *value);
typedef void (APIENTRYP PFNGLUNIFORM3UI64VARBPROC) (GLint location, GLsizei count, const GLuint64 *value);
typedef void (APIENTRYP PFNGLUNIFORM4UI64VARBPROC) (GLint location, GLsizei count, const GLuint64 *value);
typedef void (APIENTRYP PFNGLGETUNIFORMI64VARBPROC) (GLuint program, GLint location, GLint64 *params);
typedef void (APIENTRYP PFNGLGETUNIFORMUI64VARBPROC) (GLuint program, GLint location, GLuint64 *params);
typedef void (APIENTRYP PFNGLGETNUNIFORMI64VARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLint64 *params);
typedef void (APIENTRYP PFNGLGETNUNIFORMUI64VARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLuint64 *params);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1I64ARBPROC) (GLuint program, GLint location, GLint64 x);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2I64ARBPROC) (GLuint program, GLint location, GLint64 x, GLint64 y);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3I64ARBPROC) (GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4I64ARBPROC) (GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1I64VARBPROC) (GLuint program, GLint location, GLsizei count, const GLint64 *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2I64VARBPROC) (GLuint program, GLint location, GLsizei count, const GLint64 *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3I64VARBPROC) (GLuint program, GLint location, GLsizei count, const GLint64 *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4I64VARBPROC) (GLuint program, GLint location, GLsizei count, const GLint64 *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UI64ARBPROC) (GLuint program, GLint location, GLuint64 x);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UI64ARBPROC) (GLuint program, GLint location, GLuint64 x, GLuint64 y);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UI64ARBPROC) (GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UI64ARBPROC) (GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UI64VARBPROC) (GLuint program, GLint location, GLsizei count, const GLuint64 *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UI64VARBPROC) (GLuint program, GLint location, GLsizei count, const GLuint64 *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UI64VARBPROC) (GLuint program, GLint location, GLsizei count, const GLuint64 *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UI64VARBPROC) (GLuint program, GLint location, GLsizei count, const GLuint64 *value);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glUniform1i64ARB (GLint location, GLint64 x);
GLAPI void APIENTRY glUniform2i64ARB (GLint location, GLint64 x, GLint64 y);
GLAPI void APIENTRY glUniform3i64ARB (GLint location, GLint64 x, GLint64 y, GLint64 z);
GLAPI void APIENTRY glUniform4i64ARB (GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w);
GLAPI void APIENTRY glUniform1i64vARB (GLint location, GLsizei count, const GLint64 *value);
GLAPI void APIENTRY glUniform2i64vARB (GLint location, GLsizei count, const GLint64 *value);
GLAPI void APIENTRY glUniform3i64vARB (GLint location, GLsizei count, const GLint64 *value);
GLAPI void APIENTRY glUniform4i64vARB (GLint location, GLsizei count, const GLint64 *value);
GLAPI void APIENTRY glUniform1ui64ARB (GLint location, GLuint64 x);
GLAPI void APIENTRY glUniform2ui64ARB (GLint location, GLuint64 x, GLuint64 y);
GLAPI void APIENTRY glUniform3ui64ARB (GLint location, GLuint64 x, GLuint64 y, GLuint64 z);
GLAPI void APIENTRY glUniform4ui64ARB (GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w);
GLAPI void APIENTRY glUniform1ui64vARB (GLint location, GLsizei count, const GLuint64 *value);
GLAPI void APIENTRY glUniform2ui64vARB (GLint location, GLsizei count, const GLuint64 *value);
GLAPI void APIENTRY glUniform3ui64vARB (GLint location, GLsizei count, const GLuint64 *value);
GLAPI void APIENTRY glUniform4ui64vARB (GLint location, GLsizei count, const GLuint64 *value);
GLAPI void APIENTRY glGetUniformi64vARB (GLuint program, GLint location, GLint64 *params);
GLAPI void APIENTRY glGetUniformui64vARB (GLuint program, GLint location, GLuint64 *params);
GLAPI void APIENTRY glGetnUniformi64vARB (GLuint program, GLint location, GLsizei bufSize, GLint64 *params);
GLAPI void APIENTRY glGetnUniformui64vARB (GLuint program, GLint location, GLsizei bufSize, GLuint64 *params);
GLAPI void APIENTRY glProgramUniform1i64ARB (GLuint program, GLint location, GLint64 x);
GLAPI void APIENTRY glProgramUniform2i64ARB (GLuint program, GLint location, GLint64 x, GLint64 y);
GLAPI void APIENTRY glProgramUniform3i64ARB (GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z);
GLAPI void APIENTRY glProgramUniform4i64ARB (GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w);
GLAPI void APIENTRY glProgramUniform1i64vARB (GLuint program, GLint location, GLsizei count, const GLint64 *value);
GLAPI void APIENTRY glProgramUniform2i64vARB (GLuint program, GLint location, GLsizei count, const GLint64 *value);
GLAPI void APIENTRY glProgramUniform3i64vARB (GLuint program, GLint location, GLsizei count, const GLint64 *value);
GLAPI void APIENTRY glProgramUniform4i64vARB (GLuint program, GLint location, GLsizei count, const GLint64 *value);
GLAPI void APIENTRY glProgramUniform1ui64ARB (GLuint program, GLint location, GLuint64 x);
GLAPI void APIENTRY glProgramUniform2ui64ARB (GLuint program, GLint location, GLuint64 x, GLuint64 y);
GLAPI void APIENTRY glProgramUniform3ui64ARB (GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z);
GLAPI void APIENTRY glProgramUniform4ui64ARB (GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w);
GLAPI void APIENTRY glProgramUniform1ui64vARB (GLuint program, GLint location, GLsizei count, const GLuint64 *value);
GLAPI void APIENTRY glProgramUniform2ui64vARB (GLuint program, GLint location, GLsizei count, const GLuint64 *value);
GLAPI void APIENTRY glProgramUniform3ui64vARB (GLuint program, GLint location, GLsizei count, const GLuint64 *value);
GLAPI void APIENTRY glProgramUniform4ui64vARB (GLuint program, GLint location, GLsizei count, const GLuint64 *value);
#endif
#endif /* GL_ARB_gpu_shader_int64 */

#ifndef GL_ARB_half_float_vertex
#define GL_ARB_half_float_vertex 1
#endif /* GL_ARB_half_float_vertex */

#ifndef GL_ARB_imaging
#define GL_ARB_imaging 1
#endif /* GL_ARB_imaging */

#ifndef GL_ARB_indirect_parameters
#define GL_ARB_indirect_parameters 1
#define GL_PARAMETER_BUFFER_ARB           0x80EE
#define GL_PARAMETER_BUFFER_BINDING_ARB   0x80EF
typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC) (GLenum mode, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC) (GLenum mode, GLenum type, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glMultiDrawArraysIndirectCountARB (GLenum mode, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
GLAPI void APIENTRY glMultiDrawElementsIndirectCountARB (GLenum mode, GLenum type, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
#endif
#endif /* GL_ARB_indirect_parameters */

#ifndef GL_ARB_instanced_arrays
#define GL_ARB_instanced_arrays 1
#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB 0x88FE
typedef void (APIENTRYP PFNGLVERTEXATTRIBDIVISORARBPROC) (GLuint index, GLuint divisor);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glVertexAttribDivisorARB (GLuint index, GLuint divisor);
#endif
#endif /* GL_ARB_instanced_arrays */

#ifndef GL_ARB_internalformat_query
#define GL_ARB_internalformat_query 1
#endif /* GL_ARB_internalformat_query */

#ifndef GL_ARB_internalformat_query2
#define GL_ARB_internalformat_query2 1
#define GL_SRGB_DECODE_ARB                0x8299
#endif /* GL_ARB_internalformat_query2 */

#ifndef GL_ARB_invalidate_subdata
#define GL_ARB_invalidate_subdata 1
#endif /* GL_ARB_invalidate_subdata */

#ifndef GL_ARB_map_buffer_alignment
#define GL_ARB_map_buffer_alignment 1
#endif /* GL_ARB_map_buffer_alignment */

#ifndef GL_ARB_map_buffer_range
#define GL_ARB_map_buffer_range 1
#endif /* GL_ARB_map_buffer_range */

#ifndef GL_ARB_multi_bind
#define GL_ARB_multi_bind 1
#endif /* GL_ARB_multi_bind */

#ifndef GL_ARB_multi_draw_indirect
#define GL_ARB_multi_draw_indirect 1
#endif /* GL_ARB_multi_draw_indirect */

#ifndef GL_ARB_occlusion_query2
#define GL_ARB_occlusion_query2 1
#endif /* GL_ARB_occlusion_query2 */

#ifndef GL_ARB_parallel_shader_compile
#define GL_ARB_parallel_shader_compile 1
#define GL_MAX_SHADER_COMPILER_THREADS_ARB 0x91B0
#define GL_COMPLETION_STATUS_ARB          0x91B1
typedef void (APIENTRYP PFNGLMAXSHADERCOMPILERTHREADSARBPROC) (GLuint count);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glMaxShaderCompilerThreadsARB (GLuint count);
#endif
#endif /* GL_ARB_parallel_shader_compile */

#ifndef GL_ARB_pipeline_statistics_query
#define GL_ARB_pipeline_statistics_query 1
#define GL_VERTICES_SUBMITTED_ARB         0x82EE
#define GL_PRIMITIVES_SUBMITTED_ARB       0x82EF
#define GL_VERTEX_SHADER_INVOCATIONS_ARB  0x82F0
#define GL_TESS_CONTROL_SHADER_PATCHES_ARB 0x82F1
#define GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB 0x82F2
#define GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB 0x82F3
#define GL_FRAGMENT_SHADER_INVOCATIONS_ARB 0x82F4
#define GL_COMPUTE_SHADER_INVOCATIONS_ARB 0x82F5
#define GL_CLIPPING_INPUT_PRIMITIVES_ARB  0x82F6
#define GL_CLIPPING_OUTPUT_PRIMITIVES_ARB 0x82F7
#endif /* GL_ARB_pipeline_statistics_query */

#ifndef GL_ARB_pixel_buffer_object
#define GL_ARB_pixel_buffer_object 1
#define GL_PIXEL_PACK_BUFFER_ARB          0x88EB
#define GL_PIXEL_UNPACK_BUFFER_ARB        0x88EC
#define GL_PIXEL_PACK_BUFFER_BINDING_ARB  0x88ED
#define GL_PIXEL_UNPACK_BUFFER_BINDING_ARB 0x88EF
#endif /* GL_ARB_pixel_buffer_object */

#ifndef GL_ARB_polygon_offset_clamp
#define GL_ARB_polygon_offset_clamp 1
#endif /* GL_ARB_polygon_offset_clamp */

#ifndef GL_ARB_post_depth_coverage
#define GL_ARB_post_depth_coverage 1
#endif /* GL_ARB_post_depth_coverage */

#ifndef GL_ARB_program_interface_query
#define GL_ARB_program_interface_query 1
#endif /* GL_ARB_program_interface_query */

#ifndef GL_ARB_provoking_vertex
#define GL_ARB_provoking_vertex 1
#endif /* GL_ARB_provoking_vertex */

#ifndef GL_ARB_query_buffer_object
#define GL_ARB_query_buffer_object 1
#endif /* GL_ARB_query_buffer_object */

#ifndef GL_ARB_robust_buffer_access_behavior
#define GL_ARB_robust_buffer_access_behavior 1
#endif /* GL_ARB_robust_buffer_access_behavior */

#ifndef GL_ARB_robustness
#define GL_ARB_robustness 1
#define GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB 0x00000004
#define GL_LOSE_CONTEXT_ON_RESET_ARB      0x8252
#define GL_GUILTY_CONTEXT_RESET_ARB       0x8253
#define GL_INNOCENT_CONTEXT_RESET_ARB     0x8254
#define GL_UNKNOWN_CONTEXT_RESET_ARB      0x8255
#define GL_RESET_NOTIFICATION_STRATEGY_ARB 0x8256
#define GL_NO_RESET_NOTIFICATION_ARB      0x8261
typedef GLenum (APIENTRYP PFNGLGETGRAPHICSRESETSTATUSARBPROC) (void);
typedef void (APIENTRYP PFNGLGETNTEXIMAGEARBPROC) (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *img);
typedef void (APIENTRYP PFNGLREADNPIXELSARBPROC) (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data);
typedef void (APIENTRYP PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC) (GLenum target, GLint lod, GLsizei bufSize, void *img);
typedef void (APIENTRYP PFNGLGETNUNIFORMFVARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLfloat *params);
typedef void (APIENTRYP PFNGLGETNUNIFORMIVARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLint *params);
typedef void (APIENTRYP PFNGLGETNUNIFORMUIVARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLuint *params);
typedef void (APIENTRYP PFNGLGETNUNIFORMDVARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLdouble *params);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI GLenum APIENTRY glGetGraphicsResetStatusARB (void);
GLAPI void APIENTRY glGetnTexImageARB (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *img);
GLAPI void APIENTRY glReadnPixelsARB (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data);
GLAPI void APIENTRY glGetnCompressedTexImageARB (GLenum target, GLint lod, GLsizei bufSize, void *img);
GLAPI void APIENTRY glGetnUniformfvARB (GLuint program, GLint location, GLsizei bufSize, GLfloat *params);
GLAPI void APIENTRY glGetnUniformivARB (GLuint program, GLint location, GLsizei bufSize, GLint *params);
GLAPI void APIENTRY glGetnUniformuivARB (GLuint program, GLint location, GLsizei bufSize, GLuint *params);
GLAPI void APIENTRY glGetnUniformdvARB (GLuint program, GLint location, GLsizei bufSize, GLdouble *params);
#endif
#endif /* GL_ARB_robustness */

#ifndef GL_ARB_robustness_isolation
#define GL_ARB_robustness_isolation 1
#endif /* GL_ARB_robustness_isolation */

#ifndef GL_ARB_sample_locations
#define GL_ARB_sample_locations 1
#define GL_SAMPLE_LOCATION_SUBPIXEL_BITS_ARB 0x933D
#define GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB 0x933E
#define GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB 0x933F
#define GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB 0x9340
#define GL_SAMPLE_LOCATION_ARB            0x8E50
#define GL_PROGRAMMABLE_SAMPLE_LOCATION_ARB 0x9341
#define GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB 0x9342
#define GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB 0x9343
typedef void (APIENTRYP PFNGLFRAMEBUFFERSAMPLELOCATIONSFVARBPROC) (GLenum target, GLuint start, GLsizei count, const GLfloat *v);
typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVARBPROC) (GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v);
typedef void (APIENTRYP PFNGLEVALUATEDEPTHVALUESARBPROC) (void);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glFramebufferSampleLocationsfvARB (GLenum target, GLuint start, GLsizei count, const GLfloat *v);
GLAPI void APIENTRY glNamedFramebufferSampleLocationsfvARB (GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v);
GLAPI void APIENTRY glEvaluateDepthValuesARB (void);
#endif
#endif /* GL_ARB_sample_locations */

#ifndef GL_ARB_sample_shading
#define GL_ARB_sample_shading 1
#define GL_SAMPLE_SHADING_ARB             0x8C36
#define GL_MIN_SAMPLE_SHADING_VALUE_ARB   0x8C37
typedef void (APIENTRYP PFNGLMINSAMPLESHADINGARBPROC) (GLfloat value);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glMinSampleShadingARB (GLfloat value);
#endif
#endif /* GL_ARB_sample_shading */

#ifndef GL_ARB_sampler_objects
#define GL_ARB_sampler_objects 1
#endif /* GL_ARB_sampler_objects */

#ifndef GL_ARB_seamless_cube_map
#define GL_ARB_seamless_cube_map 1
#endif /* GL_ARB_seamless_cube_map */

#ifndef GL_ARB_seamless_cubemap_per_texture
#define GL_ARB_seamless_cubemap_per_texture 1
#endif /* GL_ARB_seamless_cubemap_per_texture */

#ifndef GL_ARB_separate_shader_objects
#define GL_ARB_separate_shader_objects 1
#endif /* GL_ARB_separate_shader_objects */

#ifndef GL_ARB_shader_atomic_counter_ops
#define GL_ARB_shader_atomic_counter_ops 1
#endif /* GL_ARB_shader_atomic_counter_ops */

#ifndef GL_ARB_shader_atomic_counters
#define GL_ARB_shader_atomic_counters 1
#endif /* GL_ARB_shader_atomic_counters */

#ifndef GL_ARB_shader_ballot
#define GL_ARB_shader_ballot 1
#endif /* GL_ARB_shader_ballot */

#ifndef GL_ARB_shader_bit_encoding
#define GL_ARB_shader_bit_encoding 1
#endif /* GL_ARB_shader_bit_encoding */

#ifndef GL_ARB_shader_clock
#define GL_ARB_shader_clock 1
#endif /* GL_ARB_shader_clock */

#ifndef GL_ARB_shader_draw_parameters
#define GL_ARB_shader_draw_parameters 1
#endif /* GL_ARB_shader_draw_parameters */

#ifndef GL_ARB_shader_group_vote
#define GL_ARB_shader_group_vote 1
#endif /* GL_ARB_shader_group_vote */

#ifndef GL_ARB_shader_image_load_store
#define GL_ARB_shader_image_load_store 1
#endif /* GL_ARB_shader_image_load_store */

#ifndef GL_ARB_shader_image_size
#define GL_ARB_shader_image_size 1
#endif /* GL_ARB_shader_image_size */

#ifndef GL_ARB_shader_precision
#define GL_ARB_shader_precision 1
#endif /* GL_ARB_shader_precision */

#ifndef GL_ARB_shader_stencil_export
#define GL_ARB_shader_stencil_export 1
#endif /* GL_ARB_shader_stencil_export */

#ifndef GL_ARB_shader_storage_buffer_object
#define GL_ARB_shader_storage_buffer_object 1
#endif /* GL_ARB_shader_storage_buffer_object */

#ifndef GL_ARB_shader_subroutine
#define GL_ARB_shader_subroutine 1
#endif /* GL_ARB_shader_subroutine */

#ifndef GL_ARB_shader_texture_image_samples
#define GL_ARB_shader_texture_image_samples 1
#endif /* GL_ARB_shader_texture_image_samples */

#ifndef GL_ARB_shader_viewport_layer_array
#define GL_ARB_shader_viewport_layer_array 1
#endif /* GL_ARB_shader_viewport_layer_array */

#ifndef GL_ARB_shading_language_420pack
#define GL_ARB_shading_language_420pack 1
#endif /* GL_ARB_shading_language_420pack */

#ifndef GL_ARB_shading_language_include
#define GL_ARB_shading_language_include 1
#define GL_SHADER_INCLUDE_ARB             0x8DAE
#define GL_NAMED_STRING_LENGTH_ARB        0x8DE9
#define GL_NAMED_STRING_TYPE_ARB          0x8DEA
typedef void (APIENTRYP PFNGLNAMEDSTRINGARBPROC) (GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string);
typedef void (APIENTRYP PFNGLDELETENAMEDSTRINGARBPROC) (GLint namelen, const GLchar *name);
typedef void (APIENTRYP PFNGLCOMPILESHADERINCLUDEARBPROC) (GLuint shader, GLsizei count, const GLchar *const*path, const GLint *length);
typedef GLboolean (APIENTRYP PFNGLISNAMEDSTRINGARBPROC) (GLint namelen, const GLchar *name);
typedef void (APIENTRYP PFNGLGETNAMEDSTRINGARBPROC) (GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string);
typedef void (APIENTRYP PFNGLGETNAMEDSTRINGIVARBPROC) (GLint namelen, const GLchar *name, GLenum pname, GLint *params);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glNamedStringARB (GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string);
GLAPI void APIENTRY glDeleteNamedStringARB (GLint namelen, const GLchar *name);
GLAPI void APIENTRY glCompileShaderIncludeARB (GLuint shader, GLsizei count, const GLchar *const*path, const GLint *length);
GLAPI GLboolean APIENTRY glIsNamedStringARB (GLint namelen, const GLchar *name);
GLAPI void APIENTRY glGetNamedStringARB (GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string);
GLAPI void APIENTRY glGetNamedStringivARB (GLint namelen, const GLchar *name, GLenum pname, GLint *params);
#endif
#endif /* GL_ARB_shading_language_include */

#ifndef GL_ARB_shading_language_packing
#define GL_ARB_shading_language_packing 1
#endif /* GL_ARB_shading_language_packing */

#ifndef GL_ARB_sparse_buffer
#define GL_ARB_sparse_buffer 1
#define GL_SPARSE_STORAGE_BIT_ARB         0x0400
#define GL_SPARSE_BUFFER_PAGE_SIZE_ARB    0x82F8
typedef void (APIENTRYP PFNGLBUFFERPAGECOMMITMENTARBPROC) (GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit);
typedef void (APIENTRYP PFNGLNAMEDBUFFERPAGECOMMITMENTEXTPROC) (GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit);
typedef void (APIENTRYP PFNGLNAMEDBUFFERPAGECOMMITMENTARBPROC) (GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glBufferPageCommitmentARB (GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit);
GLAPI void APIENTRY glNamedBufferPageCommitmentEXT (GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit);
GLAPI void APIENTRY glNamedBufferPageCommitmentARB (GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit);
#endif
#endif /* GL_ARB_sparse_buffer */

#ifndef GL_ARB_sparse_texture
#define GL_ARB_sparse_texture 1
#define GL_TEXTURE_SPARSE_ARB             0x91A6
#define GL_VIRTUAL_PAGE_SIZE_INDEX_ARB    0x91A7
#define GL_NUM_SPARSE_LEVELS_ARB          0x91AA
#define GL_NUM_VIRTUAL_PAGE_SIZES_ARB     0x91A8
#define GL_VIRTUAL_PAGE_SIZE_X_ARB        0x9195
#define GL_VIRTUAL_PAGE_SIZE_Y_ARB        0x9196
#define GL_VIRTUAL_PAGE_SIZE_Z_ARB        0x9197
#define GL_MAX_SPARSE_TEXTURE_SIZE_ARB    0x9198
#define GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB 0x9199
#define GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB 0x919A
#define GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB 0x91A9
typedef void (APIENTRYP PFNGLTEXPAGECOMMITMENTARBPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glTexPageCommitmentARB (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit);
#endif
#endif /* GL_ARB_sparse_texture */

#ifndef GL_ARB_sparse_texture2
#define GL_ARB_sparse_texture2 1
#endif /* GL_ARB_sparse_texture2 */

#ifndef GL_ARB_sparse_texture_clamp
#define GL_ARB_sparse_texture_clamp 1
#endif /* GL_ARB_sparse_texture_clamp */

#ifndef GL_ARB_spirv_extensions
#define GL_ARB_spirv_extensions 1
#endif /* GL_ARB_spirv_extensions */

#ifndef GL_ARB_stencil_texturing
#define GL_ARB_stencil_texturing 1
#endif /* GL_ARB_stencil_texturing */

#ifndef GL_ARB_sync
#define GL_ARB_sync 1
#endif /* GL_ARB_sync */

#ifndef GL_ARB_tessellation_shader
#define GL_ARB_tessellation_shader 1
#endif /* GL_ARB_tessellation_shader */

#ifndef GL_ARB_texture_barrier
#define GL_ARB_texture_barrier 1
#endif /* GL_ARB_texture_barrier */

#ifndef GL_ARB_texture_border_clamp
#define GL_ARB_texture_border_clamp 1
#define GL_CLAMP_TO_BORDER_ARB            0x812D
#endif /* GL_ARB_texture_border_clamp */

#ifndef GL_ARB_texture_buffer_object
#define GL_ARB_texture_buffer_object 1
#define GL_TEXTURE_BUFFER_ARB             0x8C2A
#define GL_MAX_TEXTURE_BUFFER_SIZE_ARB    0x8C2B
#define GL_TEXTURE_BINDING_BUFFER_ARB     0x8C2C
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB 0x8C2D
#define GL_TEXTURE_BUFFER_FORMAT_ARB      0x8C2E
typedef void (APIENTRYP PFNGLTEXBUFFERARBPROC) (GLenum target, GLenum internalformat, GLuint buffer);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glTexBufferARB (GLenum target, GLenum internalformat, GLuint buffer);
#endif
#endif /* GL_ARB_texture_buffer_object */

#ifndef GL_ARB_texture_buffer_object_rgb32
#define GL_ARB_texture_buffer_object_rgb32 1
#endif /* GL_ARB_texture_buffer_object_rgb32 */

#ifndef GL_ARB_texture_buffer_range
#define GL_ARB_texture_buffer_range 1
#endif /* GL_ARB_texture_buffer_range */

#ifndef GL_ARB_texture_compression_bptc
#define GL_ARB_texture_compression_bptc 1
#define GL_COMPRESSED_RGBA_BPTC_UNORM_ARB 0x8E8C
#define GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB 0x8E8D
#define GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB 0x8E8E
#define GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB 0x8E8F
#endif /* GL_ARB_texture_compression_bptc */

#ifndef GL_ARB_texture_compression_rgtc
#define GL_ARB_texture_compression_rgtc 1
#endif /* GL_ARB_texture_compression_rgtc */

#ifndef GL_ARB_texture_cube_map_array
#define GL_ARB_texture_cube_map_array 1
#define GL_TEXTURE_CUBE_MAP_ARRAY_ARB     0x9009
#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB 0x900A
#define GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB 0x900B
#define GL_SAMPLER_CUBE_MAP_ARRAY_ARB     0x900C
#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB 0x900D
#define GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB 0x900E
#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB 0x900F
#endif /* GL_ARB_texture_cube_map_array */

#ifndef GL_ARB_texture_filter_anisotropic
#define GL_ARB_texture_filter_anisotropic 1
#endif /* GL_ARB_texture_filter_anisotropic */

#ifndef GL_ARB_texture_filter_minmax
#define GL_ARB_texture_filter_minmax 1
#define GL_TEXTURE_REDUCTION_MODE_ARB     0x9366
#define GL_WEIGHTED_AVERAGE_ARB           0x9367
#endif /* GL_ARB_texture_filter_minmax */

#ifndef GL_ARB_texture_gather
#define GL_ARB_texture_gather 1
#define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB 0x8E5E
#define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB 0x8E5F
#define GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB 0x8F9F
#endif /* GL_ARB_texture_gather */

#ifndef GL_ARB_texture_mirror_clamp_to_edge
#define GL_ARB_texture_mirror_clamp_to_edge 1
#endif /* GL_ARB_texture_mirror_clamp_to_edge */

#ifndef GL_ARB_texture_mirrored_repeat
#define GL_ARB_texture_mirrored_repeat 1
#define GL_MIRRORED_REPEAT_ARB            0x8370
#endif /* GL_ARB_texture_mirrored_repeat */

#ifndef GL_ARB_texture_multisample
#define GL_ARB_texture_multisample 1
#endif /* GL_ARB_texture_multisample */

#ifndef GL_ARB_texture_non_power_of_two
#define GL_ARB_texture_non_power_of_two 1
#endif /* GL_ARB_texture_non_power_of_two */

#ifndef GL_ARB_texture_query_levels
#define GL_ARB_texture_query_levels 1
#endif /* GL_ARB_texture_query_levels */

#ifndef GL_ARB_texture_query_lod
#define GL_ARB_texture_query_lod 1
#endif /* GL_ARB_texture_query_lod */

#ifndef GL_ARB_texture_rg
#define GL_ARB_texture_rg 1
#endif /* GL_ARB_texture_rg */

#ifndef GL_ARB_texture_rgb10_a2ui
#define GL_ARB_texture_rgb10_a2ui 1
#endif /* GL_ARB_texture_rgb10_a2ui */

#ifndef GL_ARB_texture_stencil8
#define GL_ARB_texture_stencil8 1
#endif /* GL_ARB_texture_stencil8 */

#ifndef GL_ARB_texture_storage
#define GL_ARB_texture_storage 1
#endif /* GL_ARB_texture_storage */

#ifndef GL_ARB_texture_storage_multisample
#define GL_ARB_texture_storage_multisample 1
#endif /* GL_ARB_texture_storage_multisample */

#ifndef GL_ARB_texture_swizzle
#define GL_ARB_texture_swizzle 1
#endif /* GL_ARB_texture_swizzle */

#ifndef GL_ARB_texture_view
#define GL_ARB_texture_view 1
#endif /* GL_ARB_texture_view */

#ifndef GL_ARB_timer_query
#define GL_ARB_timer_query 1
#endif /* GL_ARB_timer_query */

#ifndef GL_ARB_transform_feedback2
#define GL_ARB_transform_feedback2 1
#endif /* GL_ARB_transform_feedback2 */

#ifndef GL_ARB_transform_feedback3
#define GL_ARB_transform_feedback3 1
#endif /* GL_ARB_transform_feedback3 */

#ifndef GL_ARB_transform_feedback_instanced
#define GL_ARB_transform_feedback_instanced 1
#endif /* GL_ARB_transform_feedback_instanced */

#ifndef GL_ARB_transform_feedback_overflow_query
#define GL_ARB_transform_feedback_overflow_query 1
#define GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB 0x82EC
#define GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB 0x82ED
#endif /* GL_ARB_transform_feedback_overflow_query */

#ifndef GL_ARB_uniform_buffer_object
#define GL_ARB_uniform_buffer_object 1
#endif /* GL_ARB_uniform_buffer_object */

#ifndef GL_ARB_vertex_array_bgra
#define GL_ARB_vertex_array_bgra 1
#endif /* GL_ARB_vertex_array_bgra */

#ifndef GL_ARB_vertex_array_object
#define GL_ARB_vertex_array_object 1
#endif /* GL_ARB_vertex_array_object */

#ifndef GL_ARB_vertex_attrib_64bit
#define GL_ARB_vertex_attrib_64bit 1
#endif /* GL_ARB_vertex_attrib_64bit */

#ifndef GL_ARB_vertex_attrib_binding
#define GL_ARB_vertex_attrib_binding 1
#endif /* GL_ARB_vertex_attrib_binding */

#ifndef GL_ARB_vertex_type_10f_11f_11f_rev
#define GL_ARB_vertex_type_10f_11f_11f_rev 1
#endif /* GL_ARB_vertex_type_10f_11f_11f_rev */

#ifndef GL_ARB_vertex_type_2_10_10_10_rev
#define GL_ARB_vertex_type_2_10_10_10_rev 1
#endif /* GL_ARB_vertex_type_2_10_10_10_rev */

#ifndef GL_ARB_viewport_array
#define GL_ARB_viewport_array 1
#endif /* GL_ARB_viewport_array */

#ifndef GL_KHR_blend_equation_advanced
#define GL_KHR_blend_equation_advanced 1
#define GL_MULTIPLY_KHR                   0x9294
#define GL_SCREEN_KHR                     0x9295
#define GL_OVERLAY_KHR                    0x9296
#define GL_DARKEN_KHR                     0x9297
#define GL_LIGHTEN_KHR                    0x9298
#define GL_COLORDODGE_KHR                 0x9299
#define GL_COLORBURN_KHR                  0x929A
#define GL_HARDLIGHT_KHR                  0x929B
#define GL_SOFTLIGHT_KHR                  0x929C
#define GL_DIFFERENCE_KHR                 0x929E
#define GL_EXCLUSION_KHR                  0x92A0
#define GL_HSL_HUE_KHR                    0x92AD
#define GL_HSL_SATURATION_KHR             0x92AE
#define GL_HSL_COLOR_KHR                  0x92AF
#define GL_HSL_LUMINOSITY_KHR             0x92B0
typedef void (APIENTRYP PFNGLBLENDBARRIERKHRPROC) (void);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glBlendBarrierKHR (void);
#endif
#endif /* GL_KHR_blend_equation_advanced */

#ifndef GL_KHR_blend_equation_advanced_coherent
#define GL_KHR_blend_equation_advanced_coherent 1
#define GL_BLEND_ADVANCED_COHERENT_KHR    0x9285
#endif /* GL_KHR_blend_equation_advanced_coherent */

#ifndef GL_KHR_context_flush_control
#define GL_KHR_context_flush_control 1
#endif /* GL_KHR_context_flush_control */

#ifndef GL_KHR_debug
#define GL_KHR_debug 1
#endif /* GL_KHR_debug */

#ifndef GL_KHR_no_error
#define GL_KHR_no_error 1
#define GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR  0x00000008
#endif /* GL_KHR_no_error */

#ifndef GL_KHR_parallel_shader_compile
#define GL_KHR_parallel_shader_compile 1
#define GL_MAX_SHADER_COMPILER_THREADS_KHR 0x91B0
#define GL_COMPLETION_STATUS_KHR          0x91B1
typedef void (APIENTRYP PFNGLMAXSHADERCOMPILERTHREADSKHRPROC) (GLuint count);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glMaxShaderCompilerThreadsKHR (GLuint count);
#endif
#endif /* GL_KHR_parallel_shader_compile */

#ifndef GL_KHR_robust_buffer_access_behavior
#define GL_KHR_robust_buffer_access_behavior 1
#endif /* GL_KHR_robust_buffer_access_behavior */

#ifndef GL_KHR_robustness
#define GL_KHR_robustness 1
#define GL_CONTEXT_ROBUST_ACCESS          0x90F3
#endif /* GL_KHR_robustness */

#ifndef GL_KHR_texture_compression_astc_hdr
#define GL_KHR_texture_compression_astc_hdr 1
#define GL_COMPRESSED_RGBA_ASTC_4x4_KHR   0x93B0
#define GL_COMPRESSED_RGBA_ASTC_5x4_KHR   0x93B1
#define GL_COMPRESSED_RGBA_ASTC_5x5_KHR   0x93B2
#define GL_COMPRESSED_RGBA_ASTC_6x5_KHR   0x93B3
#define GL_COMPRESSED_RGBA_ASTC_6x6_KHR   0x93B4
#define GL_COMPRESSED_RGBA_ASTC_8x5_KHR   0x93B5
#define GL_COMPRESSED_RGBA_ASTC_8x6_KHR   0x93B6
#define GL_COMPRESSED_RGBA_ASTC_8x8_KHR   0x93B7
#define GL_COMPRESSED_RGBA_ASTC_10x5_KHR  0x93B8
#define GL_COMPRESSED_RGBA_ASTC_10x6_KHR  0x93B9
#define GL_COMPRESSED_RGBA_ASTC_10x8_KHR  0x93BA
#define GL_COMPRESSED_RGBA_ASTC_10x10_KHR 0x93BB
#define GL_COMPRESSED_RGBA_ASTC_12x10_KHR 0x93BC
#define GL_COMPRESSED_RGBA_ASTC_12x12_KHR 0x93BD
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR 0x93D0
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR 0x93D1
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR 0x93D2
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR 0x93D3
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR 0x93D4
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR 0x93D5
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR 0x93D6
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR 0x93D7
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR 0x93D8
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR 0x93D9
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR 0x93DA
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR 0x93DB
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR 0x93DC
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR 0x93DD
#endif /* GL_KHR_texture_compression_astc_hdr */

#ifndef GL_KHR_texture_compression_astc_ldr
#define GL_KHR_texture_compression_astc_ldr 1
#endif /* GL_KHR_texture_compression_astc_ldr */

#ifndef GL_KHR_texture_compression_astc_sliced_3d
#define GL_KHR_texture_compression_astc_sliced_3d 1
#endif /* GL_KHR_texture_compression_astc_sliced_3d */

#ifndef GL_AMD_performance_monitor
#define GL_AMD_performance_monitor 1
#define GL_COUNTER_TYPE_AMD               0x8BC0
#define GL_COUNTER_RANGE_AMD              0x8BC1
#define GL_UNSIGNED_INT64_AMD             0x8BC2
#define GL_PERCENTAGE_AMD                 0x8BC3
#define GL_PERFMON_RESULT_AVAILABLE_AMD   0x8BC4
#define GL_PERFMON_RESULT_SIZE_AMD        0x8BC5
#define GL_PERFMON_RESULT_AMD             0x8BC6
typedef void (APIENTRYP PFNGLGETPERFMONITORGROUPSAMDPROC) (GLint *numGroups, GLsizei groupsSize, GLuint *groups);
typedef void (APIENTRYP PFNGLGETPERFMONITORCOUNTERSAMDPROC) (GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei counterSize, GLuint *counters);
typedef void (APIENTRYP PFNGLGETPERFMONITORGROUPSTRINGAMDPROC) (GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString);
typedef void (APIENTRYP PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC) (GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString);
typedef void (APIENTRYP PFNGLGETPERFMONITORCOUNTERINFOAMDPROC) (GLuint group, GLuint counter, GLenum pname, void *data);
typedef void (APIENTRYP PFNGLGENPERFMONITORSAMDPROC) (GLsizei n, GLuint *monitors);
typedef void (APIENTRYP PFNGLDELETEPERFMONITORSAMDPROC) (GLsizei n, GLuint *monitors);
typedef void (APIENTRYP PFNGLSELECTPERFMONITORCOUNTERSAMDPROC) (GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList);
typedef void (APIENTRYP PFNGLBEGINPERFMONITORAMDPROC) (GLuint monitor);
typedef void (APIENTRYP PFNGLENDPERFMONITORAMDPROC) (GLuint monitor);
typedef void (APIENTRYP PFNGLGETPERFMONITORCOUNTERDATAAMDPROC) (GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glGetPerfMonitorGroupsAMD (GLint *numGroups, GLsizei groupsSize, GLuint *groups);
GLAPI void APIENTRY glGetPerfMonitorCountersAMD (GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei counterSize, GLuint *counters);
GLAPI void APIENTRY glGetPerfMonitorGroupStringAMD (GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString);
GLAPI void APIENTRY glGetPerfMonitorCounterStringAMD (GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString);
GLAPI void APIENTRY glGetPerfMonitorCounterInfoAMD (GLuint group, GLuint counter, GLenum pname, void *data);
GLAPI void APIENTRY glGenPerfMonitorsAMD (GLsizei n, GLuint *monitors);
GLAPI void APIENTRY glDeletePerfMonitorsAMD (GLsizei n, GLuint *monitors);
GLAPI void APIENTRY glSelectPerfMonitorCountersAMD (GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList);
GLAPI void APIENTRY glBeginPerfMonitorAMD (GLuint monitor);
GLAPI void APIENTRY glEndPerfMonitorAMD (GLuint monitor);
GLAPI void APIENTRY glGetPerfMonitorCounterDataAMD (GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten);
#endif
#endif /* GL_AMD_performance_monitor */

#ifndef GL_APPLE_rgb_422
#define GL_APPLE_rgb_422 1
#define GL_RGB_422_APPLE                  0x8A1F
#define GL_UNSIGNED_SHORT_8_8_APPLE       0x85BA
#define GL_UNSIGNED_SHORT_8_8_REV_APPLE   0x85BB
#define GL_RGB_RAW_422_APPLE              0x8A51
#endif /* GL_APPLE_rgb_422 */

#ifndef GL_EXT_debug_label
#define GL_EXT_debug_label 1
#define GL_PROGRAM_PIPELINE_OBJECT_EXT    0x8A4F
#define GL_PROGRAM_OBJECT_EXT             0x8B40
#define GL_SHADER_OBJECT_EXT              0x8B48
#define GL_BUFFER_OBJECT_EXT              0x9151
#define GL_QUERY_OBJECT_EXT               0x9153
#define GL_VERTEX_ARRAY_OBJECT_EXT        0x9154
typedef void (APIENTRYP PFNGLLABELOBJECTEXTPROC) (GLenum type, GLuint object, GLsizei length, const GLchar *label);
typedef void (APIENTRYP PFNGLGETOBJECTLABELEXTPROC) (GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glLabelObjectEXT (GLenum type, GLuint object, GLsizei length, const GLchar *label);
GLAPI void APIENTRY glGetObjectLabelEXT (GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label);
#endif
#endif /* GL_EXT_debug_label */

#ifndef GL_EXT_debug_marker
#define GL_EXT_debug_marker 1
typedef void (APIENTRYP PFNGLINSERTEVENTMARKEREXTPROC) (GLsizei length, const GLchar *marker);
typedef void (APIENTRYP PFNGLPUSHGROUPMARKEREXTPROC) (GLsizei length, const GLchar *marker);
typedef void (APIENTRYP PFNGLPOPGROUPMARKEREXTPROC) (void);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glInsertEventMarkerEXT (GLsizei length, const GLchar *marker);
GLAPI void APIENTRY glPushGroupMarkerEXT (GLsizei length, const GLchar *marker);
GLAPI void APIENTRY glPopGroupMarkerEXT (void);
#endif
#endif /* GL_EXT_debug_marker */

#ifndef GL_EXT_direct_state_access
#define GL_EXT_direct_state_access 1
#define GL_PROGRAM_MATRIX_EXT             0x8E2D
#define GL_TRANSPOSE_PROGRAM_MATRIX_EXT   0x8E2E
#define GL_PROGRAM_MATRIX_STACK_DEPTH_EXT 0x8E2F
typedef void (APIENTRYP PFNGLMATRIXLOADFEXTPROC) (GLenum mode, const GLfloat *m);
typedef void (APIENTRYP PFNGLMATRIXLOADDEXTPROC) (GLenum mode, const GLdouble *m);
typedef void (APIENTRYP PFNGLMATRIXMULTFEXTPROC) (GLenum mode, const GLfloat *m);
typedef void (APIENTRYP PFNGLMATRIXMULTDEXTPROC) (GLenum mode, const GLdouble *m);
typedef void (APIENTRYP PFNGLMATRIXLOADIDENTITYEXTPROC) (GLenum mode);
typedef void (APIENTRYP PFNGLMATRIXROTATEFEXTPROC) (GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
typedef void (APIENTRYP PFNGLMATRIXROTATEDEXTPROC) (GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
typedef void (APIENTRYP PFNGLMATRIXSCALEFEXTPROC) (GLenum mode, GLfloat x, GLfloat y, GLfloat z);
typedef void (APIENTRYP PFNGLMATRIXSCALEDEXTPROC) (GLenum mode, GLdouble x, GLdouble y, GLdouble z);
typedef void (APIENTRYP PFNGLMATRIXTRANSLATEFEXTPROC) (GLenum mode, GLfloat x, GLfloat y, GLfloat z);
typedef void (APIENTRYP PFNGLMATRIXTRANSLATEDEXTPROC) (GLenum mode, GLdouble x, GLdouble y, GLdouble z);
typedef void (APIENTRYP PFNGLMATRIXFRUSTUMEXTPROC) (GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
typedef void (APIENTRYP PFNGLMATRIXORTHOEXTPROC) (GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
typedef void (APIENTRYP PFNGLMATRIXPOPEXTPROC) (GLenum mode);
typedef void (APIENTRYP PFNGLMATRIXPUSHEXTPROC) (GLenum mode);
typedef void (APIENTRYP PFNGLCLIENTATTRIBDEFAULTEXTPROC) (GLbitfield mask);
typedef void (APIENTRYP PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC) (GLbitfield mask);
typedef void (APIENTRYP PFNGLTEXTUREPARAMETERFEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLfloat param);
typedef void (APIENTRYP PFNGLTEXTUREPARAMETERFVEXTPROC) (GLuint texture, GLenum target, GLenum pname, const GLfloat *params);
typedef void (APIENTRYP PFNGLTEXTUREPARAMETERIEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLint param);
typedef void (APIENTRYP PFNGLTEXTUREPARAMETERIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, const GLint *params);
typedef void (APIENTRYP PFNGLTEXTUREIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRYP PFNGLTEXTUREIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRYP PFNGLTEXTURESUBIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRYP PFNGLTEXTURESUBIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRYP PFNGLCOPYTEXTUREIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
typedef void (APIENTRYP PFNGLCOPYTEXTUREIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
typedef void (APIENTRYP PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef void (APIENTRYP PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (APIENTRYP PFNGLGETTEXTUREIMAGEEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, void *pixels);
typedef void (APIENTRYP PFNGLGETTEXTUREPARAMETERFVEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLfloat *params);
typedef void (APIENTRYP PFNGLGETTEXTUREPARAMETERIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLint *params);
typedef void (APIENTRYP PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat *params);
typedef void (APIENTRYP PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum pname, GLint *params);
typedef void (APIENTRYP PFNGLTEXTUREIMAGE3DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRYP PFNGLTEXTURESUBIMAGE3DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRYP PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (APIENTRYP PFNGLBINDMULTITEXTUREEXTPROC) (GLenum texunit, GLenum target, GLuint texture);
typedef void (APIENTRYP PFNGLMULTITEXCOORDPOINTEREXTPROC) (GLenum texunit, GLint size, GLenum type, GLsizei stride, const void *pointer);
typedef void (APIENTRYP PFNGLMULTITEXENVFEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLfloat param);
typedef void (APIENTRYP PFNGLMULTITEXENVFVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLfloat *params);
typedef void (APIENTRYP PFNGLMULTITEXENVIEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLint param);
typedef void (APIENTRYP PFNGLMULTITEXENVIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLint *params);
typedef void (APIENTRYP PFNGLMULTITEXGENDEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLdouble param);
typedef void (APIENTRYP PFNGLMULTITEXGENDVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, const GLdouble *params);
typedef void (APIENTRYP PFNGLMULTITEXGENFEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLfloat param);
typedef void (APIENTRYP PFNGLMULTITEXGENFVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, const GLfloat *params);
typedef void (APIENTRYP PFNGLMULTITEXGENIEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLint param);
typedef void (APIENTRYP PFNGLMULTITEXGENIVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, const GLint *params);
typedef void (APIENTRYP PFNGLGETMULTITEXENVFVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLfloat *params);
typedef void (APIENTRYP PFNGLGETMULTITEXENVIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLint *params);
typedef void (APIENTRYP PFNGLGETMULTITEXGENDVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLdouble *params);
typedef void (APIENTRYP PFNGLGETMULTITEXGENFVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLfloat *params);
typedef void (APIENTRYP PFNGLGETMULTITEXGENIVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLint *params);
typedef void (APIENTRYP PFNGLMULTITEXPARAMETERIEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLint param);
typedef void (APIENTRYP PFNGLMULTITEXPARAMETERIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLint *params);
typedef void (APIENTRYP PFNGLMULTITEXPARAMETERFEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLfloat param);
typedef void (APIENTRYP PFNGLMULTITEXPARAMETERFVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLfloat *params);
typedef void (APIENTRYP PFNGLMULTITEXIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRYP PFNGLMULTITEXIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRYP PFNGLMULTITEXSUBIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRYP PFNGLMULTITEXSUBIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRYP PFNGLCOPYMULTITEXIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
typedef void (APIENTRYP PFNGLCOPYMULTITEXIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
typedef void (APIENTRYP PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef void (APIENTRYP PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (APIENTRYP PFNGLGETMULTITEXIMAGEEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, void *pixels);
typedef void (APIENTRYP PFNGLGETMULTITEXPARAMETERFVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLfloat *params);
typedef void (APIENTRYP PFNGLGETMULTITEXPARAMETERIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLint *params);
typedef void (APIENTRYP PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat *params);
typedef void (APIENTRYP PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum pname, GLint *params);
typedef void (APIENTRYP PFNGLMULTITEXIMAGE3DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRYP PFNGLMULTITEXSUBIMAGE3DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRYP PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (APIENTRYP PFNGLENABLECLIENTSTATEINDEXEDEXTPROC) (GLenum array, GLuint index);
typedef void (APIENTRYP PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC) (GLenum array, GLuint index);
typedef void (APIENTRYP PFNGLGETFLOATINDEXEDVEXTPROC) (GLenum target, GLuint index, GLfloat *data);
typedef void (APIENTRYP PFNGLGETDOUBLEINDEXEDVEXTPROC) (GLenum target, GLuint index, GLdouble *data);
typedef void (APIENTRYP PFNGLGETPOINTERINDEXEDVEXTPROC) (GLenum target, GLuint index, void **data);
typedef void (APIENTRYP PFNGLENABLEINDEXEDEXTPROC) (GLenum target, GLuint index);
typedef void (APIENTRYP PFNGLDISABLEINDEXEDEXTPROC) (GLenum target, GLuint index);
typedef GLboolean (APIENTRYP PFNGLISENABLEDINDEXEDEXTPROC) (GLenum target, GLuint index);
typedef void (APIENTRYP PFNGLGETINTEGERINDEXEDVEXTPROC) (GLenum target, GLuint index, GLint *data);
typedef void (APIENTRYP PFNGLGETBOOLEANINDEXEDVEXTPROC) (GLenum target, GLuint index, GLboolean *data);
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits);
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits);
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits);
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *bits);
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *bits);
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *bits);
typedef void (APIENTRYP PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC) (GLuint texture, GLenum target, GLint lod, void *img);
typedef void (APIENTRYP PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits);
typedef void (APIENTRYP PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits);
typedef void (APIENTRYP PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits);
typedef void (APIENTRYP PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *bits);
typedef void (APIENTRYP PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *bits);
typedef void (APIENTRYP PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *bits);
typedef void (APIENTRYP PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC) (GLenum texunit, GLenum target, GLint lod, void *img);
typedef void (APIENTRYP PFNGLMATRIXLOADTRANSPOSEFEXTPROC) (GLenum mode, const GLfloat *m);
typedef void (APIENTRYP PFNGLMATRIXLOADTRANSPOSEDEXTPROC) (GLenum mode, const GLdouble *m);
typedef void (APIENTRYP PFNGLMATRIXMULTTRANSPOSEFEXTPROC) (GLenum mode, const GLfloat *m);
typedef void (APIENTRYP PFNGLMATRIXMULTTRANSPOSEDEXTPROC) (GLenum mode, const GLdouble *m);
typedef void (APIENTRYP PFNGLNAMEDBUFFERDATAEXTPROC) (GLuint buffer, GLsizeiptr size, const void *data, GLenum usage);
typedef void (APIENTRYP PFNGLNAMEDBUFFERSUBDATAEXTPROC) (GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data);
typedef void *(APIENTRYP PFNGLMAPNAMEDBUFFEREXTPROC) (GLuint buffer, GLenum access);
typedef GLboolean (APIENTRYP PFNGLUNMAPNAMEDBUFFEREXTPROC) (GLuint buffer);
typedef void (APIENTRYP PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC) (GLuint buffer, GLenum pname, GLint *params);
typedef void (APIENTRYP PFNGLGETNAMEDBUFFERPOINTERVEXTPROC) (GLuint buffer, GLenum pname, void **params);
typedef void (APIENTRYP PFNGLGETNAMEDBUFFERSUBDATAEXTPROC) (GLuint buffer, GLintptr offset, GLsizeiptr size, void *data);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1FEXTPROC) (GLuint program, GLint location, GLfloat v0);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2FEXTPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3FEXTPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4FEXTPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1IEXTPROC) (GLuint program, GLint location, GLint v0);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2IEXTPROC) (GLuint program, GLint location, GLint v0, GLint v1);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3IEXTPROC) (GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4IEXTPROC) (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1FVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2FVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3FVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4FVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1IVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2IVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3IVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4IVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRYP PFNGLTEXTUREBUFFEREXTPROC) (GLuint texture, GLenum target, GLenum internalformat, GLuint buffer);
typedef void (APIENTRYP PFNGLMULTITEXBUFFEREXTPROC) (GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer);
typedef void (APIENTRYP PFNGLTEXTUREPARAMETERIIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, const GLint *params);
typedef void (APIENTRYP PFNGLTEXTUREPARAMETERIUIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, const GLuint *params);
typedef void (APIENTRYP PFNGLGETTEXTUREPARAMETERIIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLint *params);
typedef void (APIENTRYP PFNGLGETTEXTUREPARAMETERIUIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLuint *params);
typedef void (APIENTRYP PFNGLMULTITEXPARAMETERIIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLint *params);
typedef void (APIENTRYP PFNGLMULTITEXPARAMETERIUIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLuint *params);
typedef void (APIENTRYP PFNGLGETMULTITEXPARAMETERIIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLint *params);
typedef void (APIENTRYP PFNGLGETMULTITEXPARAMETERIUIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLuint *params);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UIEXTPROC) (GLuint program, GLint location, GLuint v0);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UIEXTPROC) (GLuint program, GLint location, GLuint v0, GLuint v1);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UIEXTPROC) (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UIEXTPROC) (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UIVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UIVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UIVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UIVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);
typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC) (GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat *params);
typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC) (GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC) (GLuint program, GLenum target, GLuint index, const GLint *params);
typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC) (GLuint program, GLenum target, GLuint index, GLsizei count, const GLint *params);
typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC) (GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC) (GLuint program, GLenum target, GLuint index, const GLuint *params);
typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC) (GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint *params);
typedef void (APIENTRYP PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC) (GLuint program, GLenum target, GLuint index, GLint *params);
typedef void (APIENTRYP PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC) (GLuint program, GLenum target, GLuint index, GLuint *params);
typedef void (APIENTRYP PFNGLENABLECLIENTSTATEIEXTPROC) (GLenum array, GLuint index);
typedef void (APIENTRYP PFNGLDISABLECLIENTSTATEIEXTPROC) (GLenum array, GLuint index);
typedef void (APIENTRYP PFNGLGETFLOATI_VEXTPROC) (GLenum pname, GLuint index, GLfloat *params);
typedef void (APIENTRYP PFNGLGETDOUBLEI_VEXTPROC) (GLenum pname, GLuint index, GLdouble *params);
typedef void (APIENTRYP PFNGLGETPOINTERI_VEXTPROC) (GLenum pname, GLuint index, void **params);
typedef void (APIENTRYP PFNGLNAMEDPROGRAMSTRINGEXTPROC) (GLuint program, GLenum target, GLenum format, GLsizei len, const void *string);
typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC) (GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC) (GLuint program, GLenum target, GLuint index, const GLdouble *params);
typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC) (GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC) (GLuint program, GLenum target, GLuint index, const GLfloat *params);
typedef void (APIENTRYP PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC) (GLuint program, GLenum target, GLuint index, GLdouble *params);
typedef void (APIENTRYP PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC) (GLuint program, GLenum target, GLuint index, GLfloat *params);
typedef void (APIENTRYP PFNGLGETNAMEDPROGRAMIVEXTPROC) (GLuint program, GLenum target, GLenum pname, GLint *params);
typedef void (APIENTRYP PFNGLGETNAMEDPROGRAMSTRINGEXTPROC) (GLuint program, GLenum target, GLenum pname, void *string);
typedef void (APIENTRYP PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC) (GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (APIENTRYP PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC) (GLuint renderbuffer, GLenum pname, GLint *params);
typedef void (APIENTRYP PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC) (GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (APIENTRYP PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC) (GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);
typedef GLenum (APIENTRYP PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC) (GLuint framebuffer, GLenum target);
typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC) (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC) (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC) (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC) (GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
typedef void (APIENTRYP PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC) (GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params);
typedef void (APIENTRYP PFNGLGENERATETEXTUREMIPMAPEXTPROC) (GLuint texture, GLenum target);
typedef void (APIENTRYP PFNGLGENERATEMULTITEXMIPMAPEXTPROC) (GLenum texunit, GLenum target);
typedef void (APIENTRYP PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC) (GLuint framebuffer, GLenum mode);
typedef void (APIENTRYP PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC) (GLuint framebuffer, GLsizei n, const GLenum *bufs);
typedef void (APIENTRYP PFNGLFRAMEBUFFERREADBUFFEREXTPROC) (GLuint framebuffer, GLenum mode);
typedef void (APIENTRYP PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC) (GLuint framebuffer, GLenum pname, GLint *params);
typedef void (APIENTRYP PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC) (GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face);
typedef void (APIENTRYP PFNGLTEXTURERENDERBUFFEREXTPROC) (GLuint texture, GLenum target, GLuint renderbuffer);
typedef void (APIENTRYP PFNGLMULTITEXRENDERBUFFEREXTPROC) (GLenum texunit, GLenum target, GLuint renderbuffer);
typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (APIENTRYP PFNGLVERTEXARRAYCOLOROFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (APIENTRYP PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset);
typedef void (APIENTRYP PFNGLVERTEXARRAYINDEXOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
typedef void (APIENTRYP PFNGLVERTEXARRAYNORMALOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
typedef void (APIENTRYP PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (APIENTRYP PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (APIENTRYP PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
typedef void (APIENTRYP PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset);
typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (APIENTRYP PFNGLENABLEVERTEXARRAYEXTPROC) (GLuint vaobj, GLenum array);
typedef void (APIENTRYP PFNGLDISABLEVERTEXARRAYEXTPROC) (GLuint vaobj, GLenum array);
typedef void (APIENTRYP PFNGLENABLEVERTEXARRAYATTRIBEXTPROC) (GLuint vaobj, GLuint index);
typedef void (APIENTRYP PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC) (GLuint vaobj, GLuint index);
typedef void (APIENTRYP PFNGLGETVERTEXARRAYINTEGERVEXTPROC) (GLuint vaobj, GLenum pname, GLint *param);
typedef void (APIENTRYP PFNGLGETVERTEXARRAYPOINTERVEXTPROC) (GLuint vaobj, GLenum pname, void **param);
typedef void (APIENTRYP PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC) (GLuint vaobj, GLuint index, GLenum pname, GLint *param);
typedef void (APIENTRYP PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC) (GLuint vaobj, GLuint index, GLenum pname, void **param);
typedef void *(APIENTRYP PFNGLMAPNAMEDBUFFERRANGEEXTPROC) (GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
typedef void (APIENTRYP PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC) (GLuint buffer, GLintptr offset, GLsizeiptr length);
typedef void (APIENTRYP PFNGLNAMEDBUFFERSTORAGEEXTPROC) (GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags);
typedef void (APIENTRYP PFNGLCLEARNAMEDBUFFERDATAEXTPROC) (GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data);
typedef void (APIENTRYP PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC) (GLuint buffer, GLenum internalformat, GLsizeiptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC) (GLuint framebuffer, GLenum pname, GLint param);
typedef void (APIENTRYP PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC) (GLuint framebuffer, GLenum pname, GLint *params);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1DEXTPROC) (GLuint program, GLint location, GLdouble x);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2DEXTPROC) (GLuint program, GLint location, GLdouble x, GLdouble y);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3DEXTPROC) (GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4DEXTPROC) (GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1DVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2DVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3DVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4DVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRYP PFNGLTEXTUREBUFFERRANGEEXTPROC) (GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (APIENTRYP PFNGLTEXTURESTORAGE1DEXTPROC) (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
typedef void (APIENTRYP PFNGLTEXTURESTORAGE2DEXTPROC) (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (APIENTRYP PFNGLTEXTURESTORAGE3DEXTPROC) (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
typedef void (APIENTRYP PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC) (GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
typedef void (APIENTRYP PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC) (GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
typedef void (APIENTRYP PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC) (GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC) (GLuint vaobj, GLuint attribindex, GLuint bindingindex);
typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC) (GLuint vaobj, GLuint bindingindex, GLuint divisor);
typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (APIENTRYP PFNGLTEXTUREPAGECOMMITMENTEXTPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit);
typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC) (GLuint vaobj, GLuint index, GLuint divisor);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glMatrixLoadfEXT (GLenum mode, const GLfloat *m);
GLAPI void APIENTRY glMatrixLoaddEXT (GLenum mode, const GLdouble *m);
GLAPI void APIENTRY glMatrixMultfEXT (GLenum mode, const GLfloat *m);
GLAPI void APIENTRY glMatrixMultdEXT (GLenum mode, const GLdouble *m);
GLAPI void APIENTRY glMatrixLoadIdentityEXT (GLenum mode);
GLAPI void APIENTRY glMatrixRotatefEXT (GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
GLAPI void APIENTRY glMatrixRotatedEXT (GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
GLAPI void APIENTRY glMatrixScalefEXT (GLenum mode, GLfloat x, GLfloat y, GLfloat z);
GLAPI void APIENTRY glMatrixScaledEXT (GLenum mode, GLdouble x, GLdouble y, GLdouble z);
GLAPI void APIENTRY glMatrixTranslatefEXT (GLenum mode, GLfloat x, GLfloat y, GLfloat z);
GLAPI void APIENTRY glMatrixTranslatedEXT (GLenum mode, GLdouble x, GLdouble y, GLdouble z);
GLAPI void APIENTRY glMatrixFrustumEXT (GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
GLAPI void APIENTRY glMatrixOrthoEXT (GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
GLAPI void APIENTRY glMatrixPopEXT (GLenum mode);
GLAPI void APIENTRY glMatrixPushEXT (GLenum mode);
GLAPI void APIENTRY glClientAttribDefaultEXT (GLbitfield mask);
GLAPI void APIENTRY glPushClientAttribDefaultEXT (GLbitfield mask);
GLAPI void APIENTRY glTextureParameterfEXT (GLuint texture, GLenum target, GLenum pname, GLfloat param);
GLAPI void APIENTRY glTextureParameterfvEXT (GLuint texture, GLenum target, GLenum pname, const GLfloat *params);
GLAPI void APIENTRY glTextureParameteriEXT (GLuint texture, GLenum target, GLenum pname, GLint param);
GLAPI void APIENTRY glTextureParameterivEXT (GLuint texture, GLenum target, GLenum pname, const GLint *params);
GLAPI void APIENTRY glTextureImage1DEXT (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels);
GLAPI void APIENTRY glTextureImage2DEXT (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels);
GLAPI void APIENTRY glTextureSubImage1DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
GLAPI void APIENTRY glTextureSubImage2DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
GLAPI void APIENTRY glCopyTextureImage1DEXT (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
GLAPI void APIENTRY glCopyTextureImage2DEXT (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
GLAPI void APIENTRY glCopyTextureSubImage1DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
GLAPI void APIENTRY glCopyTextureSubImage2DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI void APIENTRY glGetTextureImageEXT (GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, void *pixels);
GLAPI void APIENTRY glGetTextureParameterfvEXT (GLuint texture, GLenum target, GLenum pname, GLfloat *params);
GLAPI void APIENTRY glGetTextureParameterivEXT (GLuint texture, GLenum target, GLenum pname, GLint *params);
GLAPI void APIENTRY glGetTextureLevelParameterfvEXT (GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat *params);
GLAPI void APIENTRY glGetTextureLevelParameterivEXT (GLuint texture, GLenum target, GLint level, GLenum pname, GLint *params);
GLAPI void APIENTRY glTextureImage3DEXT (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
GLAPI void APIENTRY glTextureSubImage3DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
GLAPI void APIENTRY glCopyTextureSubImage3DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI void APIENTRY glBindMultiTextureEXT (GLenum texunit, GLenum target, GLuint texture);
GLAPI void APIENTRY glMultiTexCoordPointerEXT (GLenum texunit, GLint size, GLenum type, GLsizei stride, const void *pointer);
GLAPI void APIENTRY glMultiTexEnvfEXT (GLenum texunit, GLenum target, GLenum pname, GLfloat param);
GLAPI void APIENTRY glMultiTexEnvfvEXT (GLenum texunit, GLenum target, GLenum pname, const GLfloat *params);
GLAPI void APIENTRY glMultiTexEnviEXT (GLenum texunit, GLenum target, GLenum pname, GLint param);
GLAPI void APIENTRY glMultiTexEnvivEXT (GLenum texunit, GLenum target, GLenum pname, const GLint *params);
GLAPI void APIENTRY glMultiTexGendEXT (GLenum texunit, GLenum coord, GLenum pname, GLdouble param);
GLAPI void APIENTRY glMultiTexGendvEXT (GLenum texunit, GLenum coord, GLenum pname, const GLdouble *params);
GLAPI void APIENTRY glMultiTexGenfEXT (GLenum texunit, GLenum coord, GLenum pname, GLfloat param);
GLAPI void APIENTRY glMultiTexGenfvEXT (GLenum texunit, GLenum coord, GLenum pname, const GLfloat *params);
GLAPI void APIENTRY glMultiTexGeniEXT (GLenum texunit, GLenum coord, GLenum pname, GLint param);
GLAPI void APIENTRY glMultiTexGenivEXT (GLenum texunit, GLenum coord, GLenum pname, const GLint *params);
GLAPI void APIENTRY glGetMultiTexEnvfvEXT (GLenum texunit, GLenum target, GLenum pname, GLfloat *params);
GLAPI void APIENTRY glGetMultiTexEnvivEXT (GLenum texunit, GLenum target, GLenum pname, GLint *params);
GLAPI void APIENTRY glGetMultiTexGendvEXT (GLenum texunit, GLenum coord, GLenum pname, GLdouble *params);
GLAPI void APIENTRY glGetMultiTexGenfvEXT (GLenum texunit, GLenum coord, GLenum pname, GLfloat *params);
GLAPI void APIENTRY glGetMultiTexGenivEXT (GLenum texunit, GLenum coord, GLenum pname, GLint *params);
GLAPI void APIENTRY glMultiTexParameteriEXT (GLenum texunit, GLenum target, GLenum pname, GLint param);
GLAPI void APIENTRY glMultiTexParameterivEXT (GLenum texunit, GLenum target, GLenum pname, const GLint *params);
GLAPI void APIENTRY glMultiTexParameterfEXT (GLenum texunit, GLenum target, GLenum pname, GLfloat param);
GLAPI void APIENTRY glMultiTexParameterfvEXT (GLenum texunit, GLenum target, GLenum pname, const GLfloat *params);
GLAPI void APIENTRY glMultiTexImage1DEXT (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels);
GLAPI void APIENTRY glMultiTexImage2DEXT (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels);
GLAPI void APIENTRY glMultiTexSubImage1DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
GLAPI void APIENTRY glMultiTexSubImage2DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
GLAPI void APIENTRY glCopyMultiTexImage1DEXT (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
GLAPI void APIENTRY glCopyMultiTexImage2DEXT (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
GLAPI void APIENTRY glCopyMultiTexSubImage1DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
GLAPI void APIENTRY glCopyMultiTexSubImage2DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI void APIENTRY glGetMultiTexImageEXT (GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, void *pixels);
GLAPI void APIENTRY glGetMultiTexParameterfvEXT (GLenum texunit, GLenum target, GLenum pname, GLfloat *params);
GLAPI void APIENTRY glGetMultiTexParameterivEXT (GLenum texunit, GLenum target, GLenum pname, GLint *params);
GLAPI void APIENTRY glGetMultiTexLevelParameterfvEXT (GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat *params);
GLAPI void APIENTRY glGetMultiTexLevelParameterivEXT (GLenum texunit, GLenum target, GLint level, GLenum pname, GLint *params);
GLAPI void APIENTRY glMultiTexImage3DEXT (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
GLAPI void APIENTRY glMultiTexSubImage3DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
GLAPI void APIENTRY glCopyMultiTexSubImage3DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI void APIENTRY glEnableClientStateIndexedEXT (GLenum array, GLuint index);
GLAPI void APIENTRY glDisableClientStateIndexedEXT (GLenum array, GLuint index);
GLAPI void APIENTRY glGetFloatIndexedvEXT (GLenum target, GLuint index, GLfloat *data);
GLAPI void APIENTRY glGetDoubleIndexedvEXT (GLenum target, GLuint index, GLdouble *data);
GLAPI void APIENTRY glGetPointerIndexedvEXT (GLenum target, GLuint index, void **data);
GLAPI void APIENTRY glEnableIndexedEXT (GLenum target, GLuint index);
GLAPI void APIENTRY glDisableIndexedEXT (GLenum target, GLuint index);
GLAPI GLboolean APIENTRY glIsEnabledIndexedEXT (GLenum target, GLuint index);
GLAPI void APIENTRY glGetIntegerIndexedvEXT (GLenum target, GLuint index, GLint *data);
GLAPI void APIENTRY glGetBooleanIndexedvEXT (GLenum target, GLuint index, GLboolean *data);
GLAPI void APIENTRY glCompressedTextureImage3DEXT (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits);
GLAPI void APIENTRY glCompressedTextureImage2DEXT (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits);
GLAPI void APIENTRY glCompressedTextureImage1DEXT (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits);
GLAPI void APIENTRY glCompressedTextureSubImage3DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *bits);
GLAPI void APIENTRY glCompressedTextureSubImage2DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *bits);
GLAPI void APIENTRY glCompressedTextureSubImage1DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *bits);
GLAPI void APIENTRY glGetCompressedTextureImageEXT (GLuint texture, GLenum target, GLint lod, void *img);
GLAPI void APIENTRY glCompressedMultiTexImage3DEXT (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits);
GLAPI void APIENTRY glCompressedMultiTexImage2DEXT (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits);
GLAPI void APIENTRY glCompressedMultiTexImage1DEXT (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits);
GLAPI void APIENTRY glCompressedMultiTexSubImage3DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *bits);
GLAPI void APIENTRY glCompressedMultiTexSubImage2DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *bits);
GLAPI void APIENTRY glCompressedMultiTexSubImage1DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *bits);
GLAPI void APIENTRY glGetCompressedMultiTexImageEXT (GLenum texunit, GLenum target, GLint lod, void *img);
GLAPI void APIENTRY glMatrixLoadTransposefEXT (GLenum mode, const GLfloat *m);
GLAPI void APIENTRY glMatrixLoadTransposedEXT (GLenum mode, const GLdouble *m);
GLAPI void APIENTRY glMatrixMultTransposefEXT (GLenum mode, const GLfloat *m);
GLAPI void APIENTRY glMatrixMultTransposedEXT (GLenum mode, const GLdouble *m);
GLAPI void APIENTRY glNamedBufferDataEXT (GLuint buffer, GLsizeiptr size, const void *data, GLenum usage);
GLAPI void APIENTRY glNamedBufferSubDataEXT (GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data);
GLAPI void *APIENTRY glMapNamedBufferEXT (GLuint buffer, GLenum access);
GLAPI GLboolean APIENTRY glUnmapNamedBufferEXT (GLuint buffer);
GLAPI void APIENTRY glGetNamedBufferParameterivEXT (GLuint buffer, GLenum pname, GLint *params);
GLAPI void APIENTRY glGetNamedBufferPointervEXT (GLuint buffer, GLenum pname, void **params);
GLAPI void APIENTRY glGetNamedBufferSubDataEXT (GLuint buffer, GLintptr offset, GLsizeiptr size, void *data);
GLAPI void APIENTRY glProgramUniform1fEXT (GLuint program, GLint location, GLfloat v0);
GLAPI void APIENTRY glProgramUniform2fEXT (GLuint program, GLint location, GLfloat v0, GLfloat v1);
GLAPI void APIENTRY glProgramUniform3fEXT (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
GLAPI void APIENTRY glProgramUniform4fEXT (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
GLAPI void APIENTRY glProgramUniform1iEXT (GLuint program, GLint location, GLint v0);
GLAPI void APIENTRY glProgramUniform2iEXT (GLuint program, GLint location, GLint v0, GLint v1);
GLAPI void APIENTRY glProgramUniform3iEXT (GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
GLAPI void APIENTRY glProgramUniform4iEXT (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
GLAPI void APIENTRY glProgramUniform1fvEXT (GLuint program, GLint location, GLsizei count, const GLfloat *value);
GLAPI void APIENTRY glProgramUniform2fvEXT (GLuint program, GLint location, GLsizei count, const GLfloat *value);
GLAPI void APIENTRY glProgramUniform3fvEXT (GLuint program, GLint location, GLsizei count, const GLfloat *value);
GLAPI void APIENTRY glProgramUniform4fvEXT (GLuint program, GLint location, GLsizei count, const GLfloat *value);
GLAPI void APIENTRY glProgramUniform1ivEXT (GLuint program, GLint location, GLsizei count, const GLint *value);
GLAPI void APIENTRY glProgramUniform2ivEXT (GLuint program, GLint location, GLsizei count, const GLint *value);
GLAPI void APIENTRY glProgramUniform3ivEXT (GLuint program, GLint location, GLsizei count, const GLint *value);
GLAPI void APIENTRY glProgramUniform4ivEXT (GLuint program, GLint location, GLsizei count, const GLint *value);
GLAPI void APIENTRY glProgramUniformMatrix2fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI void APIENTRY glProgramUniformMatrix3fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI void APIENTRY glProgramUniformMatrix4fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI void APIENTRY glProgramUniformMatrix2x3fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI void APIENTRY glProgramUniformMatrix3x2fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI void APIENTRY glProgramUniformMatrix2x4fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI void APIENTRY glProgramUniformMatrix4x2fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI void APIENTRY glProgramUniformMatrix3x4fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI void APIENTRY glProgramUniformMatrix4x3fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI void APIENTRY glTextureBufferEXT (GLuint texture, GLenum target, GLenum internalformat, GLuint buffer);
GLAPI void APIENTRY glMultiTexBufferEXT (GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer);
GLAPI void APIENTRY glTextureParameterIivEXT (GLuint texture, GLenum target, GLenum pname, const GLint *params);
GLAPI void APIENTRY glTextureParameterIuivEXT (GLuint texture, GLenum target, GLenum pname, const GLuint *params);
GLAPI void APIENTRY glGetTextureParameterIivEXT (GLuint texture, GLenum target, GLenum pname, GLint *params);
GLAPI void APIENTRY glGetTextureParameterIuivEXT (GLuint texture, GLenum target, GLenum pname, GLuint *params);
GLAPI void APIENTRY glMultiTexParameterIivEXT (GLenum texunit, GLenum target, GLenum pname, const GLint *params);
GLAPI void APIENTRY glMultiTexParameterIuivEXT (GLenum texunit, GLenum target, GLenum pname, const GLuint *params);
GLAPI void APIENTRY glGetMultiTexParameterIivEXT (GLenum texunit, GLenum target, GLenum pname, GLint *params);
GLAPI void APIENTRY glGetMultiTexParameterIuivEXT (GLenum texunit, GLenum target, GLenum pname, GLuint *params);
GLAPI void APIENTRY glProgramUniform1uiEXT (GLuint program, GLint location, GLuint v0);
GLAPI void APIENTRY glProgramUniform2uiEXT (GLuint program, GLint location, GLuint v0, GLuint v1);
GLAPI void APIENTRY glProgramUniform3uiEXT (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
GLAPI void APIENTRY glProgramUniform4uiEXT (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
GLAPI void APIENTRY glProgramUniform1uivEXT (GLuint program, GLint location, GLsizei count, const GLuint *value);
GLAPI void APIENTRY glProgramUniform2uivEXT (GLuint program, GLint location, GLsizei count, const GLuint *value);
GLAPI void APIENTRY glProgramUniform3uivEXT (GLuint program, GLint location, GLsizei count, const GLuint *value);
GLAPI void APIENTRY glProgramUniform4uivEXT (GLuint program, GLint location, GLsizei count, const GLuint *value);
GLAPI void APIENTRY glNamedProgramLocalParameters4fvEXT (GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat *params);
GLAPI void APIENTRY glNamedProgramLocalParameterI4iEXT (GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
GLAPI void APIENTRY glNamedProgramLocalParameterI4ivEXT (GLuint program, GLenum target, GLuint index, const GLint *params);
GLAPI void APIENTRY glNamedProgramLocalParametersI4ivEXT (GLuint program, GLenum target, GLuint index, GLsizei count, const GLint *params);
GLAPI void APIENTRY glNamedProgramLocalParameterI4uiEXT (GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
GLAPI void APIENTRY glNamedProgramLocalParameterI4uivEXT (GLuint program, GLenum target, GLuint index, const GLuint *params);
GLAPI void APIENTRY glNamedProgramLocalParametersI4uivEXT (GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint *params);
GLAPI void APIENTRY glGetNamedProgramLocalParameterIivEXT (GLuint program, GLenum target, GLuint index, GLint *params);
GLAPI void APIENTRY glGetNamedProgramLocalParameterIuivEXT (GLuint program, GLenum target, GLuint index, GLuint *params);
GLAPI void APIENTRY glEnableClientStateiEXT (GLenum array, GLuint index);
GLAPI void APIENTRY glDisableClientStateiEXT (GLenum array, GLuint index);
GLAPI void APIENTRY glGetFloati_vEXT (GLenum pname, GLuint index, GLfloat *params);
GLAPI void APIENTRY glGetDoublei_vEXT (GLenum pname, GLuint index, GLdouble *params);
GLAPI void APIENTRY glGetPointeri_vEXT (GLenum pname, GLuint index, void **params);
GLAPI void APIENTRY glNamedProgramStringEXT (GLuint program, GLenum target, GLenum format, GLsizei len, const void *string);
GLAPI void APIENTRY glNamedProgramLocalParameter4dEXT (GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
GLAPI void APIENTRY glNamedProgramLocalParameter4dvEXT (GLuint program, GLenum target, GLuint index, const GLdouble *params);
GLAPI void APIENTRY glNamedProgramLocalParameter4fEXT (GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
GLAPI void APIENTRY glNamedProgramLocalParameter4fvEXT (GLuint program, GLenum target, GLuint index, const GLfloat *params);
GLAPI void APIENTRY glGetNamedProgramLocalParameterdvEXT (GLuint program, GLenum target, GLuint index, GLdouble *params);
GLAPI void APIENTRY glGetNamedProgramLocalParameterfvEXT (GLuint program, GLenum target, GLuint index, GLfloat *params);
GLAPI void APIENTRY glGetNamedProgramivEXT (GLuint program, GLenum target, GLenum pname, GLint *params);
GLAPI void APIENTRY glGetNamedProgramStringEXT (GLuint program, GLenum target, GLenum pname, void *string);
GLAPI void APIENTRY glNamedRenderbufferStorageEXT (GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
GLAPI void APIENTRY glGetNamedRenderbufferParameterivEXT (GLuint renderbuffer, GLenum pname, GLint *params);
GLAPI void APIENTRY glNamedRenderbufferStorageMultisampleEXT (GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
GLAPI void APIENTRY glNamedRenderbufferStorageMultisampleCoverageEXT (GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);
GLAPI GLenum APIENTRY glCheckNamedFramebufferStatusEXT (GLuint framebuffer, GLenum target);
GLAPI void APIENTRY glNamedFramebufferTexture1DEXT (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
GLAPI void APIENTRY glNamedFramebufferTexture2DEXT (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
GLAPI void APIENTRY glNamedFramebufferTexture3DEXT (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
GLAPI void APIENTRY glNamedFramebufferRenderbufferEXT (GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
GLAPI void APIENTRY glGetNamedFramebufferAttachmentParameterivEXT (GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params);
GLAPI void APIENTRY glGenerateTextureMipmapEXT (GLuint texture, GLenum target);
GLAPI void APIENTRY glGenerateMultiTexMipmapEXT (GLenum texunit, GLenum target);
GLAPI void APIENTRY glFramebufferDrawBufferEXT (GLuint framebuffer, GLenum mode);
GLAPI void APIENTRY glFramebufferDrawBuffersEXT (GLuint framebuffer, GLsizei n, const GLenum *bufs);
GLAPI void APIENTRY glFramebufferReadBufferEXT (GLuint framebuffer, GLenum mode);
GLAPI void APIENTRY glGetFramebufferParameterivEXT (GLuint framebuffer, GLenum pname, GLint *params);
GLAPI void APIENTRY glNamedCopyBufferSubDataEXT (GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
GLAPI void APIENTRY glNamedFramebufferTextureEXT (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
GLAPI void APIENTRY glNamedFramebufferTextureLayerEXT (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
GLAPI void APIENTRY glNamedFramebufferTextureFaceEXT (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face);
GLAPI void APIENTRY glTextureRenderbufferEXT (GLuint texture, GLenum target, GLuint renderbuffer);
GLAPI void APIENTRY glMultiTexRenderbufferEXT (GLenum texunit, GLenum target, GLuint renderbuffer);
GLAPI void APIENTRY glVertexArrayVertexOffsetEXT (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
GLAPI void APIENTRY glVertexArrayColorOffsetEXT (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
GLAPI void APIENTRY glVertexArrayEdgeFlagOffsetEXT (GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset);
GLAPI void APIENTRY glVertexArrayIndexOffsetEXT (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
GLAPI void APIENTRY glVertexArrayNormalOffsetEXT (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
GLAPI void APIENTRY glVertexArrayTexCoordOffsetEXT (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
GLAPI void APIENTRY glVertexArrayMultiTexCoordOffsetEXT (GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset);
GLAPI void APIENTRY glVertexArrayFogCoordOffsetEXT (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
GLAPI void APIENTRY glVertexArraySecondaryColorOffsetEXT (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
GLAPI void APIENTRY glVertexArrayVertexAttribOffsetEXT (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset);
GLAPI void APIENTRY glVertexArrayVertexAttribIOffsetEXT (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset);
GLAPI void APIENTRY glEnableVertexArrayEXT (GLuint vaobj, GLenum array);
GLAPI void APIENTRY glDisableVertexArrayEXT (GLuint vaobj, GLenum array);
GLAPI void APIENTRY glEnableVertexArrayAttribEXT (GLuint vaobj, GLuint index);
GLAPI void APIENTRY glDisableVertexArrayAttribEXT (GLuint vaobj, GLuint index);
GLAPI void APIENTRY glGetVertexArrayIntegervEXT (GLuint vaobj, GLenum pname, GLint *param);
GLAPI void APIENTRY glGetVertexArrayPointervEXT (GLuint vaobj, GLenum pname, void **param);
GLAPI void APIENTRY glGetVertexArrayIntegeri_vEXT (GLuint vaobj, GLuint index, GLenum pname, GLint *param);
GLAPI void APIENTRY glGetVertexArrayPointeri_vEXT (GLuint vaobj, GLuint index, GLenum pname, void **param);
GLAPI void *APIENTRY glMapNamedBufferRangeEXT (GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
GLAPI void APIENTRY glFlushMappedNamedBufferRangeEXT (GLuint buffer, GLintptr offset, GLsizeiptr length);
GLAPI void APIENTRY glNamedBufferStorageEXT (GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags);
GLAPI void APIENTRY glClearNamedBufferDataEXT (GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data);
GLAPI void APIENTRY glClearNamedBufferSubDataEXT (GLuint buffer, GLenum internalformat, GLsizeiptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
GLAPI void APIENTRY glNamedFramebufferParameteriEXT (GLuint framebuffer, GLenum pname, GLint param);
GLAPI void APIENTRY glGetNamedFramebufferParameterivEXT (GLuint framebuffer, GLenum pname, GLint *params);
GLAPI void APIENTRY glProgramUniform1dEXT (GLuint program, GLint location, GLdouble x);
GLAPI void APIENTRY glProgramUniform2dEXT (GLuint program, GLint location, GLdouble x, GLdouble y);
GLAPI void APIENTRY glProgramUniform3dEXT (GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z);
GLAPI void APIENTRY glProgramUniform4dEXT (GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
GLAPI void APIENTRY glProgramUniform1dvEXT (GLuint program, GLint location, GLsizei count, const GLdouble *value);
GLAPI void APIENTRY glProgramUniform2dvEXT (GLuint program, GLint location, GLsizei count, const GLdouble *value);
GLAPI void APIENTRY glProgramUniform3dvEXT (GLuint program, GLint location, GLsizei count, const GLdouble *value);
GLAPI void APIENTRY glProgramUniform4dvEXT (GLuint program, GLint location, GLsizei count, const GLdouble *value);
GLAPI void APIENTRY glProgramUniformMatrix2dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI void APIENTRY glProgramUniformMatrix3dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI void APIENTRY glProgramUniformMatrix4dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI void APIENTRY glProgramUniformMatrix2x3dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI void APIENTRY glProgramUniformMatrix2x4dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI void APIENTRY glProgramUniformMatrix3x2dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI void APIENTRY glProgramUniformMatrix3x4dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI void APIENTRY glProgramUniformMatrix4x2dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI void APIENTRY glProgramUniformMatrix4x3dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI void APIENTRY glTextureBufferRangeEXT (GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
GLAPI void APIENTRY glTextureStorage1DEXT (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
GLAPI void APIENTRY glTextureStorage2DEXT (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
GLAPI void APIENTRY glTextureStorage3DEXT (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
GLAPI void APIENTRY glTextureStorage2DMultisampleEXT (GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
GLAPI void APIENTRY glTextureStorage3DMultisampleEXT (GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
GLAPI void APIENTRY glVertexArrayBindVertexBufferEXT (GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
GLAPI void APIENTRY glVertexArrayVertexAttribFormatEXT (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
GLAPI void APIENTRY glVertexArrayVertexAttribIFormatEXT (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
GLAPI void APIENTRY glVertexArrayVertexAttribLFormatEXT (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
GLAPI void APIENTRY glVertexArrayVertexAttribBindingEXT (GLuint vaobj, GLuint attribindex, GLuint bindingindex);
GLAPI void APIENTRY glVertexArrayVertexBindingDivisorEXT (GLuint vaobj, GLuint bindingindex, GLuint divisor);
GLAPI void APIENTRY glVertexArrayVertexAttribLOffsetEXT (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset);
GLAPI void APIENTRY glTexturePageCommitmentEXT (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit);
GLAPI void APIENTRY glVertexArrayVertexAttribDivisorEXT (GLuint vaobj, GLuint index, GLuint divisor);
#endif
#endif /* GL_EXT_direct_state_access */

#ifndef GL_EXT_draw_instanced
#define GL_EXT_draw_instanced 1
typedef void (APIENTRYP PFNGLDRAWARRAYSINSTANCEDEXTPROC) (GLenum mode, GLint start, GLsizei count, GLsizei primcount);
typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDEXTPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glDrawArraysInstancedEXT (GLenum mode, GLint start, GLsizei count, GLsizei primcount);
GLAPI void APIENTRY glDrawElementsInstancedEXT (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount);
#endif
#endif /* GL_EXT_draw_instanced */

#ifndef GL_EXT_polygon_offset_clamp
#define GL_EXT_polygon_offset_clamp 1
#define GL_POLYGON_OFFSET_CLAMP_EXT       0x8E1B
typedef void (APIENTRYP PFNGLPOLYGONOFFSETCLAMPEXTPROC) (GLfloat factor, GLfloat units, GLfloat clamp);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glPolygonOffsetClampEXT (GLfloat factor, GLfloat units, GLfloat clamp);
#endif
#endif /* GL_EXT_polygon_offset_clamp */

#ifndef GL_EXT_post_depth_coverage
#define GL_EXT_post_depth_coverage 1
#endif /* GL_EXT_post_depth_coverage */

#ifndef GL_EXT_raster_multisample
#define GL_EXT_raster_multisample 1
#define GL_RASTER_MULTISAMPLE_EXT         0x9327
#define GL_RASTER_SAMPLES_EXT             0x9328
#define GL_MAX_RASTER_SAMPLES_EXT         0x9329
#define GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT 0x932A
#define GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT 0x932B
#define GL_EFFECTIVE_RASTER_SAMPLES_EXT   0x932C
typedef void (APIENTRYP PFNGLRASTERSAMPLESEXTPROC) (GLuint samples, GLboolean fixedsamplelocations);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glRasterSamplesEXT (GLuint samples, GLboolean fixedsamplelocations);
#endif
#endif /* GL_EXT_raster_multisample */

#ifndef GL_EXT_separate_shader_objects
#define GL_EXT_separate_shader_objects 1
#define GL_ACTIVE_PROGRAM_EXT             0x8B8D
typedef void (APIENTRYP PFNGLUSESHADERPROGRAMEXTPROC) (GLenum type, GLuint program);
typedef void (APIENTRYP PFNGLACTIVEPROGRAMEXTPROC) (GLuint program);
typedef GLuint (APIENTRYP PFNGLCREATESHADERPROGRAMEXTPROC) (GLenum type, const GLchar *string);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glUseShaderProgramEXT (GLenum type, GLuint program);
GLAPI void APIENTRY glActiveProgramEXT (GLuint program);
GLAPI GLuint APIENTRY glCreateShaderProgramEXT (GLenum type, const GLchar *string);
#endif
#endif /* GL_EXT_separate_shader_objects */

#ifndef GL_EXT_shader_integer_mix
#define GL_EXT_shader_integer_mix 1
#endif /* GL_EXT_shader_integer_mix */

#ifndef GL_EXT_texture_compression_s3tc
#define GL_EXT_texture_compression_s3tc 1
#define GL_COMPRESSED_RGB_S3TC_DXT1_EXT   0x83F0
#define GL_COMPRESSED_RGBA_S3TC_DXT1_EXT  0x83F1
#define GL_COMPRESSED_RGBA_S3TC_DXT3_EXT  0x83F2
#define GL_COMPRESSED_RGBA_S3TC_DXT5_EXT  0x83F3
#endif /* GL_EXT_texture_compression_s3tc */

#ifndef GL_EXT_texture_filter_minmax
#define GL_EXT_texture_filter_minmax 1
#endif /* GL_EXT_texture_filter_minmax */

#ifndef GL_EXT_texture_sRGB_decode
#define GL_EXT_texture_sRGB_decode 1
#define GL_TEXTURE_SRGB_DECODE_EXT        0x8A48
#define GL_DECODE_EXT                     0x8A49
#define GL_SKIP_DECODE_EXT                0x8A4A
#endif /* GL_EXT_texture_sRGB_decode */

#ifndef GL_EXT_window_rectangles
#define GL_EXT_window_rectangles 1
#define GL_INCLUSIVE_EXT                  0x8F10
#define GL_EXCLUSIVE_EXT                  0x8F11
#define GL_WINDOW_RECTANGLE_EXT           0x8F12
#define GL_WINDOW_RECTANGLE_MODE_EXT      0x8F13
#define GL_MAX_WINDOW_RECTANGLES_EXT      0x8F14
#define GL_NUM_WINDOW_RECTANGLES_EXT      0x8F15
typedef void (APIENTRYP PFNGLWINDOWRECTANGLESEXTPROC) (GLenum mode, GLsizei count, const GLint *box);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glWindowRectanglesEXT (GLenum mode, GLsizei count, const GLint *box);
#endif
#endif /* GL_EXT_window_rectangles */

#ifndef GL_INTEL_conservative_rasterization
#define GL_INTEL_conservative_rasterization 1
#define GL_CONSERVATIVE_RASTERIZATION_INTEL 0x83FE
#endif /* GL_INTEL_conservative_rasterization */

#ifndef GL_INTEL_framebuffer_CMAA
#define GL_INTEL_framebuffer_CMAA 1
typedef void (APIENTRYP PFNGLAPPLYFRAMEBUFFERATTACHMENTCMAAINTELPROC) (void);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glApplyFramebufferAttachmentCMAAINTEL (void);
#endif
#endif /* GL_INTEL_framebuffer_CMAA */

#ifndef GL_INTEL_performance_query
#define GL_INTEL_performance_query 1
#define GL_PERFQUERY_SINGLE_CONTEXT_INTEL 0x00000000
#define GL_PERFQUERY_GLOBAL_CONTEXT_INTEL 0x00000001
#define GL_PERFQUERY_WAIT_INTEL           0x83FB
#define GL_PERFQUERY_FLUSH_INTEL          0x83FA
#define GL_PERFQUERY_DONOT_FLUSH_INTEL    0x83F9
#define GL_PERFQUERY_COUNTER_EVENT_INTEL  0x94F0
#define GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL 0x94F1
#define GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL 0x94F2
#define GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL 0x94F3
#define GL_PERFQUERY_COUNTER_RAW_INTEL    0x94F4
#define GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL 0x94F5
#define GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL 0x94F8
#define GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL 0x94F9
#define GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL 0x94FA
#define GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL 0x94FB
#define GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL 0x94FC
#define GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL 0x94FD
#define GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL 0x94FE
#define GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL 0x94FF
#define GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL 0x9500
typedef void (APIENTRYP PFNGLBEGINPERFQUERYINTELPROC) (GLuint queryHandle);
typedef void (APIENTRYP PFNGLCREATEPERFQUERYINTELPROC) (GLuint queryId, GLuint *queryHandle);
typedef void (APIENTRYP PFNGLDELETEPERFQUERYINTELPROC) (GLuint queryHandle);
typedef void (APIENTRYP PFNGLENDPERFQUERYINTELPROC) (GLuint queryHandle);
typedef void (APIENTRYP PFNGLGETFIRSTPERFQUERYIDINTELPROC) (GLuint *queryId);
typedef void (APIENTRYP PFNGLGETNEXTPERFQUERYIDINTELPROC) (GLuint queryId, GLuint *nextQueryId);
typedef void (APIENTRYP PFNGLGETPERFCOUNTERINFOINTELPROC) (GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar *counterName, GLuint counterDescLength, GLchar *counterDesc, GLuint *counterOffset, GLuint *counterDataSize, GLuint *counterTypeEnum, GLuint *counterDataTypeEnum, GLuint64 *rawCounterMaxValue);
typedef void (APIENTRYP PFNGLGETPERFQUERYDATAINTELPROC) (GLuint queryHandle, GLuint flags, GLsizei dataSize, GLvoid *data, GLuint *bytesWritten);
typedef void (APIENTRYP PFNGLGETPERFQUERYIDBYNAMEINTELPROC) (GLchar *queryName, GLuint *queryId);
typedef void (APIENTRYP PFNGLGETPERFQUERYINFOINTELPROC) (GLuint queryId, GLuint queryNameLength, GLchar *queryName, GLuint *dataSize, GLuint *noCounters, GLuint *noInstances, GLuint *capsMask);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glBeginPerfQueryINTEL (GLuint queryHandle);
GLAPI void APIENTRY glCreatePerfQueryINTEL (GLuint queryId, GLuint *queryHandle);
GLAPI void APIENTRY glDeletePerfQueryINTEL (GLuint queryHandle);
GLAPI void APIENTRY glEndPerfQueryINTEL (GLuint queryHandle);
GLAPI void APIENTRY glGetFirstPerfQueryIdINTEL (GLuint *queryId);
GLAPI void APIENTRY glGetNextPerfQueryIdINTEL (GLuint queryId, GLuint *nextQueryId);
GLAPI void APIENTRY glGetPerfCounterInfoINTEL (GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar *counterName, GLuint counterDescLength, GLchar *counterDesc, GLuint *counterOffset, GLuint *counterDataSize, GLuint *counterTypeEnum, GLuint *counterDataTypeEnum, GLuint64 *rawCounterMaxValue);
GLAPI void APIENTRY glGetPerfQueryDataINTEL (GLuint queryHandle, GLuint flags, GLsizei dataSize, GLvoid *data, GLuint *bytesWritten);
GLAPI void APIENTRY glGetPerfQueryIdByNameINTEL (GLchar *queryName, GLuint *queryId);
GLAPI void APIENTRY glGetPerfQueryInfoINTEL (GLuint queryId, GLuint queryNameLength, GLchar *queryName, GLuint *dataSize, GLuint *noCounters, GLuint *noInstances, GLuint *capsMask);
#endif
#endif /* GL_INTEL_performance_query */

#ifndef GL_NV_bindless_multi_draw_indirect
#define GL_NV_bindless_multi_draw_indirect 1
typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC) (GLenum mode, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount);
typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC) (GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glMultiDrawArraysIndirectBindlessNV (GLenum mode, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount);
GLAPI void APIENTRY glMultiDrawElementsIndirectBindlessNV (GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount);
#endif
#endif /* GL_NV_bindless_multi_draw_indirect */

#ifndef GL_NV_bindless_multi_draw_indirect_count
#define GL_NV_bindless_multi_draw_indirect_count 1
typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSCOUNTNVPROC) (GLenum mode, const void *indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount);
typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSCOUNTNVPROC) (GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glMultiDrawArraysIndirectBindlessCountNV (GLenum mode, const void *indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount);
GLAPI void APIENTRY glMultiDrawElementsIndirectBindlessCountNV (GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount);
#endif
#endif /* GL_NV_bindless_multi_draw_indirect_count */

#ifndef GL_NV_bindless_texture
#define GL_NV_bindless_texture 1
typedef GLuint64 (APIENTRYP PFNGLGETTEXTUREHANDLENVPROC) (GLuint texture);
typedef GLuint64 (APIENTRYP PFNGLGETTEXTURESAMPLERHANDLENVPROC) (GLuint texture, GLuint sampler);
typedef void (APIENTRYP PFNGLMAKETEXTUREHANDLERESIDENTNVPROC) (GLuint64 handle);
typedef void (APIENTRYP PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC) (GLuint64 handle);
typedef GLuint64 (APIENTRYP PFNGLGETIMAGEHANDLENVPROC) (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format);
typedef void (APIENTRYP PFNGLMAKEIMAGEHANDLERESIDENTNVPROC) (GLuint64 handle, GLenum access);
typedef void (APIENTRYP PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC) (GLuint64 handle);
typedef void (APIENTRYP PFNGLUNIFORMHANDLEUI64NVPROC) (GLint location, GLuint64 value);
typedef void (APIENTRYP PFNGLUNIFORMHANDLEUI64VNVPROC) (GLint location, GLsizei count, const GLuint64 *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC) (GLuint program, GLint location, GLuint64 value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64 *values);
typedef GLboolean (APIENTRYP PFNGLISTEXTUREHANDLERESIDENTNVPROC) (GLuint64 handle);
typedef GLboolean (APIENTRYP PFNGLISIMAGEHANDLERESIDENTNVPROC) (GLuint64 handle);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI GLuint64 APIENTRY glGetTextureHandleNV (GLuint texture);
GLAPI GLuint64 APIENTRY glGetTextureSamplerHandleNV (GLuint texture, GLuint sampler);
GLAPI void APIENTRY glMakeTextureHandleResidentNV (GLuint64 handle);
GLAPI void APIENTRY glMakeTextureHandleNonResidentNV (GLuint64 handle);
GLAPI GLuint64 APIENTRY glGetImageHandleNV (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format);
GLAPI void APIENTRY glMakeImageHandleResidentNV (GLuint64 handle, GLenum access);
GLAPI void APIENTRY glMakeImageHandleNonResidentNV (GLuint64 handle);
GLAPI void APIENTRY glUniformHandleui64NV (GLint location, GLuint64 value);
GLAPI void APIENTRY glUniformHandleui64vNV (GLint location, GLsizei count, const GLuint64 *value);
GLAPI void APIENTRY glProgramUniformHandleui64NV (GLuint program, GLint location, GLuint64 value);
GLAPI void APIENTRY glProgramUniformHandleui64vNV (GLuint program, GLint location, GLsizei count, const GLuint64 *values);
GLAPI GLboolean APIENTRY glIsTextureHandleResidentNV (GLuint64 handle);
GLAPI GLboolean APIENTRY glIsImageHandleResidentNV (GLuint64 handle);
#endif
#endif /* GL_NV_bindless_texture */

#ifndef GL_NV_blend_equation_advanced
#define GL_NV_blend_equation_advanced 1
#define GL_BLEND_OVERLAP_NV               0x9281
#define GL_BLEND_PREMULTIPLIED_SRC_NV     0x9280
#define GL_BLUE_NV                        0x1905
#define GL_COLORBURN_NV                   0x929A
#define GL_COLORDODGE_NV                  0x9299
#define GL_CONJOINT_NV                    0x9284
#define GL_CONTRAST_NV                    0x92A1
#define GL_DARKEN_NV                      0x9297
#define GL_DIFFERENCE_NV                  0x929E
#define GL_DISJOINT_NV                    0x9283
#define GL_DST_ATOP_NV                    0x928F
#define GL_DST_IN_NV                      0x928B
#define GL_DST_NV                         0x9287
#define GL_DST_OUT_NV                     0x928D
#define GL_DST_OVER_NV                    0x9289
#define GL_EXCLUSION_NV                   0x92A0
#define GL_GREEN_NV                       0x1904
#define GL_HARDLIGHT_NV                   0x929B
#define GL_HARDMIX_NV                     0x92A9
#define GL_HSL_COLOR_NV                   0x92AF
#define GL_HSL_HUE_NV                     0x92AD
#define GL_HSL_LUMINOSITY_NV              0x92B0
#define GL_HSL_SATURATION_NV              0x92AE
#define GL_INVERT_OVG_NV                  0x92B4
#define GL_INVERT_RGB_NV                  0x92A3
#define GL_LIGHTEN_NV                     0x9298
#define GL_LINEARBURN_NV                  0x92A5
#define GL_LINEARDODGE_NV                 0x92A4
#define GL_LINEARLIGHT_NV                 0x92A7
#define GL_MINUS_CLAMPED_NV               0x92B3
#define GL_MINUS_NV                       0x929F
#define GL_MULTIPLY_NV                    0x9294
#define GL_OVERLAY_NV                     0x9296
#define GL_PINLIGHT_NV                    0x92A8
#define GL_PLUS_CLAMPED_ALPHA_NV          0x92B2
#define GL_PLUS_CLAMPED_NV                0x92B1
#define GL_PLUS_DARKER_NV                 0x9292
#define GL_PLUS_NV                        0x9291
#define GL_RED_NV                         0x1903
#define GL_SCREEN_NV                      0x9295
#define GL_SOFTLIGHT_NV                   0x929C
#define GL_SRC_ATOP_NV                    0x928E
#define GL_SRC_IN_NV                      0x928A
#define GL_SRC_NV                         0x9286
#define GL_SRC_OUT_NV                     0x928C
#define GL_SRC_OVER_NV                    0x9288
#define GL_UNCORRELATED_NV                0x9282
#define GL_VIVIDLIGHT_NV                  0x92A6
#define GL_XOR_NV                         0x1506
typedef void (APIENTRYP PFNGLBLENDPARAMETERINVPROC) (GLenum pname, GLint value);
typedef void (APIENTRYP PFNGLBLENDBARRIERNVPROC) (void);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glBlendParameteriNV (GLenum pname, GLint value);
GLAPI void APIENTRY glBlendBarrierNV (void);
#endif
#endif /* GL_NV_blend_equation_advanced */

#ifndef GL_NV_blend_equation_advanced_coherent
#define GL_NV_blend_equation_advanced_coherent 1
#define GL_BLEND_ADVANCED_COHERENT_NV     0x9285
#endif /* GL_NV_blend_equation_advanced_coherent */

#ifndef GL_NV_blend_minmax_factor
#define GL_NV_blend_minmax_factor 1
#define GL_FACTOR_MIN_AMD                 0x901C
#define GL_FACTOR_MAX_AMD                 0x901D
#endif /* GL_NV_blend_minmax_factor */

#ifndef GL_NV_clip_space_w_scaling
#define GL_NV_clip_space_w_scaling 1
#define GL_VIEWPORT_POSITION_W_SCALE_NV   0x937C
#define GL_VIEWPORT_POSITION_W_SCALE_X_COEFF_NV 0x937D
#define GL_VIEWPORT_POSITION_W_SCALE_Y_COEFF_NV 0x937E
typedef void (APIENTRYP PFNGLVIEWPORTPOSITIONWSCALENVPROC) (GLuint index, GLfloat xcoeff, GLfloat ycoeff);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glViewportPositionWScaleNV (GLuint index, GLfloat xcoeff, GLfloat ycoeff);
#endif
#endif /* GL_NV_clip_space_w_scaling */

#ifndef GL_NV_command_list
#define GL_NV_command_list 1
#define GL_TERMINATE_SEQUENCE_COMMAND_NV  0x0000
#define GL_NOP_COMMAND_NV                 0x0001
#define GL_DRAW_ELEMENTS_COMMAND_NV       0x0002
#define GL_DRAW_ARRAYS_COMMAND_NV         0x0003
#define GL_DRAW_ELEMENTS_STRIP_COMMAND_NV 0x0004
#define GL_DRAW_ARRAYS_STRIP_COMMAND_NV   0x0005
#define GL_DRAW_ELEMENTS_INSTANCED_COMMAND_NV 0x0006
#define GL_DRAW_ARRAYS_INSTANCED_COMMAND_NV 0x0007
#define GL_ELEMENT_ADDRESS_COMMAND_NV     0x0008
#define GL_ATTRIBUTE_ADDRESS_COMMAND_NV   0x0009
#define GL_UNIFORM_ADDRESS_COMMAND_NV     0x000A
#define GL_BLEND_COLOR_COMMAND_NV         0x000B
#define GL_STENCIL_REF_COMMAND_NV         0x000C
#define GL_LINE_WIDTH_COMMAND_NV          0x000D
#define GL_POLYGON_OFFSET_COMMAND_NV      0x000E
#define GL_ALPHA_REF_COMMAND_NV           0x000F
#define GL_VIEWPORT_COMMAND_NV            0x0010
#define GL_SCISSOR_COMMAND_NV             0x0011
#define GL_FRONT_FACE_COMMAND_NV          0x0012
typedef void (APIENTRYP PFNGLCREATESTATESNVPROC) (GLsizei n, GLuint *states);
typedef void (APIENTRYP PFNGLDELETESTATESNVPROC) (GLsizei n, const GLuint *states);
typedef GLboolean (APIENTRYP PFNGLISSTATENVPROC) (GLuint state);
typedef void (APIENTRYP PFNGLSTATECAPTURENVPROC) (GLuint state, GLenum mode);
typedef GLuint (APIENTRYP PFNGLGETCOMMANDHEADERNVPROC) (GLenum tokenID, GLuint size);
typedef GLushort (APIENTRYP PFNGLGETSTAGEINDEXNVPROC) (GLenum shadertype);
typedef void (APIENTRYP PFNGLDRAWCOMMANDSNVPROC) (GLenum primitiveMode, GLuint buffer, const GLintptr *indirects, const GLsizei *sizes, GLuint count);
typedef void (APIENTRYP PFNGLDRAWCOMMANDSADDRESSNVPROC) (GLenum primitiveMode, const GLuint64 *indirects, const GLsizei *sizes, GLuint count);
typedef void (APIENTRYP PFNGLDRAWCOMMANDSSTATESNVPROC) (GLuint buffer, const GLintptr *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count);
typedef void (APIENTRYP PFNGLDRAWCOMMANDSSTATESADDRESSNVPROC) (const GLuint64 *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count);
typedef void (APIENTRYP PFNGLCREATECOMMANDLISTSNVPROC) (GLsizei n, GLuint *lists);
typedef void (APIENTRYP PFNGLDELETECOMMANDLISTSNVPROC) (GLsizei n, const GLuint *lists);
typedef GLboolean (APIENTRYP PFNGLISCOMMANDLISTNVPROC) (GLuint list);
typedef void (APIENTRYP PFNGLLISTDRAWCOMMANDSSTATESCLIENTNVPROC) (GLuint list, GLuint segment, const void **indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count);
typedef void (APIENTRYP PFNGLCOMMANDLISTSEGMENTSNVPROC) (GLuint list, GLuint segments);
typedef void (APIENTRYP PFNGLCOMPILECOMMANDLISTNVPROC) (GLuint list);
typedef void (APIENTRYP PFNGLCALLCOMMANDLISTNVPROC) (GLuint list);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glCreateStatesNV (GLsizei n, GLuint *states);
GLAPI void APIENTRY glDeleteStatesNV (GLsizei n, const GLuint *states);
GLAPI GLboolean APIENTRY glIsStateNV (GLuint state);
GLAPI void APIENTRY glStateCaptureNV (GLuint state, GLenum mode);
GLAPI GLuint APIENTRY glGetCommandHeaderNV (GLenum tokenID, GLuint size);
GLAPI GLushort APIENTRY glGetStageIndexNV (GLenum shadertype);
GLAPI void APIENTRY glDrawCommandsNV (GLenum primitiveMode, GLuint buffer, const GLintptr *indirects, const GLsizei *sizes, GLuint count);
GLAPI void APIENTRY glDrawCommandsAddressNV (GLenum primitiveMode, const GLuint64 *indirects, const GLsizei *sizes, GLuint count);
GLAPI void APIENTRY glDrawCommandsStatesNV (GLuint buffer, const GLintptr *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count);
GLAPI void APIENTRY glDrawCommandsStatesAddressNV (const GLuint64 *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count);
GLAPI void APIENTRY glCreateCommandListsNV (GLsizei n, GLuint *lists);
GLAPI void APIENTRY glDeleteCommandListsNV (GLsizei n, const GLuint *lists);
GLAPI GLboolean APIENTRY glIsCommandListNV (GLuint list);
GLAPI void APIENTRY glListDrawCommandsStatesClientNV (GLuint list, GLuint segment, const void **indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count);
GLAPI void APIENTRY glCommandListSegmentsNV (GLuint list, GLuint segments);
GLAPI void APIENTRY glCompileCommandListNV (GLuint list);
GLAPI void APIENTRY glCallCommandListNV (GLuint list);
#endif
#endif /* GL_NV_command_list */

#ifndef GL_NV_conditional_render
#define GL_NV_conditional_render 1
#define GL_QUERY_WAIT_NV                  0x8E13
#define GL_QUERY_NO_WAIT_NV               0x8E14
#define GL_QUERY_BY_REGION_WAIT_NV        0x8E15
#define GL_QUERY_BY_REGION_NO_WAIT_NV     0x8E16
typedef void (APIENTRYP PFNGLBEGINCONDITIONALRENDERNVPROC) (GLuint id, GLenum mode);
typedef void (APIENTRYP PFNGLENDCONDITIONALRENDERNVPROC) (void);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glBeginConditionalRenderNV (GLuint id, GLenum mode);
GLAPI void APIENTRY glEndConditionalRenderNV (void);
#endif
#endif /* GL_NV_conditional_render */

#ifndef GL_NV_conservative_raster
#define GL_NV_conservative_raster 1
#define GL_CONSERVATIVE_RASTERIZATION_NV  0x9346
#define GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV 0x9347
#define GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV 0x9348
#define GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV 0x9349
typedef void (APIENTRYP PFNGLSUBPIXELPRECISIONBIASNVPROC) (GLuint xbits, GLuint ybits);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glSubpixelPrecisionBiasNV (GLuint xbits, GLuint ybits);
#endif
#endif /* GL_NV_conservative_raster */

#ifndef GL_NV_conservative_raster_dilate
#define GL_NV_conservative_raster_dilate 1
#define GL_CONSERVATIVE_RASTER_DILATE_NV  0x9379
#define GL_CONSERVATIVE_RASTER_DILATE_RANGE_NV 0x937A
#define GL_CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV 0x937B
typedef void (APIENTRYP PFNGLCONSERVATIVERASTERPARAMETERFNVPROC) (GLenum pname, GLfloat value);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glConservativeRasterParameterfNV (GLenum pname, GLfloat value);
#endif
#endif /* GL_NV_conservative_raster_dilate */

#ifndef GL_NV_conservative_raster_pre_snap_triangles
#define GL_NV_conservative_raster_pre_snap_triangles 1
#define GL_CONSERVATIVE_RASTER_MODE_NV    0x954D
#define GL_CONSERVATIVE_RASTER_MODE_POST_SNAP_NV 0x954E
#define GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV 0x954F
typedef void (APIENTRYP PFNGLCONSERVATIVERASTERPARAMETERINVPROC) (GLenum pname, GLint param);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glConservativeRasterParameteriNV (GLenum pname, GLint param);
#endif
#endif /* GL_NV_conservative_raster_pre_snap_triangles */

#ifndef GL_NV_draw_vulkan_image
#define GL_NV_draw_vulkan_image 1
typedef void (APIENTRY  *GLVULKANPROCNV)(void);
typedef void (APIENTRYP PFNGLDRAWVKIMAGENVPROC) (GLuint64 vkImage, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1);
typedef GLVULKANPROCNV (APIENTRYP PFNGLGETVKPROCADDRNVPROC) (const GLchar *name);
typedef void (APIENTRYP PFNGLWAITVKSEMAPHORENVPROC) (GLuint64 vkSemaphore);
typedef void (APIENTRYP PFNGLSIGNALVKSEMAPHORENVPROC) (GLuint64 vkSemaphore);
typedef void (APIENTRYP PFNGLSIGNALVKFENCENVPROC) (GLuint64 vkFence);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glDrawVkImageNV (GLuint64 vkImage, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1);
GLAPI GLVULKANPROCNV APIENTRY glGetVkProcAddrNV (const GLchar *name);
GLAPI void APIENTRY glWaitVkSemaphoreNV (GLuint64 vkSemaphore);
GLAPI void APIENTRY glSignalVkSemaphoreNV (GLuint64 vkSemaphore);
GLAPI void APIENTRY glSignalVkFenceNV (GLuint64 vkFence);
#endif
#endif /* GL_NV_draw_vulkan_image */

#ifndef GL_NV_fill_rectangle
#define GL_NV_fill_rectangle 1
#define GL_FILL_RECTANGLE_NV              0x933C
#endif /* GL_NV_fill_rectangle */

#ifndef GL_NV_fragment_coverage_to_color
#define GL_NV_fragment_coverage_to_color 1
#define GL_FRAGMENT_COVERAGE_TO_COLOR_NV  0x92DD
#define GL_FRAGMENT_COVERAGE_COLOR_NV     0x92DE
typedef void (APIENTRYP PFNGLFRAGMENTCOVERAGECOLORNVPROC) (GLuint color);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glFragmentCoverageColorNV (GLuint color);
#endif
#endif /* GL_NV_fragment_coverage_to_color */

#ifndef GL_NV_fragment_shader_interlock
#define GL_NV_fragment_shader_interlock 1
#endif /* GL_NV_fragment_shader_interlock */

#ifndef GL_NV_framebuffer_mixed_samples
#define GL_NV_framebuffer_mixed_samples 1
#define GL_COVERAGE_MODULATION_TABLE_NV   0x9331
#define GL_COLOR_SAMPLES_NV               0x8E20
#define GL_DEPTH_SAMPLES_NV               0x932D
#define GL_STENCIL_SAMPLES_NV             0x932E
#define GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV 0x932F
#define GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV 0x9330
#define GL_COVERAGE_MODULATION_NV         0x9332
#define GL_COVERAGE_MODULATION_TABLE_SIZE_NV 0x9333
typedef void (APIENTRYP PFNGLCOVERAGEMODULATIONTABLENVPROC) (GLsizei n, const GLfloat *v);
typedef void (APIENTRYP PFNGLGETCOVERAGEMODULATIONTABLENVPROC) (GLsizei bufsize, GLfloat *v);
typedef void (APIENTRYP PFNGLCOVERAGEMODULATIONNVPROC) (GLenum components);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glCoverageModulationTableNV (GLsizei n, const GLfloat *v);
GLAPI void APIENTRY glGetCoverageModulationTableNV (GLsizei bufsize, GLfloat *v);
GLAPI void APIENTRY glCoverageModulationNV (GLenum components);
#endif
#endif /* GL_NV_framebuffer_mixed_samples */

#ifndef GL_NV_framebuffer_multisample_coverage
#define GL_NV_framebuffer_multisample_coverage 1
#define GL_RENDERBUFFER_COVERAGE_SAMPLES_NV 0x8CAB
#define GL_RENDERBUFFER_COLOR_SAMPLES_NV  0x8E10
#define GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV 0x8E11
#define GL_MULTISAMPLE_COVERAGE_MODES_NV  0x8E12
typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC) (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glRenderbufferStorageMultisampleCoverageNV (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);
#endif
#endif /* GL_NV_framebuffer_multisample_coverage */

#ifndef GL_NV_geometry_shader_passthrough
#define GL_NV_geometry_shader_passthrough 1
#endif /* GL_NV_geometry_shader_passthrough */

#ifndef GL_NV_gpu_shader5
#define GL_NV_gpu_shader5 1
typedef int64_t GLint64EXT;
#define GL_INT64_NV                       0x140E
#define GL_UNSIGNED_INT64_NV              0x140F
#define GL_INT8_NV                        0x8FE0
#define GL_INT8_VEC2_NV                   0x8FE1
#define GL_INT8_VEC3_NV                   0x8FE2
#define GL_INT8_VEC4_NV                   0x8FE3
#define GL_INT16_NV                       0x8FE4
#define GL_INT16_VEC2_NV                  0x8FE5
#define GL_INT16_VEC3_NV                  0x8FE6
#define GL_INT16_VEC4_NV                  0x8FE7
#define GL_INT64_VEC2_NV                  0x8FE9
#define GL_INT64_VEC3_NV                  0x8FEA
#define GL_INT64_VEC4_NV                  0x8FEB
#define GL_UNSIGNED_INT8_NV               0x8FEC
#define GL_UNSIGNED_INT8_VEC2_NV          0x8FED
#define GL_UNSIGNED_INT8_VEC3_NV          0x8FEE
#define GL_UNSIGNED_INT8_VEC4_NV          0x8FEF
#define GL_UNSIGNED_INT16_NV              0x8FF0
#define GL_UNSIGNED_INT16_VEC2_NV         0x8FF1
#define GL_UNSIGNED_INT16_VEC3_NV         0x8FF2
#define GL_UNSIGNED_INT16_VEC4_NV         0x8FF3
#define GL_UNSIGNED_INT64_VEC2_NV         0x8FF5
#define GL_UNSIGNED_INT64_VEC3_NV         0x8FF6
#define GL_UNSIGNED_INT64_VEC4_NV         0x8FF7
#define GL_FLOAT16_NV                     0x8FF8
#define GL_FLOAT16_VEC2_NV                0x8FF9
#define GL_FLOAT16_VEC3_NV                0x8FFA
#define GL_FLOAT16_VEC4_NV                0x8FFB
typedef void (APIENTRYP PFNGLUNIFORM1I64NVPROC) (GLint location, GLint64EXT x);
typedef void (APIENTRYP PFNGLUNIFORM2I64NVPROC) (GLint location, GLint64EXT x, GLint64EXT y);
typedef void (APIENTRYP PFNGLUNIFORM3I64NVPROC) (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z);
typedef void (APIENTRYP PFNGLUNIFORM4I64NVPROC) (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
typedef void (APIENTRYP PFNGLUNIFORM1I64VNVPROC) (GLint location, GLsizei count, const GLint64EXT *value);
typedef void (APIENTRYP PFNGLUNIFORM2I64VNVPROC) (GLint location, GLsizei count, const GLint64EXT *value);
typedef void (APIENTRYP PFNGLUNIFORM3I64VNVPROC) (GLint location, GLsizei count, const GLint64EXT *value);
typedef void (APIENTRYP PFNGLUNIFORM4I64VNVPROC) (GLint location, GLsizei count, const GLint64EXT *value);
typedef void (APIENTRYP PFNGLUNIFORM1UI64NVPROC) (GLint location, GLuint64EXT x);
typedef void (APIENTRYP PFNGLUNIFORM2UI64NVPROC) (GLint location, GLuint64EXT x, GLuint64EXT y);
typedef void (APIENTRYP PFNGLUNIFORM3UI64NVPROC) (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
typedef void (APIENTRYP PFNGLUNIFORM4UI64NVPROC) (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
typedef void (APIENTRYP PFNGLUNIFORM1UI64VNVPROC) (GLint location, GLsizei count, const GLuint64EXT *value);
typedef void (APIENTRYP PFNGLUNIFORM2UI64VNVPROC) (GLint location, GLsizei count, const GLuint64EXT *value);
typedef void (APIENTRYP PFNGLUNIFORM3UI64VNVPROC) (GLint location, GLsizei count, const GLuint64EXT *value);
typedef void (APIENTRYP PFNGLUNIFORM4UI64VNVPROC) (GLint location, GLsizei count, const GLuint64EXT *value);
typedef void (APIENTRYP PFNGLGETUNIFORMI64VNVPROC) (GLuint program, GLint location, GLint64EXT *params);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1I64NVPROC) (GLuint program, GLint location, GLint64EXT x);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2I64NVPROC) (GLuint program, GLint location, GLint64EXT x, GLint64EXT y);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3I64NVPROC) (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4I64NVPROC) (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1I64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2I64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3I64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4I64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UI64NVPROC) (GLuint program, GLint location, GLuint64EXT x);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UI64NVPROC) (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UI64NVPROC) (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UI64NVPROC) (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glUniform1i64NV (GLint location, GLint64EXT x);
GLAPI void APIENTRY glUniform2i64NV (GLint location, GLint64EXT x, GLint64EXT y);
GLAPI void APIENTRY glUniform3i64NV (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z);
GLAPI void APIENTRY glUniform4i64NV (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
GLAPI void APIENTRY glUniform1i64vNV (GLint location, GLsizei count, const GLint64EXT *value);
GLAPI void APIENTRY glUniform2i64vNV (GLint location, GLsizei count, const GLint64EXT *value);
GLAPI void APIENTRY glUniform3i64vNV (GLint location, GLsizei count, const GLint64EXT *value);
GLAPI void APIENTRY glUniform4i64vNV (GLint location, GLsizei count, const GLint64EXT *value);
GLAPI void APIENTRY glUniform1ui64NV (GLint location, GLuint64EXT x);
GLAPI void APIENTRY glUniform2ui64NV (GLint location, GLuint64EXT x, GLuint64EXT y);
GLAPI void APIENTRY glUniform3ui64NV (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
GLAPI void APIENTRY glUniform4ui64NV (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
GLAPI void APIENTRY glUniform1ui64vNV (GLint location, GLsizei count, const GLuint64EXT *value);
GLAPI void APIENTRY glUniform2ui64vNV (GLint location, GLsizei count, const GLuint64EXT *value);
GLAPI void APIENTRY glUniform3ui64vNV (GLint location, GLsizei count, const GLuint64EXT *value);
GLAPI void APIENTRY glUniform4ui64vNV (GLint location, GLsizei count, const GLuint64EXT *value);
GLAPI void APIENTRY glGetUniformi64vNV (GLuint program, GLint location, GLint64EXT *params);
GLAPI void APIENTRY glProgramUniform1i64NV (GLuint program, GLint location, GLint64EXT x);
GLAPI void APIENTRY glProgramUniform2i64NV (GLuint program, GLint location, GLint64EXT x, GLint64EXT y);
GLAPI void APIENTRY glProgramUniform3i64NV (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z);
GLAPI void APIENTRY glProgramUniform4i64NV (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
GLAPI void APIENTRY glProgramUniform1i64vNV (GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
GLAPI void APIENTRY glProgramUniform2i64vNV (GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
GLAPI void APIENTRY glProgramUniform3i64vNV (GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
GLAPI void APIENTRY glProgramUniform4i64vNV (GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
GLAPI void APIENTRY glProgramUniform1ui64NV (GLuint program, GLint location, GLuint64EXT x);
GLAPI void APIENTRY glProgramUniform2ui64NV (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y);
GLAPI void APIENTRY glProgramUniform3ui64NV (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
GLAPI void APIENTRY glProgramUniform4ui64NV (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
GLAPI void APIENTRY glProgramUniform1ui64vNV (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
GLAPI void APIENTRY glProgramUniform2ui64vNV (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
GLAPI void APIENTRY glProgramUniform3ui64vNV (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
GLAPI void APIENTRY glProgramUniform4ui64vNV (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
#endif
#endif /* GL_NV_gpu_shader5 */

#ifndef GL_NV_internalformat_sample_query
#define GL_NV_internalformat_sample_query 1
#define GL_MULTISAMPLES_NV                0x9371
#define GL_SUPERSAMPLE_SCALE_X_NV         0x9372
#define GL_SUPERSAMPLE_SCALE_Y_NV         0x9373
#define GL_CONFORMANT_NV                  0x9374
typedef void (APIENTRYP PFNGLGETINTERNALFORMATSAMPLEIVNVPROC) (GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei bufSize, GLint *params);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glGetInternalformatSampleivNV (GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei bufSize, GLint *params);
#endif
#endif /* GL_NV_internalformat_sample_query */

#ifndef GL_NV_path_rendering
#define GL_NV_path_rendering 1
#define GL_PATH_FORMAT_SVG_NV             0x9070
#define GL_PATH_FORMAT_PS_NV              0x9071
#define GL_STANDARD_FONT_NAME_NV          0x9072
#define GL_SYSTEM_FONT_NAME_NV            0x9073
#define GL_FILE_NAME_NV                   0x9074
#define GL_PATH_STROKE_WIDTH_NV           0x9075
#define GL_PATH_END_CAPS_NV               0x9076
#define GL_PATH_INITIAL_END_CAP_NV        0x9077
#define GL_PATH_TERMINAL_END_CAP_NV       0x9078
#define GL_PATH_JOIN_STYLE_NV             0x9079
#define GL_PATH_MITER_LIMIT_NV            0x907A
#define GL_PATH_DASH_CAPS_NV              0x907B
#define GL_PATH_INITIAL_DASH_CAP_NV       0x907C
#define GL_PATH_TERMINAL_DASH_CAP_NV      0x907D
#define GL_PATH_DASH_OFFSET_NV            0x907E
#define GL_PATH_CLIENT_LENGTH_NV          0x907F
#define GL_PATH_FILL_MODE_NV              0x9080
#define GL_PATH_FILL_MASK_NV              0x9081
#define GL_PATH_FILL_COVER_MODE_NV        0x9082
#define GL_PATH_STROKE_COVER_MODE_NV      0x9083
#define GL_PATH_STROKE_MASK_NV            0x9084
#define GL_COUNT_UP_NV                    0x9088
#define GL_COUNT_DOWN_NV                  0x9089
#define GL_PATH_OBJECT_BOUNDING_BOX_NV    0x908A
#define GL_CONVEX_HULL_NV                 0x908B
#define GL_BOUNDING_BOX_NV                0x908D
#define GL_TRANSLATE_X_NV                 0x908E
#define GL_TRANSLATE_Y_NV                 0x908F
#define GL_TRANSLATE_2D_NV                0x9090
#define GL_TRANSLATE_3D_NV                0x9091
#define GL_AFFINE_2D_NV                   0x9092
#define GL_AFFINE_3D_NV                   0x9094
#define GL_TRANSPOSE_AFFINE_2D_NV         0x9096
#define GL_TRANSPOSE_AFFINE_3D_NV         0x9098
#define GL_UTF8_NV                        0x909A
#define GL_UTF16_NV                       0x909B
#define GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV 0x909C
#define GL_PATH_COMMAND_COUNT_NV          0x909D
#define GL_PATH_COORD_COUNT_NV            0x909E
#define GL_PATH_DASH_ARRAY_COUNT_NV       0x909F
#define GL_PATH_COMPUTED_LENGTH_NV        0x90A0
#define GL_PATH_FILL_BOUNDING_BOX_NV      0x90A1
#define GL_PATH_STROKE_BOUNDING_BOX_NV    0x90A2
#define GL_SQUARE_NV                      0x90A3
#define GL_ROUND_NV                       0x90A4
#define GL_TRIANGULAR_NV                  0x90A5
#define GL_BEVEL_NV                       0x90A6
#define GL_MITER_REVERT_NV                0x90A7
#define GL_MITER_TRUNCATE_NV              0x90A8
#define GL_SKIP_MISSING_GLYPH_NV          0x90A9
#define GL_USE_MISSING_GLYPH_NV           0x90AA
#define GL_PATH_ERROR_POSITION_NV         0x90AB
#define GL_ACCUM_ADJACENT_PAIRS_NV        0x90AD
#define GL_ADJACENT_PAIRS_NV              0x90AE
#define GL_FIRST_TO_REST_NV               0x90AF
#define GL_PATH_GEN_MODE_NV               0x90B0
#define GL_PATH_GEN_COEFF_NV              0x90B1
#define GL_PATH_GEN_COMPONENTS_NV         0x90B3
#define GL_PATH_STENCIL_FUNC_NV           0x90B7
#define GL_PATH_STENCIL_REF_NV            0x90B8
#define GL_PATH_STENCIL_VALUE_MASK_NV     0x90B9
#define GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV 0x90BD
#define GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV 0x90BE
#define GL_PATH_COVER_DEPTH_FUNC_NV       0x90BF
#define GL_PATH_DASH_OFFSET_RESET_NV      0x90B4
#define GL_MOVE_TO_RESETS_NV              0x90B5
#define GL_MOVE_TO_CONTINUES_NV           0x90B6
#define GL_CLOSE_PATH_NV                  0x00
#define GL_MOVE_TO_NV                     0x02
#define GL_RELATIVE_MOVE_TO_NV            0x03
#define GL_LINE_TO_NV                     0x04
#define GL_RELATIVE_LINE_TO_NV            0x05
#define GL_HORIZONTAL_LINE_TO_NV          0x06
#define GL_RELATIVE_HORIZONTAL_LINE_TO_NV 0x07
#define GL_VERTICAL_LINE_TO_NV            0x08
#define GL_RELATIVE_VERTICAL_LINE_TO_NV   0x09
#define GL_QUADRATIC_CURVE_TO_NV          0x0A
#define GL_RELATIVE_QUADRATIC_CURVE_TO_NV 0x0B
#define GL_CUBIC_CURVE_TO_NV              0x0C
#define GL_RELATIVE_CUBIC_CURVE_TO_NV     0x0D
#define GL_SMOOTH_QUADRATIC_CURVE_TO_NV   0x0E
#define GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0F
#define GL_SMOOTH_CUBIC_CURVE_TO_NV       0x10
#define GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV 0x11
#define GL_SMALL_CCW_ARC_TO_NV            0x12
#define GL_RELATIVE_SMALL_CCW_ARC_TO_NV   0x13
#define GL_SMALL_CW_ARC_TO_NV             0x14
#define GL_RELATIVE_SMALL_CW_ARC_TO_NV    0x15
#define GL_LARGE_CCW_ARC_TO_NV            0x16
#define GL_RELATIVE_LARGE_CCW_ARC_TO_NV   0x17
#define GL_LARGE_CW_ARC_TO_NV             0x18
#define GL_RELATIVE_LARGE_CW_ARC_TO_NV    0x19
#define GL_RESTART_PATH_NV                0xF0
#define GL_DUP_FIRST_CUBIC_CURVE_TO_NV    0xF2
#define GL_DUP_LAST_CUBIC_CURVE_TO_NV     0xF4
#define GL_RECT_NV                        0xF6
#define GL_CIRCULAR_CCW_ARC_TO_NV         0xF8
#define GL_CIRCULAR_CW_ARC_TO_NV          0xFA
#define GL_CIRCULAR_TANGENT_ARC_TO_NV     0xFC
#define GL_ARC_TO_NV                      0xFE
#define GL_RELATIVE_ARC_TO_NV             0xFF
#define GL_BOLD_BIT_NV                    0x01
#define GL_ITALIC_BIT_NV                  0x02
#define GL_GLYPH_WIDTH_BIT_NV             0x01
#define GL_GLYPH_HEIGHT_BIT_NV            0x02
#define GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV 0x04
#define GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV 0x08
#define GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV 0x10
#define GL_GLYPH_VERTICAL_BEARING_X_BIT_NV 0x20
#define GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV 0x40
#define GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV 0x80
#define GL_GLYPH_HAS_KERNING_BIT_NV       0x100
#define GL_FONT_X_MIN_BOUNDS_BIT_NV       0x00010000
#define GL_FONT_Y_MIN_BOUNDS_BIT_NV       0x00020000
#define GL_FONT_X_MAX_BOUNDS_BIT_NV       0x00040000
#define GL_FONT_Y_MAX_BOUNDS_BIT_NV       0x00080000
#define GL_FONT_UNITS_PER_EM_BIT_NV       0x00100000
#define GL_FONT_ASCENDER_BIT_NV           0x00200000
#define GL_FONT_DESCENDER_BIT_NV          0x00400000
#define GL_FONT_HEIGHT_BIT_NV             0x00800000
#define GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV  0x01000000
#define GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV 0x02000000
#define GL_FONT_UNDERLINE_POSITION_BIT_NV 0x04000000
#define GL_FONT_UNDERLINE_THICKNESS_BIT_NV 0x08000000
#define GL_FONT_HAS_KERNING_BIT_NV        0x10000000
#define GL_ROUNDED_RECT_NV                0xE8
#define GL_RELATIVE_ROUNDED_RECT_NV       0xE9
#define GL_ROUNDED_RECT2_NV               0xEA
#define GL_RELATIVE_ROUNDED_RECT2_NV      0xEB
#define GL_ROUNDED_RECT4_NV               0xEC
#define GL_RELATIVE_ROUNDED_RECT4_NV      0xED
#define GL_ROUNDED_RECT8_NV               0xEE
#define GL_RELATIVE_ROUNDED_RECT8_NV      0xEF
#define GL_RELATIVE_RECT_NV               0xF7
#define GL_FONT_GLYPHS_AVAILABLE_NV       0x9368
#define GL_FONT_TARGET_UNAVAILABLE_NV     0x9369
#define GL_FONT_UNAVAILABLE_NV            0x936A
#define GL_FONT_UNINTELLIGIBLE_NV         0x936B
#define GL_CONIC_CURVE_TO_NV              0x1A
#define GL_RELATIVE_CONIC_CURVE_TO_NV     0x1B
#define GL_FONT_NUM_GLYPH_INDICES_BIT_NV  0x20000000
#define GL_STANDARD_FONT_FORMAT_NV        0x936C
#define GL_PATH_PROJECTION_NV             0x1701
#define GL_PATH_MODELVIEW_NV              0x1700
#define GL_PATH_MODELVIEW_STACK_DEPTH_NV  0x0BA3
#define GL_PATH_MODELVIEW_MATRIX_NV       0x0BA6
#define GL_PATH_MAX_MODELVIEW_STACK_DEPTH_NV 0x0D36
#define GL_PATH_TRANSPOSE_MODELVIEW_MATRIX_NV 0x84E3
#define GL_PATH_PROJECTION_STACK_DEPTH_NV 0x0BA4
#define GL_PATH_PROJECTION_MATRIX_NV      0x0BA7
#define GL_PATH_MAX_PROJECTION_STACK_DEPTH_NV 0x0D38
#define GL_PATH_TRANSPOSE_PROJECTION_MATRIX_NV 0x84E4
#define GL_FRAGMENT_INPUT_NV              0x936D
typedef GLuint (APIENTRYP PFNGLGENPATHSNVPROC) (GLsizei range);
typedef void (APIENTRYP PFNGLDELETEPATHSNVPROC) (GLuint path, GLsizei range);
typedef GLboolean (APIENTRYP PFNGLISPATHNVPROC) (GLuint path);
typedef void (APIENTRYP PFNGLPATHCOMMANDSNVPROC) (GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords);
typedef void (APIENTRYP PFNGLPATHCOORDSNVPROC) (GLuint path, GLsizei numCoords, GLenum coordType, const void *coords);
typedef void (APIENTRYP PFNGLPATHSUBCOMMANDSNVPROC) (GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords);
typedef void (APIENTRYP PFNGLPATHSUBCOORDSNVPROC) (GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void *coords);
typedef void (APIENTRYP PFNGLPATHSTRINGNVPROC) (GLuint path, GLenum format, GLsizei length, const void *pathString);
typedef void (APIENTRYP PFNGLPATHGLYPHSNVPROC) (GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
typedef void (APIENTRYP PFNGLPATHGLYPHRANGENVPROC) (GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
typedef void (APIENTRYP PFNGLWEIGHTPATHSNVPROC) (GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights);
typedef void (APIENTRYP PFNGLCOPYPATHNVPROC) (GLuint resultPath, GLuint srcPath);
typedef void (APIENTRYP PFNGLINTERPOLATEPATHSNVPROC) (GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight);
typedef void (APIENTRYP PFNGLTRANSFORMPATHNVPROC) (GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues);
typedef void (APIENTRYP PFNGLPATHPARAMETERIVNVPROC) (GLuint path, GLenum pname, const GLint *value);
typedef void (APIENTRYP PFNGLPATHPARAMETERINVPROC) (GLuint path, GLenum pname, GLint value);
typedef void (APIENTRYP PFNGLPATHPARAMETERFVNVPROC) (GLuint path, GLenum pname, const GLfloat *value);
typedef void (APIENTRYP PFNGLPATHPARAMETERFNVPROC) (GLuint path, GLenum pname, GLfloat value);
typedef void (APIENTRYP PFNGLPATHDASHARRAYNVPROC) (GLuint path, GLsizei dashCount, const GLfloat *dashArray);
typedef void (APIENTRYP PFNGLPATHSTENCILFUNCNVPROC) (GLenum func, GLint ref, GLuint mask);
typedef void (APIENTRYP PFNGLPATHSTENCILDEPTHOFFSETNVPROC) (GLfloat factor, GLfloat units);
typedef void (APIENTRYP PFNGLSTENCILFILLPATHNVPROC) (GLuint path, GLenum fillMode, GLuint mask);
typedef void (APIENTRYP PFNGLSTENCILSTROKEPATHNVPROC) (GLuint path, GLint reference, GLuint mask);
typedef void (APIENTRYP PFNGLSTENCILFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues);
typedef void (APIENTRYP PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues);
typedef void (APIENTRYP PFNGLPATHCOVERDEPTHFUNCNVPROC) (GLenum func);
typedef void (APIENTRYP PFNGLCOVERFILLPATHNVPROC) (GLuint path, GLenum coverMode);
typedef void (APIENTRYP PFNGLCOVERSTROKEPATHNVPROC) (GLuint path, GLenum coverMode);
typedef void (APIENTRYP PFNGLCOVERFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
typedef void (APIENTRYP PFNGLCOVERSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
typedef void (APIENTRYP PFNGLGETPATHPARAMETERIVNVPROC) (GLuint path, GLenum pname, GLint *value);
typedef void (APIENTRYP PFNGLGETPATHPARAMETERFVNVPROC) (GLuint path, GLenum pname, GLfloat *value);
typedef void (APIENTRYP PFNGLGETPATHCOMMANDSNVPROC) (GLuint path, GLubyte *commands);
typedef void (APIENTRYP PFNGLGETPATHCOORDSNVPROC) (GLuint path, GLfloat *coords);
typedef void (APIENTRYP PFNGLGETPATHDASHARRAYNVPROC) (GLuint path, GLfloat *dashArray);
typedef void (APIENTRYP PFNGLGETPATHMETRICSNVPROC) (GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics);
typedef void (APIENTRYP PFNGLGETPATHMETRICRANGENVPROC) (GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics);
typedef void (APIENTRYP PFNGLGETPATHSPACINGNVPROC) (GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing);
typedef GLboolean (APIENTRYP PFNGLISPOINTINFILLPATHNVPROC) (GLuint path, GLuint mask, GLfloat x, GLfloat y);
typedef GLboolean (APIENTRYP PFNGLISPOINTINSTROKEPATHNVPROC) (GLuint path, GLfloat x, GLfloat y);
typedef GLfloat (APIENTRYP PFNGLGETPATHLENGTHNVPROC) (GLuint path, GLsizei startSegment, GLsizei numSegments);
typedef GLboolean (APIENTRYP PFNGLPOINTALONGPATHNVPROC) (GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY);
typedef void (APIENTRYP PFNGLMATRIXLOAD3X2FNVPROC) (GLenum matrixMode, const GLfloat *m);
typedef void (APIENTRYP PFNGLMATRIXLOAD3X3FNVPROC) (GLenum matrixMode, const GLfloat *m);
typedef void (APIENTRYP PFNGLMATRIXLOADTRANSPOSE3X3FNVPROC) (GLenum matrixMode, const GLfloat *m);
typedef void (APIENTRYP PFNGLMATRIXMULT3X2FNVPROC) (GLenum matrixMode, const GLfloat *m);
typedef void (APIENTRYP PFNGLMATRIXMULT3X3FNVPROC) (GLenum matrixMode, const GLfloat *m);
typedef void (APIENTRYP PFNGLMATRIXMULTTRANSPOSE3X3FNVPROC) (GLenum matrixMode, const GLfloat *m);
typedef void (APIENTRYP PFNGLSTENCILTHENCOVERFILLPATHNVPROC) (GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode);
typedef void (APIENTRYP PFNGLSTENCILTHENCOVERSTROKEPATHNVPROC) (GLuint path, GLint reference, GLuint mask, GLenum coverMode);
typedef void (APIENTRYP PFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
typedef void (APIENTRYP PFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
typedef GLenum (APIENTRYP PFNGLPATHGLYPHINDEXRANGENVPROC) (GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint baseAndCount[2]);
typedef GLenum (APIENTRYP PFNGLPATHGLYPHINDEXARRAYNVPROC) (GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
typedef GLenum (APIENTRYP PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC) (GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void *fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
typedef void (APIENTRYP PFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC) (GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat *coeffs);
typedef void (APIENTRYP PFNGLGETPROGRAMRESOURCEFVNVPROC) (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLfloat *params);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI GLuint APIENTRY glGenPathsNV (GLsizei range);
GLAPI void APIENTRY glDeletePathsNV (GLuint path, GLsizei range);
GLAPI GLboolean APIENTRY glIsPathNV (GLuint path);
GLAPI void APIENTRY glPathCommandsNV (GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords);
GLAPI void APIENTRY glPathCoordsNV (GLuint path, GLsizei numCoords, GLenum coordType, const void *coords);
GLAPI void APIENTRY glPathSubCommandsNV (GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords);
GLAPI void APIENTRY glPathSubCoordsNV (GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void *coords);
GLAPI void APIENTRY glPathStringNV (GLuint path, GLenum format, GLsizei length, const void *pathString);
GLAPI void APIENTRY glPathGlyphsNV (GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
GLAPI void APIENTRY glPathGlyphRangeNV (GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
GLAPI void APIENTRY glWeightPathsNV (GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights);
GLAPI void APIENTRY glCopyPathNV (GLuint resultPath, GLuint srcPath);
GLAPI void APIENTRY glInterpolatePathsNV (GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight);
GLAPI void APIENTRY glTransformPathNV (GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues);
GLAPI void APIENTRY glPathParameterivNV (GLuint path, GLenum pname, const GLint *value);
GLAPI void APIENTRY glPathParameteriNV (GLuint path, GLenum pname, GLint value);
GLAPI void APIENTRY glPathParameterfvNV (GLuint path, GLenum pname, const GLfloat *value);
GLAPI void APIENTRY glPathParameterfNV (GLuint path, GLenum pname, GLfloat value);
GLAPI void APIENTRY glPathDashArrayNV (GLuint path, GLsizei dashCount, const GLfloat *dashArray);
GLAPI void APIENTRY glPathStencilFuncNV (GLenum func, GLint ref, GLuint mask);
GLAPI void APIENTRY glPathStencilDepthOffsetNV (GLfloat factor, GLfloat units);
GLAPI void APIENTRY glStencilFillPathNV (GLuint path, GLenum fillMode, GLuint mask);
GLAPI void APIENTRY glStencilStrokePathNV (GLuint path, GLint reference, GLuint mask);
GLAPI void APIENTRY glStencilFillPathInstancedNV (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues);
GLAPI void APIENTRY glStencilStrokePathInstancedNV (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues);
GLAPI void APIENTRY glPathCoverDepthFuncNV (GLenum func);
GLAPI void APIENTRY glCoverFillPathNV (GLuint path, GLenum coverMode);
GLAPI void APIENTRY glCoverStrokePathNV (GLuint path, GLenum coverMode);
GLAPI void APIENTRY glCoverFillPathInstancedNV (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
GLAPI void APIENTRY glCoverStrokePathInstancedNV (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
GLAPI void APIENTRY glGetPathParameterivNV (GLuint path, GLenum pname, GLint *value);
GLAPI void APIENTRY glGetPathParameterfvNV (GLuint path, GLenum pname, GLfloat *value);
GLAPI void APIENTRY glGetPathCommandsNV (GLuint path, GLubyte *commands);
GLAPI void APIENTRY glGetPathCoordsNV (GLuint path, GLfloat *coords);
GLAPI void APIENTRY glGetPathDashArrayNV (GLuint path, GLfloat *dashArray);
GLAPI void APIENTRY glGetPathMetricsNV (GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics);
GLAPI void APIENTRY glGetPathMetricRangeNV (GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics);
GLAPI void APIENTRY glGetPathSpacingNV (GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing);
GLAPI GLboolean APIENTRY glIsPointInFillPathNV (GLuint path, GLuint mask, GLfloat x, GLfloat y);
GLAPI GLboolean APIENTRY glIsPointInStrokePathNV (GLuint path, GLfloat x, GLfloat y);
GLAPI GLfloat APIENTRY glGetPathLengthNV (GLuint path, GLsizei startSegment, GLsizei numSegments);
GLAPI GLboolean APIENTRY glPointAlongPathNV (GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY);
GLAPI void APIENTRY glMatrixLoad3x2fNV (GLenum matrixMode, const GLfloat *m);
GLAPI void APIENTRY glMatrixLoad3x3fNV (GLenum matrixMode, const GLfloat *m);
GLAPI void APIENTRY glMatrixLoadTranspose3x3fNV (GLenum matrixMode, const GLfloat *m);
GLAPI void APIENTRY glMatrixMult3x2fNV (GLenum matrixMode, const GLfloat *m);
GLAPI void APIENTRY glMatrixMult3x3fNV (GLenum matrixMode, const GLfloat *m);
GLAPI void APIENTRY glMatrixMultTranspose3x3fNV (GLenum matrixMode, const GLfloat *m);
GLAPI void APIENTRY glStencilThenCoverFillPathNV (GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode);
GLAPI void APIENTRY glStencilThenCoverStrokePathNV (GLuint path, GLint reference, GLuint mask, GLenum coverMode);
GLAPI void APIENTRY glStencilThenCoverFillPathInstancedNV (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
GLAPI void APIENTRY glStencilThenCoverStrokePathInstancedNV (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
GLAPI GLenum APIENTRY glPathGlyphIndexRangeNV (GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint baseAndCount[2]);
GLAPI GLenum APIENTRY glPathGlyphIndexArrayNV (GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
GLAPI GLenum APIENTRY glPathMemoryGlyphIndexArrayNV (GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void *fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
GLAPI void APIENTRY glProgramPathFragmentInputGenNV (GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat *coeffs);
GLAPI void APIENTRY glGetProgramResourcefvNV (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLfloat *params);
#endif
#endif /* GL_NV_path_rendering */

#ifndef GL_NV_path_rendering_shared_edge
#define GL_NV_path_rendering_shared_edge 1
#define GL_SHARED_EDGE_NV                 0xC0
#endif /* GL_NV_path_rendering_shared_edge */

#ifndef GL_NV_sample_locations
#define GL_NV_sample_locations 1
#define GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV 0x933D
#define GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV 0x933E
#define GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV 0x933F
#define GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV 0x9340
#define GL_SAMPLE_LOCATION_NV             0x8E50
#define GL_PROGRAMMABLE_SAMPLE_LOCATION_NV 0x9341
#define GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV 0x9342
#define GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV 0x9343
typedef void (APIENTRYP PFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROC) (GLenum target, GLuint start, GLsizei count, const GLfloat *v);
typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROC) (GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v);
typedef void (APIENTRYP PFNGLRESOLVEDEPTHVALUESNVPROC) (void);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glFramebufferSampleLocationsfvNV (GLenum target, GLuint start, GLsizei count, const GLfloat *v);
GLAPI void APIENTRY glNamedFramebufferSampleLocationsfvNV (GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v);
GLAPI void APIENTRY glResolveDepthValuesNV (void);
#endif
#endif /* GL_NV_sample_locations */

#ifndef GL_NV_sample_mask_override_coverage
#define GL_NV_sample_mask_override_coverage 1
#endif /* GL_NV_sample_mask_override_coverage */

#ifndef GL_NV_shader_atomic_counters
#define GL_NV_shader_atomic_counters 1
#endif /* GL_NV_shader_atomic_counters */

#ifndef GL_NV_shader_atomic_float
#define GL_NV_shader_atomic_float 1
#endif /* GL_NV_shader_atomic_float */

#ifndef GL_NV_shader_atomic_float64
#define GL_NV_shader_atomic_float64 1
#endif /* GL_NV_shader_atomic_float64 */

#ifndef GL_NV_shader_atomic_fp16_vector
#define GL_NV_shader_atomic_fp16_vector 1
#endif /* GL_NV_shader_atomic_fp16_vector */

#ifndef GL_NV_shader_atomic_int64
#define GL_NV_shader_atomic_int64 1
#endif /* GL_NV_shader_atomic_int64 */

#ifndef GL_NV_shader_buffer_load
#define GL_NV_shader_buffer_load 1
#define GL_BUFFER_GPU_ADDRESS_NV          0x8F1D
#define GL_GPU_ADDRESS_NV                 0x8F34
#define GL_MAX_SHADER_BUFFER_ADDRESS_NV   0x8F35
typedef void (APIENTRYP PFNGLMAKEBUFFERRESIDENTNVPROC) (GLenum target, GLenum access);
typedef void (APIENTRYP PFNGLMAKEBUFFERNONRESIDENTNVPROC) (GLenum target);
typedef GLboolean (APIENTRYP PFNGLISBUFFERRESIDENTNVPROC) (GLenum target);
typedef void (APIENTRYP PFNGLMAKENAMEDBUFFERRESIDENTNVPROC) (GLuint buffer, GLenum access);
typedef void (APIENTRYP PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC) (GLuint buffer);
typedef GLboolean (APIENTRYP PFNGLISNAMEDBUFFERRESIDENTNVPROC) (GLuint buffer);
typedef void (APIENTRYP PFNGLGETBUFFERPARAMETERUI64VNVPROC) (GLenum target, GLenum pname, GLuint64EXT *params);
typedef void (APIENTRYP PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC) (GLuint buffer, GLenum pname, GLuint64EXT *params);
typedef void (APIENTRYP PFNGLGETINTEGERUI64VNVPROC) (GLenum value, GLuint64EXT *result);
typedef void (APIENTRYP PFNGLUNIFORMUI64NVPROC) (GLint location, GLuint64EXT value);
typedef void (APIENTRYP PFNGLUNIFORMUI64VNVPROC) (GLint location, GLsizei count, const GLuint64EXT *value);
typedef void (APIENTRYP PFNGLGETUNIFORMUI64VNVPROC) (GLuint program, GLint location, GLuint64EXT *params);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMUI64NVPROC) (GLuint program, GLint location, GLuint64EXT value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMUI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glMakeBufferResidentNV (GLenum target, GLenum access);
GLAPI void APIENTRY glMakeBufferNonResidentNV (GLenum target);
GLAPI GLboolean APIENTRY glIsBufferResidentNV (GLenum target);
GLAPI void APIENTRY glMakeNamedBufferResidentNV (GLuint buffer, GLenum access);
GLAPI void APIENTRY glMakeNamedBufferNonResidentNV (GLuint buffer);
GLAPI GLboolean APIENTRY glIsNamedBufferResidentNV (GLuint buffer);
GLAPI void APIENTRY glGetBufferParameterui64vNV (GLenum target, GLenum pname, GLuint64EXT *params);
GLAPI void APIENTRY glGetNamedBufferParameterui64vNV (GLuint buffer, GLenum pname, GLuint64EXT *params);
GLAPI void APIENTRY glGetIntegerui64vNV (GLenum value, GLuint64EXT *result);
GLAPI void APIENTRY glUniformui64NV (GLint location, GLuint64EXT value);
GLAPI void APIENTRY glUniformui64vNV (GLint location, GLsizei count, const GLuint64EXT *value);
GLAPI void APIENTRY glGetUniformui64vNV (GLuint program, GLint location, GLuint64EXT *params);
GLAPI void APIENTRY glProgramUniformui64NV (GLuint program, GLint location, GLuint64EXT value);
GLAPI void APIENTRY glProgramUniformui64vNV (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
#endif
#endif /* GL_NV_shader_buffer_load */

#ifndef GL_NV_shader_buffer_store
#define GL_NV_shader_buffer_store 1
#define GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV 0x00000010
#endif /* GL_NV_shader_buffer_store */

#ifndef GL_NV_shader_thread_group
#define GL_NV_shader_thread_group 1
#define GL_WARP_SIZE_NV                   0x9339
#define GL_WARPS_PER_SM_NV                0x933A
#define GL_SM_COUNT_NV                    0x933B
#endif /* GL_NV_shader_thread_group */

#ifndef GL_NV_shader_thread_shuffle
#define GL_NV_shader_thread_shuffle 1
#endif /* GL_NV_shader_thread_shuffle */

#ifndef GL_NV_stereo_view_rendering
#define GL_NV_stereo_view_rendering 1
#endif /* GL_NV_stereo_view_rendering */

#ifndef GL_NV_texture_barrier
#define GL_NV_texture_barrier 1
typedef void (APIENTRYP PFNGLTEXTUREBARRIERNVPROC) (void);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glTextureBarrierNV (void);
#endif
#endif /* GL_NV_texture_barrier */

#ifndef GL_NV_texture_rectangle_compressed
#define GL_NV_texture_rectangle_compressed 1
#endif /* GL_NV_texture_rectangle_compressed */

#ifndef GL_NV_uniform_buffer_unified_memory
#define GL_NV_uniform_buffer_unified_memory 1
#define GL_UNIFORM_BUFFER_UNIFIED_NV      0x936E
#define GL_UNIFORM_BUFFER_ADDRESS_NV      0x936F
#define GL_UNIFORM_BUFFER_LENGTH_NV       0x9370
#endif /* GL_NV_uniform_buffer_unified_memory */

#ifndef GL_NV_vertex_attrib_integer_64bit
#define GL_NV_vertex_attrib_integer_64bit 1
typedef void (APIENTRYP PFNGLVERTEXATTRIBL1I64NVPROC) (GLuint index, GLint64EXT x);
typedef void (APIENTRYP PFNGLVERTEXATTRIBL2I64NVPROC) (GLuint index, GLint64EXT x, GLint64EXT y);
typedef void (APIENTRYP PFNGLVERTEXATTRIBL3I64NVPROC) (GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z);
typedef void (APIENTRYP PFNGLVERTEXATTRIBL4I64NVPROC) (GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
typedef void (APIENTRYP PFNGLVERTEXATTRIBL1I64VNVPROC) (GLuint index, const GLint64EXT *v);
typedef void (APIENTRYP PFNGLVERTEXATTRIBL2I64VNVPROC) (GLuint index, const GLint64EXT *v);
typedef void (APIENTRYP PFNGLVERTEXATTRIBL3I64VNVPROC) (GLuint index, const GLint64EXT *v);
typedef void (APIENTRYP PFNGLVERTEXATTRIBL4I64VNVPROC) (GLuint index, const GLint64EXT *v);
typedef void (APIENTRYP PFNGLVERTEXATTRIBL1UI64NVPROC) (GLuint index, GLuint64EXT x);
typedef void (APIENTRYP PFNGLVERTEXATTRIBL2UI64NVPROC) (GLuint index, GLuint64EXT x, GLuint64EXT y);
typedef void (APIENTRYP PFNGLVERTEXATTRIBL3UI64NVPROC) (GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
typedef void (APIENTRYP PFNGLVERTEXATTRIBL4UI64NVPROC) (GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
typedef void (APIENTRYP PFNGLVERTEXATTRIBL1UI64VNVPROC) (GLuint index, const GLuint64EXT *v);
typedef void (APIENTRYP PFNGLVERTEXATTRIBL2UI64VNVPROC) (GLuint index, const GLuint64EXT *v);
typedef void (APIENTRYP PFNGLVERTEXATTRIBL3UI64VNVPROC) (GLuint index, const GLuint64EXT *v);
typedef void (APIENTRYP PFNGLVERTEXATTRIBL4UI64VNVPROC) (GLuint index, const GLuint64EXT *v);
typedef void (APIENTRYP PFNGLGETVERTEXATTRIBLI64VNVPROC) (GLuint index, GLenum pname, GLint64EXT *params);
typedef void (APIENTRYP PFNGLGETVERTEXATTRIBLUI64VNVPROC) (GLuint index, GLenum pname, GLuint64EXT *params);
typedef void (APIENTRYP PFNGLVERTEXATTRIBLFORMATNVPROC) (GLuint index, GLint size, GLenum type, GLsizei stride);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glVertexAttribL1i64NV (GLuint index, GLint64EXT x);
GLAPI void APIENTRY glVertexAttribL2i64NV (GLuint index, GLint64EXT x, GLint64EXT y);
GLAPI void APIENTRY glVertexAttribL3i64NV (GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z);
GLAPI void APIENTRY glVertexAttribL4i64NV (GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
GLAPI void APIENTRY glVertexAttribL1i64vNV (GLuint index, const GLint64EXT *v);
GLAPI void APIENTRY glVertexAttribL2i64vNV (GLuint index, const GLint64EXT *v);
GLAPI void APIENTRY glVertexAttribL3i64vNV (GLuint index, const GLint64EXT *v);
GLAPI void APIENTRY glVertexAttribL4i64vNV (GLuint index, const GLint64EXT *v);
GLAPI void APIENTRY glVertexAttribL1ui64NV (GLuint index, GLuint64EXT x);
GLAPI void APIENTRY glVertexAttribL2ui64NV (GLuint index, GLuint64EXT x, GLuint64EXT y);
GLAPI void APIENTRY glVertexAttribL3ui64NV (GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
GLAPI void APIENTRY glVertexAttribL4ui64NV (GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
GLAPI void APIENTRY glVertexAttribL1ui64vNV (GLuint index, const GLuint64EXT *v);
GLAPI void APIENTRY glVertexAttribL2ui64vNV (GLuint index, const GLuint64EXT *v);
GLAPI void APIENTRY glVertexAttribL3ui64vNV (GLuint index, const GLuint64EXT *v);
GLAPI void APIENTRY glVertexAttribL4ui64vNV (GLuint index, const GLuint64EXT *v);
GLAPI void APIENTRY glGetVertexAttribLi64vNV (GLuint index, GLenum pname, GLint64EXT *params);
GLAPI void APIENTRY glGetVertexAttribLui64vNV (GLuint index, GLenum pname, GLuint64EXT *params);
GLAPI void APIENTRY glVertexAttribLFormatNV (GLuint index, GLint size, GLenum type, GLsizei stride);
#endif
#endif /* GL_NV_vertex_attrib_integer_64bit */

#ifndef GL_NV_vertex_buffer_unified_memory
#define GL_NV_vertex_buffer_unified_memory 1
#define GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV 0x8F1E
#define GL_ELEMENT_ARRAY_UNIFIED_NV       0x8F1F
#define GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV 0x8F20
#define GL_VERTEX_ARRAY_ADDRESS_NV        0x8F21
#define GL_NORMAL_ARRAY_ADDRESS_NV        0x8F22
#define GL_COLOR_ARRAY_ADDRESS_NV         0x8F23
#define GL_INDEX_ARRAY_ADDRESS_NV         0x8F24
#define GL_TEXTURE_COORD_ARRAY_ADDRESS_NV 0x8F25
#define GL_EDGE_FLAG_ARRAY_ADDRESS_NV     0x8F26
#define GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV 0x8F27
#define GL_FOG_COORD_ARRAY_ADDRESS_NV     0x8F28
#define GL_ELEMENT_ARRAY_ADDRESS_NV       0x8F29
#define GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV  0x8F2A
#define GL_VERTEX_ARRAY_LENGTH_NV         0x8F2B
#define GL_NORMAL_ARRAY_LENGTH_NV         0x8F2C
#define GL_COLOR_ARRAY_LENGTH_NV          0x8F2D
#define GL_INDEX_ARRAY_LENGTH_NV          0x8F2E
#define GL_TEXTURE_COORD_ARRAY_LENGTH_NV  0x8F2F
#define GL_EDGE_FLAG_ARRAY_LENGTH_NV      0x8F30
#define GL_SECONDARY_COLOR_ARRAY_LENGTH_NV 0x8F31
#define GL_FOG_COORD_ARRAY_LENGTH_NV      0x8F32
#define GL_ELEMENT_ARRAY_LENGTH_NV        0x8F33
#define GL_DRAW_INDIRECT_UNIFIED_NV       0x8F40
#define GL_DRAW_INDIRECT_ADDRESS_NV       0x8F41
#define GL_DRAW_INDIRECT_LENGTH_NV        0x8F42
typedef void (APIENTRYP PFNGLBUFFERADDRESSRANGENVPROC) (GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length);
typedef void (APIENTRYP PFNGLVERTEXFORMATNVPROC) (GLint size, GLenum type, GLsizei stride);
typedef void (APIENTRYP PFNGLNORMALFORMATNVPROC) (GLenum type, GLsizei stride);
typedef void (APIENTRYP PFNGLCOLORFORMATNVPROC) (GLint size, GLenum type, GLsizei stride);
typedef void (APIENTRYP PFNGLINDEXFORMATNVPROC) (GLenum type, GLsizei stride);
typedef void (APIENTRYP PFNGLTEXCOORDFORMATNVPROC) (GLint size, GLenum type, GLsizei stride);
typedef void (APIENTRYP PFNGLEDGEFLAGFORMATNVPROC) (GLsizei stride);
typedef void (APIENTRYP PFNGLSECONDARYCOLORFORMATNVPROC) (GLint size, GLenum type, GLsizei stride);
typedef void (APIENTRYP PFNGLFOGCOORDFORMATNVPROC) (GLenum type, GLsizei stride);
typedef void (APIENTRYP PFNGLVERTEXATTRIBFORMATNVPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride);
typedef void (APIENTRYP PFNGLVERTEXATTRIBIFORMATNVPROC) (GLuint index, GLint size, GLenum type, GLsizei stride);
typedef void (APIENTRYP PFNGLGETINTEGERUI64I_VNVPROC) (GLenum value, GLuint index, GLuint64EXT *result);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glBufferAddressRangeNV (GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length);
GLAPI void APIENTRY glVertexFormatNV (GLint size, GLenum type, GLsizei stride);
GLAPI void APIENTRY glNormalFormatNV (GLenum type, GLsizei stride);
GLAPI void APIENTRY glColorFormatNV (GLint size, GLenum type, GLsizei stride);
GLAPI void APIENTRY glIndexFormatNV (GLenum type, GLsizei stride);
GLAPI void APIENTRY glTexCoordFormatNV (GLint size, GLenum type, GLsizei stride);
GLAPI void APIENTRY glEdgeFlagFormatNV (GLsizei stride);
GLAPI void APIENTRY glSecondaryColorFormatNV (GLint size, GLenum type, GLsizei stride);
GLAPI void APIENTRY glFogCoordFormatNV (GLenum type, GLsizei stride);
GLAPI void APIENTRY glVertexAttribFormatNV (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride);
GLAPI void APIENTRY glVertexAttribIFormatNV (GLuint index, GLint size, GLenum type, GLsizei stride);
GLAPI void APIENTRY glGetIntegerui64i_vNV (GLenum value, GLuint index, GLuint64EXT *result);
#endif
#endif /* GL_NV_vertex_buffer_unified_memory */

#ifndef GL_NV_viewport_array2
#define GL_NV_viewport_array2 1
#endif /* GL_NV_viewport_array2 */

#ifndef GL_NV_viewport_swizzle
#define GL_NV_viewport_swizzle 1
#define GL_VIEWPORT_SWIZZLE_POSITIVE_X_NV 0x9350
#define GL_VIEWPORT_SWIZZLE_NEGATIVE_X_NV 0x9351
#define GL_VIEWPORT_SWIZZLE_POSITIVE_Y_NV 0x9352
#define GL_VIEWPORT_SWIZZLE_NEGATIVE_Y_NV 0x9353
#define GL_VIEWPORT_SWIZZLE_POSITIVE_Z_NV 0x9354
#define GL_VIEWPORT_SWIZZLE_NEGATIVE_Z_NV 0x9355
#define GL_VIEWPORT_SWIZZLE_POSITIVE_W_NV 0x9356
#define GL_VIEWPORT_SWIZZLE_NEGATIVE_W_NV 0x9357
#define GL_VIEWPORT_SWIZZLE_X_NV          0x9358
#define GL_VIEWPORT_SWIZZLE_Y_NV          0x9359
#define GL_VIEWPORT_SWIZZLE_Z_NV          0x935A
#define GL_VIEWPORT_SWIZZLE_W_NV          0x935B
typedef void (APIENTRYP PFNGLVIEWPORTSWIZZLENVPROC) (GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glViewportSwizzleNV (GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew);
#endif
#endif /* GL_NV_viewport_swizzle */

#ifndef GL_OVR_multiview
#define GL_OVR_multiview 1
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR 0x9630
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR 0x9632
#define GL_MAX_VIEWS_OVR                  0x9631
#define GL_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR 0x9633
typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews);
#ifdef GL_GLEXT_PROTOTYPES
GLAPI void APIENTRY glFramebufferTextureMultiviewOVR (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews);
#endif
#endif /* GL_OVR_multiview */

#ifndef GL_OVR_multiview2
#define GL_OVR_multiview2 1
#endif /* GL_OVR_multiview2 */

#ifdef __cplusplus
}
#endif

#endif
// }}} End glcorearb.h

#ifndef __gl_h_
# define __gl_h_
#endif

#ifdef __cplusplus
extern "C" {
#endif

typedef void (*Proto3dGlProc)(void);

// Proto3D OpenGL Loader API
void Proto3dOpenLibGl(void);
void Proto3dCloseLibGl(void);
void Proto3dGlLoadAllCoreProfileProcs(void);
int Proto3dOpenLibGlAndLoadCoreProfile(void);
int Proto3dGlLoadedVersion(GLint *major, GLint *minor);
Proto3dGlProc Proto3dGlGetProcAddress(const char *proc);
const char *Proto3dGlLastErrorString();

// OpenGL function pointer declarations {{{
extern PFNGLCULLFACEPROC                                    _glCullFace;
extern PFNGLFRONTFACEPROC                                   _glFrontFace;
extern PFNGLHINTPROC                                        _glHint;
extern PFNGLLINEWIDTHPROC                                   _glLineWidth;
extern PFNGLPOINTSIZEPROC                                   _glPointSize;
extern PFNGLPOLYGONMODEPROC                                 _glPolygonMode;
extern PFNGLSCISSORPROC                                     _glScissor;
extern PFNGLTEXPARAMETERFPROC                               _glTexParameterf;
extern PFNGLTEXPARAMETERFVPROC                              _glTexParameterfv;
extern PFNGLTEXPARAMETERIPROC                               _glTexParameteri;
extern PFNGLTEXPARAMETERIVPROC                              _glTexParameteriv;
extern PFNGLTEXIMAGE1DPROC                                  _glTexImage1D;
extern PFNGLTEXIMAGE2DPROC                                  _glTexImage2D;
extern PFNGLDRAWBUFFERPROC                                  _glDrawBuffer;
extern PFNGLCLEARPROC                                       _glClear;
extern PFNGLCLEARCOLORPROC                                  _glClearColor;
extern PFNGLCLEARSTENCILPROC                                _glClearStencil;
extern PFNGLCLEARDEPTHPROC                                  _glClearDepth;
extern PFNGLSTENCILMASKPROC                                 _glStencilMask;
extern PFNGLCOLORMASKPROC                                   _glColorMask;
extern PFNGLDEPTHMASKPROC                                   _glDepthMask;
extern PFNGLDISABLEPROC                                     _glDisable;
extern PFNGLENABLEPROC                                      _glEnable;
extern PFNGLFINISHPROC                                      _glFinish;
extern PFNGLFLUSHPROC                                       _glFlush;
extern PFNGLBLENDFUNCPROC                                   _glBlendFunc;
extern PFNGLLOGICOPPROC                                     _glLogicOp;
extern PFNGLSTENCILFUNCPROC                                 _glStencilFunc;
extern PFNGLSTENCILOPPROC                                   _glStencilOp;
extern PFNGLDEPTHFUNCPROC                                   _glDepthFunc;
extern PFNGLPIXELSTOREFPROC                                 _glPixelStoref;
extern PFNGLPIXELSTOREIPROC                                 _glPixelStorei;
extern PFNGLREADBUFFERPROC                                  _glReadBuffer;
extern PFNGLREADPIXELSPROC                                  _glReadPixels;
extern PFNGLGETBOOLEANVPROC                                 _glGetBooleanv;
extern PFNGLGETDOUBLEVPROC                                  _glGetDoublev;
extern PFNGLGETERRORPROC                                    _glGetError;
extern PFNGLGETFLOATVPROC                                   _glGetFloatv;
extern PFNGLGETINTEGERVPROC                                 _glGetIntegerv;
extern PFNGLGETSTRINGPROC                                   _glGetString;
extern PFNGLGETTEXIMAGEPROC                                 _glGetTexImage;
extern PFNGLGETTEXPARAMETERFVPROC                           _glGetTexParameterfv;
extern PFNGLGETTEXPARAMETERIVPROC                           _glGetTexParameteriv;
extern PFNGLGETTEXLEVELPARAMETERFVPROC                      _glGetTexLevelParameterfv;
extern PFNGLGETTEXLEVELPARAMETERIVPROC                      _glGetTexLevelParameteriv;
extern PFNGLISENABLEDPROC                                   _glIsEnabled;
extern PFNGLDEPTHRANGEPROC                                  _glDepthRange;
extern PFNGLVIEWPORTPROC                                    _glViewport;
extern PFNGLDRAWARRAYSPROC                                  _glDrawArrays;
extern PFNGLDRAWELEMENTSPROC                                _glDrawElements;
extern PFNGLGETPOINTERVPROC                                 _glGetPointerv;
extern PFNGLPOLYGONOFFSETPROC                               _glPolygonOffset;
extern PFNGLCOPYTEXIMAGE1DPROC                              _glCopyTexImage1D;
extern PFNGLCOPYTEXIMAGE2DPROC                              _glCopyTexImage2D;
extern PFNGLCOPYTEXSUBIMAGE1DPROC                           _glCopyTexSubImage1D;
extern PFNGLCOPYTEXSUBIMAGE2DPROC                           _glCopyTexSubImage2D;
extern PFNGLTEXSUBIMAGE1DPROC                               _glTexSubImage1D;
extern PFNGLTEXSUBIMAGE2DPROC                               _glTexSubImage2D;
extern PFNGLBINDTEXTUREPROC                                 _glBindTexture;
extern PFNGLDELETETEXTURESPROC                              _glDeleteTextures;
extern PFNGLGENTEXTURESPROC                                 _glGenTextures;
extern PFNGLISTEXTUREPROC                                   _glIsTexture;
extern PFNGLDRAWRANGEELEMENTSPROC                           _glDrawRangeElements;
extern PFNGLTEXIMAGE3DPROC                                  _glTexImage3D;
extern PFNGLTEXSUBIMAGE3DPROC                               _glTexSubImage3D;
extern PFNGLCOPYTEXSUBIMAGE3DPROC                           _glCopyTexSubImage3D;
extern PFNGLACTIVETEXTUREPROC                               _glActiveTexture;
extern PFNGLSAMPLECOVERAGEPROC                              _glSampleCoverage;
extern PFNGLCOMPRESSEDTEXIMAGE3DPROC                        _glCompressedTexImage3D;
extern PFNGLCOMPRESSEDTEXIMAGE2DPROC                        _glCompressedTexImage2D;
extern PFNGLCOMPRESSEDTEXIMAGE1DPROC                        _glCompressedTexImage1D;
extern PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC                     _glCompressedTexSubImage3D;
extern PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC                     _glCompressedTexSubImage2D;
extern PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC                     _glCompressedTexSubImage1D;
extern PFNGLGETCOMPRESSEDTEXIMAGEPROC                       _glGetCompressedTexImage;
extern PFNGLBLENDFUNCSEPARATEPROC                           _glBlendFuncSeparate;
extern PFNGLMULTIDRAWARRAYSPROC                             _glMultiDrawArrays;
extern PFNGLMULTIDRAWELEMENTSPROC                           _glMultiDrawElements;
extern PFNGLPOINTPARAMETERFPROC                             _glPointParameterf;
extern PFNGLPOINTPARAMETERFVPROC                            _glPointParameterfv;
extern PFNGLPOINTPARAMETERIPROC                             _glPointParameteri;
extern PFNGLPOINTPARAMETERIVPROC                            _glPointParameteriv;
extern PFNGLBLENDCOLORPROC                                  _glBlendColor;
extern PFNGLBLENDEQUATIONPROC                               _glBlendEquation;
extern PFNGLGENQUERIESPROC                                  _glGenQueries;
extern PFNGLDELETEQUERIESPROC                               _glDeleteQueries;
extern PFNGLISQUERYPROC                                     _glIsQuery;
extern PFNGLBEGINQUERYPROC                                  _glBeginQuery;
extern PFNGLENDQUERYPROC                                    _glEndQuery;
extern PFNGLGETQUERYIVPROC                                  _glGetQueryiv;
extern PFNGLGETQUERYOBJECTIVPROC                            _glGetQueryObjectiv;
extern PFNGLGETQUERYOBJECTUIVPROC                           _glGetQueryObjectuiv;
extern PFNGLBINDBUFFERPROC                                  _glBindBuffer;
extern PFNGLDELETEBUFFERSPROC                               _glDeleteBuffers;
extern PFNGLGENBUFFERSPROC                                  _glGenBuffers;
extern PFNGLISBUFFERPROC                                    _glIsBuffer;
extern PFNGLBUFFERDATAPROC                                  _glBufferData;
extern PFNGLBUFFERSUBDATAPROC                               _glBufferSubData;
extern PFNGLGETBUFFERSUBDATAPROC                            _glGetBufferSubData;
extern PFNGLMAPBUFFERPROC                                   _glMapBuffer;
extern PFNGLUNMAPBUFFERPROC                                 _glUnmapBuffer;
extern PFNGLGETBUFFERPARAMETERIVPROC                        _glGetBufferParameteriv;
extern PFNGLGETBUFFERPOINTERVPROC                           _glGetBufferPointerv;
extern PFNGLBLENDEQUATIONSEPARATEPROC                       _glBlendEquationSeparate;
extern PFNGLDRAWBUFFERSPROC                                 _glDrawBuffers;
extern PFNGLSTENCILOPSEPARATEPROC                           _glStencilOpSeparate;
extern PFNGLSTENCILFUNCSEPARATEPROC                         _glStencilFuncSeparate;
extern PFNGLSTENCILMASKSEPARATEPROC                         _glStencilMaskSeparate;
extern PFNGLATTACHSHADERPROC                                _glAttachShader;
extern PFNGLBINDATTRIBLOCATIONPROC                          _glBindAttribLocation;
extern PFNGLCOMPILESHADERPROC                               _glCompileShader;
extern PFNGLCREATEPROGRAMPROC                               _glCreateProgram;
extern PFNGLCREATESHADERPROC                                _glCreateShader;
extern PFNGLDELETEPROGRAMPROC                               _glDeleteProgram;
extern PFNGLDELETESHADERPROC                                _glDeleteShader;
extern PFNGLDETACHSHADERPROC                                _glDetachShader;
extern PFNGLDISABLEVERTEXATTRIBARRAYPROC                    _glDisableVertexAttribArray;
extern PFNGLENABLEVERTEXATTRIBARRAYPROC                     _glEnableVertexAttribArray;
extern PFNGLGETACTIVEATTRIBPROC                             _glGetActiveAttrib;
extern PFNGLGETACTIVEUNIFORMPROC                            _glGetActiveUniform;
extern PFNGLGETATTACHEDSHADERSPROC                          _glGetAttachedShaders;
extern PFNGLGETATTRIBLOCATIONPROC                           _glGetAttribLocation;
extern PFNGLGETPROGRAMIVPROC                                _glGetProgramiv;
extern PFNGLGETPROGRAMINFOLOGPROC                           _glGetProgramInfoLog;
extern PFNGLGETSHADERIVPROC                                 _glGetShaderiv;
extern PFNGLGETSHADERINFOLOGPROC                            _glGetShaderInfoLog;
extern PFNGLGETSHADERSOURCEPROC                             _glGetShaderSource;
extern PFNGLGETUNIFORMLOCATIONPROC                          _glGetUniformLocation;
extern PFNGLGETUNIFORMFVPROC                                _glGetUniformfv;
extern PFNGLGETUNIFORMIVPROC                                _glGetUniformiv;
extern PFNGLGETVERTEXATTRIBDVPROC                           _glGetVertexAttribdv;
extern PFNGLGETVERTEXATTRIBFVPROC                           _glGetVertexAttribfv;
extern PFNGLGETVERTEXATTRIBIVPROC                           _glGetVertexAttribiv;
extern PFNGLGETVERTEXATTRIBPOINTERVPROC                     _glGetVertexAttribPointerv;
extern PFNGLISPROGRAMPROC                                   _glIsProgram;
extern PFNGLISSHADERPROC                                    _glIsShader;
extern PFNGLLINKPROGRAMPROC                                 _glLinkProgram;
extern PFNGLSHADERSOURCEPROC                                _glShaderSource;
extern PFNGLUSEPROGRAMPROC                                  _glUseProgram;
extern PFNGLUNIFORM1FPROC                                   _glUniform1f;
extern PFNGLUNIFORM2FPROC                                   _glUniform2f;
extern PFNGLUNIFORM3FPROC                                   _glUniform3f;
extern PFNGLUNIFORM4FPROC                                   _glUniform4f;
extern PFNGLUNIFORM1IPROC                                   _glUniform1i;
extern PFNGLUNIFORM2IPROC                                   _glUniform2i;
extern PFNGLUNIFORM3IPROC                                   _glUniform3i;
extern PFNGLUNIFORM4IPROC                                   _glUniform4i;
extern PFNGLUNIFORM1FVPROC                                  _glUniform1fv;
extern PFNGLUNIFORM2FVPROC                                  _glUniform2fv;
extern PFNGLUNIFORM3FVPROC                                  _glUniform3fv;
extern PFNGLUNIFORM4FVPROC                                  _glUniform4fv;
extern PFNGLUNIFORM1IVPROC                                  _glUniform1iv;
extern PFNGLUNIFORM2IVPROC                                  _glUniform2iv;
extern PFNGLUNIFORM3IVPROC                                  _glUniform3iv;
extern PFNGLUNIFORM4IVPROC                                  _glUniform4iv;
extern PFNGLUNIFORMMATRIX2FVPROC                            _glUniformMatrix2fv;
extern PFNGLUNIFORMMATRIX3FVPROC                            _glUniformMatrix3fv;
extern PFNGLUNIFORMMATRIX4FVPROC                            _glUniformMatrix4fv;
extern PFNGLVALIDATEPROGRAMPROC                             _glValidateProgram;
extern PFNGLVERTEXATTRIB1DPROC                              _glVertexAttrib1d;
extern PFNGLVERTEXATTRIB1DVPROC                             _glVertexAttrib1dv;
extern PFNGLVERTEXATTRIB1FPROC                              _glVertexAttrib1f;
extern PFNGLVERTEXATTRIB1FVPROC                             _glVertexAttrib1fv;
extern PFNGLVERTEXATTRIB1SPROC                              _glVertexAttrib1s;
extern PFNGLVERTEXATTRIB1SVPROC                             _glVertexAttrib1sv;
extern PFNGLVERTEXATTRIB2DPROC                              _glVertexAttrib2d;
extern PFNGLVERTEXATTRIB2DVPROC                             _glVertexAttrib2dv;
extern PFNGLVERTEXATTRIB2FPROC                              _glVertexAttrib2f;
extern PFNGLVERTEXATTRIB2FVPROC                             _glVertexAttrib2fv;
extern PFNGLVERTEXATTRIB2SPROC                              _glVertexAttrib2s;
extern PFNGLVERTEXATTRIB2SVPROC                             _glVertexAttrib2sv;
extern PFNGLVERTEXATTRIB3DPROC                              _glVertexAttrib3d;
extern PFNGLVERTEXATTRIB3DVPROC                             _glVertexAttrib3dv;
extern PFNGLVERTEXATTRIB3FPROC                              _glVertexAttrib3f;
extern PFNGLVERTEXATTRIB3FVPROC                             _glVertexAttrib3fv;
extern PFNGLVERTEXATTRIB3SPROC                              _glVertexAttrib3s;
extern PFNGLVERTEXATTRIB3SVPROC                             _glVertexAttrib3sv;
extern PFNGLVERTEXATTRIB4NBVPROC                            _glVertexAttrib4Nbv;
extern PFNGLVERTEXATTRIB4NIVPROC                            _glVertexAttrib4Niv;
extern PFNGLVERTEXATTRIB4NSVPROC                            _glVertexAttrib4Nsv;
extern PFNGLVERTEXATTRIB4NUBPROC                            _glVertexAttrib4Nub;
extern PFNGLVERTEXATTRIB4NUBVPROC                           _glVertexAttrib4Nubv;
extern PFNGLVERTEXATTRIB4NUIVPROC                           _glVertexAttrib4Nuiv;
extern PFNGLVERTEXATTRIB4NUSVPROC                           _glVertexAttrib4Nusv;
extern PFNGLVERTEXATTRIB4BVPROC                             _glVertexAttrib4bv;
extern PFNGLVERTEXATTRIB4DPROC                              _glVertexAttrib4d;
extern PFNGLVERTEXATTRIB4DVPROC                             _glVertexAttrib4dv;
extern PFNGLVERTEXATTRIB4FPROC                              _glVertexAttrib4f;
extern PFNGLVERTEXATTRIB4FVPROC                             _glVertexAttrib4fv;
extern PFNGLVERTEXATTRIB4IVPROC                             _glVertexAttrib4iv;
extern PFNGLVERTEXATTRIB4SPROC                              _glVertexAttrib4s;
extern PFNGLVERTEXATTRIB4SVPROC                             _glVertexAttrib4sv;
extern PFNGLVERTEXATTRIB4UBVPROC                            _glVertexAttrib4ubv;
extern PFNGLVERTEXATTRIB4UIVPROC                            _glVertexAttrib4uiv;
extern PFNGLVERTEXATTRIB4USVPROC                            _glVertexAttrib4usv;
extern PFNGLVERTEXATTRIBPOINTERPROC                         _glVertexAttribPointer;
extern PFNGLUNIFORMMATRIX2X3FVPROC                          _glUniformMatrix2x3fv;
extern PFNGLUNIFORMMATRIX3X2FVPROC                          _glUniformMatrix3x2fv;
extern PFNGLUNIFORMMATRIX2X4FVPROC                          _glUniformMatrix2x4fv;
extern PFNGLUNIFORMMATRIX4X2FVPROC                          _glUniformMatrix4x2fv;
extern PFNGLUNIFORMMATRIX3X4FVPROC                          _glUniformMatrix3x4fv;
extern PFNGLUNIFORMMATRIX4X3FVPROC                          _glUniformMatrix4x3fv;
extern PFNGLCOLORMASKIPROC                                  _glColorMaski;
extern PFNGLGETBOOLEANI_VPROC                               _glGetBooleani_v;
extern PFNGLGETINTEGERI_VPROC                               _glGetIntegeri_v;
extern PFNGLENABLEIPROC                                     _glEnablei;
extern PFNGLDISABLEIPROC                                    _glDisablei;
extern PFNGLISENABLEDIPROC                                  _glIsEnabledi;
extern PFNGLBEGINTRANSFORMFEEDBACKPROC                      _glBeginTransformFeedback;
extern PFNGLENDTRANSFORMFEEDBACKPROC                        _glEndTransformFeedback;
extern PFNGLBINDBUFFERRANGEPROC                             _glBindBufferRange;
extern PFNGLBINDBUFFERBASEPROC                              _glBindBufferBase;
extern PFNGLTRANSFORMFEEDBACKVARYINGSPROC                   _glTransformFeedbackVaryings;
extern PFNGLGETTRANSFORMFEEDBACKVARYINGPROC                 _glGetTransformFeedbackVarying;
extern PFNGLCLAMPCOLORPROC                                  _glClampColor;
extern PFNGLBEGINCONDITIONALRENDERPROC                      _glBeginConditionalRender;
extern PFNGLENDCONDITIONALRENDERPROC                        _glEndConditionalRender;
extern PFNGLVERTEXATTRIBIPOINTERPROC                        _glVertexAttribIPointer;
extern PFNGLGETVERTEXATTRIBIIVPROC                          _glGetVertexAttribIiv;
extern PFNGLGETVERTEXATTRIBIUIVPROC                         _glGetVertexAttribIuiv;
extern PFNGLVERTEXATTRIBI1IPROC                             _glVertexAttribI1i;
extern PFNGLVERTEXATTRIBI2IPROC                             _glVertexAttribI2i;
extern PFNGLVERTEXATTRIBI3IPROC                             _glVertexAttribI3i;
extern PFNGLVERTEXATTRIBI4IPROC                             _glVertexAttribI4i;
extern PFNGLVERTEXATTRIBI1UIPROC                            _glVertexAttribI1ui;
extern PFNGLVERTEXATTRIBI2UIPROC                            _glVertexAttribI2ui;
extern PFNGLVERTEXATTRIBI3UIPROC                            _glVertexAttribI3ui;
extern PFNGLVERTEXATTRIBI4UIPROC                            _glVertexAttribI4ui;
extern PFNGLVERTEXATTRIBI1IVPROC                            _glVertexAttribI1iv;
extern PFNGLVERTEXATTRIBI2IVPROC                            _glVertexAttribI2iv;
extern PFNGLVERTEXATTRIBI3IVPROC                            _glVertexAttribI3iv;
extern PFNGLVERTEXATTRIBI4IVPROC                            _glVertexAttribI4iv;
extern PFNGLVERTEXATTRIBI1UIVPROC                           _glVertexAttribI1uiv;
extern PFNGLVERTEXATTRIBI2UIVPROC                           _glVertexAttribI2uiv;
extern PFNGLVERTEXATTRIBI3UIVPROC                           _glVertexAttribI3uiv;
extern PFNGLVERTEXATTRIBI4UIVPROC                           _glVertexAttribI4uiv;
extern PFNGLVERTEXATTRIBI4BVPROC                            _glVertexAttribI4bv;
extern PFNGLVERTEXATTRIBI4SVPROC                            _glVertexAttribI4sv;
extern PFNGLVERTEXATTRIBI4UBVPROC                           _glVertexAttribI4ubv;
extern PFNGLVERTEXATTRIBI4USVPROC                           _glVertexAttribI4usv;
extern PFNGLGETUNIFORMUIVPROC                               _glGetUniformuiv;
extern PFNGLBINDFRAGDATALOCATIONPROC                        _glBindFragDataLocation;
extern PFNGLGETFRAGDATALOCATIONPROC                         _glGetFragDataLocation;
extern PFNGLUNIFORM1UIPROC                                  _glUniform1ui;
extern PFNGLUNIFORM2UIPROC                                  _glUniform2ui;
extern PFNGLUNIFORM3UIPROC                                  _glUniform3ui;
extern PFNGLUNIFORM4UIPROC                                  _glUniform4ui;
extern PFNGLUNIFORM1UIVPROC                                 _glUniform1uiv;
extern PFNGLUNIFORM2UIVPROC                                 _glUniform2uiv;
extern PFNGLUNIFORM3UIVPROC                                 _glUniform3uiv;
extern PFNGLUNIFORM4UIVPROC                                 _glUniform4uiv;
extern PFNGLTEXPARAMETERIIVPROC                             _glTexParameterIiv;
extern PFNGLTEXPARAMETERIUIVPROC                            _glTexParameterIuiv;
extern PFNGLGETTEXPARAMETERIIVPROC                          _glGetTexParameterIiv;
extern PFNGLGETTEXPARAMETERIUIVPROC                         _glGetTexParameterIuiv;
extern PFNGLCLEARBUFFERIVPROC                               _glClearBufferiv;
extern PFNGLCLEARBUFFERUIVPROC                              _glClearBufferuiv;
extern PFNGLCLEARBUFFERFVPROC                               _glClearBufferfv;
extern PFNGLCLEARBUFFERFIPROC                               _glClearBufferfi;
extern PFNGLGETSTRINGIPROC                                  _glGetStringi;
extern PFNGLISRENDERBUFFERPROC                              _glIsRenderbuffer;
extern PFNGLBINDRENDERBUFFERPROC                            _glBindRenderbuffer;
extern PFNGLDELETERENDERBUFFERSPROC                         _glDeleteRenderbuffers;
extern PFNGLGENRENDERBUFFERSPROC                            _glGenRenderbuffers;
extern PFNGLRENDERBUFFERSTORAGEPROC                         _glRenderbufferStorage;
extern PFNGLGETRENDERBUFFERPARAMETERIVPROC                  _glGetRenderbufferParameteriv;
extern PFNGLISFRAMEBUFFERPROC                               _glIsFramebuffer;
extern PFNGLBINDFRAMEBUFFERPROC                             _glBindFramebuffer;
extern PFNGLDELETEFRAMEBUFFERSPROC                          _glDeleteFramebuffers;
extern PFNGLGENFRAMEBUFFERSPROC                             _glGenFramebuffers;
extern PFNGLCHECKFRAMEBUFFERSTATUSPROC                      _glCheckFramebufferStatus;
extern PFNGLFRAMEBUFFERTEXTURE1DPROC                        _glFramebufferTexture1D;
extern PFNGLFRAMEBUFFERTEXTURE2DPROC                        _glFramebufferTexture2D;
extern PFNGLFRAMEBUFFERTEXTURE3DPROC                        _glFramebufferTexture3D;
extern PFNGLFRAMEBUFFERRENDERBUFFERPROC                     _glFramebufferRenderbuffer;
extern PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC         _glGetFramebufferAttachmentParameteriv;
extern PFNGLGENERATEMIPMAPPROC                              _glGenerateMipmap;
extern PFNGLBLITFRAMEBUFFERPROC                             _glBlitFramebuffer;
extern PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC              _glRenderbufferStorageMultisample;
extern PFNGLFRAMEBUFFERTEXTURELAYERPROC                     _glFramebufferTextureLayer;
extern PFNGLMAPBUFFERRANGEPROC                              _glMapBufferRange;
extern PFNGLFLUSHMAPPEDBUFFERRANGEPROC                      _glFlushMappedBufferRange;
extern PFNGLBINDVERTEXARRAYPROC                             _glBindVertexArray;
extern PFNGLDELETEVERTEXARRAYSPROC                          _glDeleteVertexArrays;
extern PFNGLGENVERTEXARRAYSPROC                             _glGenVertexArrays;
extern PFNGLISVERTEXARRAYPROC                               _glIsVertexArray;
extern PFNGLDRAWARRAYSINSTANCEDPROC                         _glDrawArraysInstanced;
extern PFNGLDRAWELEMENTSINSTANCEDPROC                       _glDrawElementsInstanced;
extern PFNGLTEXBUFFERPROC                                   _glTexBuffer;
extern PFNGLPRIMITIVERESTARTINDEXPROC                       _glPrimitiveRestartIndex;
extern PFNGLCOPYBUFFERSUBDATAPROC                           _glCopyBufferSubData;
extern PFNGLGETUNIFORMINDICESPROC                           _glGetUniformIndices;
extern PFNGLGETACTIVEUNIFORMSIVPROC                         _glGetActiveUniformsiv;
extern PFNGLGETACTIVEUNIFORMNAMEPROC                        _glGetActiveUniformName;
extern PFNGLGETUNIFORMBLOCKINDEXPROC                        _glGetUniformBlockIndex;
extern PFNGLGETACTIVEUNIFORMBLOCKIVPROC                     _glGetActiveUniformBlockiv;
extern PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC                   _glGetActiveUniformBlockName;
extern PFNGLUNIFORMBLOCKBINDINGPROC                         _glUniformBlockBinding;
extern PFNGLDRAWELEMENTSBASEVERTEXPROC                      _glDrawElementsBaseVertex;
extern PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC                 _glDrawRangeElementsBaseVertex;
extern PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC             _glDrawElementsInstancedBaseVertex;
extern PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC                 _glMultiDrawElementsBaseVertex;
extern PFNGLPROVOKINGVERTEXPROC                             _glProvokingVertex;
extern PFNGLFENCESYNCPROC                                   _glFenceSync;
extern PFNGLISSYNCPROC                                      _glIsSync;
extern PFNGLDELETESYNCPROC                                  _glDeleteSync;
extern PFNGLCLIENTWAITSYNCPROC                              _glClientWaitSync;
extern PFNGLWAITSYNCPROC                                    _glWaitSync;
extern PFNGLGETINTEGER64VPROC                               _glGetInteger64v;
extern PFNGLGETSYNCIVPROC                                   _glGetSynciv;
extern PFNGLGETINTEGER64I_VPROC                             _glGetInteger64i_v;
extern PFNGLGETBUFFERPARAMETERI64VPROC                      _glGetBufferParameteri64v;
extern PFNGLFRAMEBUFFERTEXTUREPROC                          _glFramebufferTexture;
extern PFNGLTEXIMAGE2DMULTISAMPLEPROC                       _glTexImage2DMultisample;
extern PFNGLTEXIMAGE3DMULTISAMPLEPROC                       _glTexImage3DMultisample;
extern PFNGLGETMULTISAMPLEFVPROC                            _glGetMultisamplefv;
extern PFNGLSAMPLEMASKIPROC                                 _glSampleMaski;
extern PFNGLBINDFRAGDATALOCATIONINDEXEDPROC                 _glBindFragDataLocationIndexed;
extern PFNGLGETFRAGDATAINDEXPROC                            _glGetFragDataIndex;
extern PFNGLGENSAMPLERSPROC                                 _glGenSamplers;
extern PFNGLDELETESAMPLERSPROC                              _glDeleteSamplers;
extern PFNGLISSAMPLERPROC                                   _glIsSampler;
extern PFNGLBINDSAMPLERPROC                                 _glBindSampler;
extern PFNGLSAMPLERPARAMETERIPROC                           _glSamplerParameteri;
extern PFNGLSAMPLERPARAMETERIVPROC                          _glSamplerParameteriv;
extern PFNGLSAMPLERPARAMETERFPROC                           _glSamplerParameterf;
extern PFNGLSAMPLERPARAMETERFVPROC                          _glSamplerParameterfv;
extern PFNGLSAMPLERPARAMETERIIVPROC                         _glSamplerParameterIiv;
extern PFNGLSAMPLERPARAMETERIUIVPROC                        _glSamplerParameterIuiv;
extern PFNGLGETSAMPLERPARAMETERIVPROC                       _glGetSamplerParameteriv;
extern PFNGLGETSAMPLERPARAMETERIIVPROC                      _glGetSamplerParameterIiv;
extern PFNGLGETSAMPLERPARAMETERFVPROC                       _glGetSamplerParameterfv;
extern PFNGLGETSAMPLERPARAMETERIUIVPROC                     _glGetSamplerParameterIuiv;
extern PFNGLQUERYCOUNTERPROC                                _glQueryCounter;
extern PFNGLGETQUERYOBJECTI64VPROC                          _glGetQueryObjecti64v;
extern PFNGLGETQUERYOBJECTUI64VPROC                         _glGetQueryObjectui64v;
extern PFNGLVERTEXATTRIBDIVISORPROC                         _glVertexAttribDivisor;
extern PFNGLVERTEXATTRIBP1UIPROC                            _glVertexAttribP1ui;
extern PFNGLVERTEXATTRIBP1UIVPROC                           _glVertexAttribP1uiv;
extern PFNGLVERTEXATTRIBP2UIPROC                            _glVertexAttribP2ui;
extern PFNGLVERTEXATTRIBP2UIVPROC                           _glVertexAttribP2uiv;
extern PFNGLVERTEXATTRIBP3UIPROC                            _glVertexAttribP3ui;
extern PFNGLVERTEXATTRIBP3UIVPROC                           _glVertexAttribP3uiv;
extern PFNGLVERTEXATTRIBP4UIPROC                            _glVertexAttribP4ui;
extern PFNGLVERTEXATTRIBP4UIVPROC                           _glVertexAttribP4uiv;
extern PFNGLMINSAMPLESHADINGPROC                            _glMinSampleShading;
extern PFNGLBLENDEQUATIONIPROC                              _glBlendEquationi;
extern PFNGLBLENDEQUATIONSEPARATEIPROC                      _glBlendEquationSeparatei;
extern PFNGLBLENDFUNCIPROC                                  _glBlendFunci;
extern PFNGLBLENDFUNCSEPARATEIPROC                          _glBlendFuncSeparatei;
extern PFNGLDRAWARRAYSINDIRECTPROC                          _glDrawArraysIndirect;
extern PFNGLDRAWELEMENTSINDIRECTPROC                        _glDrawElementsIndirect;
extern PFNGLUNIFORM1DPROC                                   _glUniform1d;
extern PFNGLUNIFORM2DPROC                                   _glUniform2d;
extern PFNGLUNIFORM3DPROC                                   _glUniform3d;
extern PFNGLUNIFORM4DPROC                                   _glUniform4d;
extern PFNGLUNIFORM1DVPROC                                  _glUniform1dv;
extern PFNGLUNIFORM2DVPROC                                  _glUniform2dv;
extern PFNGLUNIFORM3DVPROC                                  _glUniform3dv;
extern PFNGLUNIFORM4DVPROC                                  _glUniform4dv;
extern PFNGLUNIFORMMATRIX2DVPROC                            _glUniformMatrix2dv;
extern PFNGLUNIFORMMATRIX3DVPROC                            _glUniformMatrix3dv;
extern PFNGLUNIFORMMATRIX4DVPROC                            _glUniformMatrix4dv;
extern PFNGLUNIFORMMATRIX2X3DVPROC                          _glUniformMatrix2x3dv;
extern PFNGLUNIFORMMATRIX2X4DVPROC                          _glUniformMatrix2x4dv;
extern PFNGLUNIFORMMATRIX3X2DVPROC                          _glUniformMatrix3x2dv;
extern PFNGLUNIFORMMATRIX3X4DVPROC                          _glUniformMatrix3x4dv;
extern PFNGLUNIFORMMATRIX4X2DVPROC                          _glUniformMatrix4x2dv;
extern PFNGLUNIFORMMATRIX4X3DVPROC                          _glUniformMatrix4x3dv;
extern PFNGLGETUNIFORMDVPROC                                _glGetUniformdv;
extern PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC                _glGetSubroutineUniformLocation;
extern PFNGLGETSUBROUTINEINDEXPROC                          _glGetSubroutineIndex;
extern PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC                _glGetActiveSubroutineUniformiv;
extern PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC              _glGetActiveSubroutineUniformName;
extern PFNGLGETACTIVESUBROUTINENAMEPROC                     _glGetActiveSubroutineName;
extern PFNGLUNIFORMSUBROUTINESUIVPROC                       _glUniformSubroutinesuiv;
extern PFNGLGETUNIFORMSUBROUTINEUIVPROC                     _glGetUniformSubroutineuiv;
extern PFNGLGETPROGRAMSTAGEIVPROC                           _glGetProgramStageiv;
extern PFNGLPATCHPARAMETERIPROC                             _glPatchParameteri;
extern PFNGLPATCHPARAMETERFVPROC                            _glPatchParameterfv;
extern PFNGLBINDTRANSFORMFEEDBACKPROC                       _glBindTransformFeedback;
extern PFNGLDELETETRANSFORMFEEDBACKSPROC                    _glDeleteTransformFeedbacks;
extern PFNGLGENTRANSFORMFEEDBACKSPROC                       _glGenTransformFeedbacks;
extern PFNGLISTRANSFORMFEEDBACKPROC                         _glIsTransformFeedback;
extern PFNGLPAUSETRANSFORMFEEDBACKPROC                      _glPauseTransformFeedback;
extern PFNGLRESUMETRANSFORMFEEDBACKPROC                     _glResumeTransformFeedback;
extern PFNGLDRAWTRANSFORMFEEDBACKPROC                       _glDrawTransformFeedback;
extern PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC                 _glDrawTransformFeedbackStream;
extern PFNGLBEGINQUERYINDEXEDPROC                           _glBeginQueryIndexed;
extern PFNGLENDQUERYINDEXEDPROC                             _glEndQueryIndexed;
extern PFNGLGETQUERYINDEXEDIVPROC                           _glGetQueryIndexediv;
extern PFNGLRELEASESHADERCOMPILERPROC                       _glReleaseShaderCompiler;
extern PFNGLSHADERBINARYPROC                                _glShaderBinary;
extern PFNGLGETSHADERPRECISIONFORMATPROC                    _glGetShaderPrecisionFormat;
extern PFNGLDEPTHRANGEFPROC                                 _glDepthRangef;
extern PFNGLCLEARDEPTHFPROC                                 _glClearDepthf;
extern PFNGLGETPROGRAMBINARYPROC                            _glGetProgramBinary;
extern PFNGLPROGRAMBINARYPROC                               _glProgramBinary;
extern PFNGLPROGRAMPARAMETERIPROC                           _glProgramParameteri;
extern PFNGLUSEPROGRAMSTAGESPROC                            _glUseProgramStages;
extern PFNGLACTIVESHADERPROGRAMPROC                         _glActiveShaderProgram;
extern PFNGLCREATESHADERPROGRAMVPROC                        _glCreateShaderProgramv;
extern PFNGLBINDPROGRAMPIPELINEPROC                         _glBindProgramPipeline;
extern PFNGLDELETEPROGRAMPIPELINESPROC                      _glDeleteProgramPipelines;
extern PFNGLGENPROGRAMPIPELINESPROC                         _glGenProgramPipelines;
extern PFNGLISPROGRAMPIPELINEPROC                           _glIsProgramPipeline;
extern PFNGLGETPROGRAMPIPELINEIVPROC                        _glGetProgramPipelineiv;
extern PFNGLPROGRAMUNIFORM1IPROC                            _glProgramUniform1i;
extern PFNGLPROGRAMUNIFORM1IVPROC                           _glProgramUniform1iv;
extern PFNGLPROGRAMUNIFORM1FPROC                            _glProgramUniform1f;
extern PFNGLPROGRAMUNIFORM1FVPROC                           _glProgramUniform1fv;
extern PFNGLPROGRAMUNIFORM1DPROC                            _glProgramUniform1d;
extern PFNGLPROGRAMUNIFORM1DVPROC                           _glProgramUniform1dv;
extern PFNGLPROGRAMUNIFORM1UIPROC                           _glProgramUniform1ui;
extern PFNGLPROGRAMUNIFORM1UIVPROC                          _glProgramUniform1uiv;
extern PFNGLPROGRAMUNIFORM2IPROC                            _glProgramUniform2i;
extern PFNGLPROGRAMUNIFORM2IVPROC                           _glProgramUniform2iv;
extern PFNGLPROGRAMUNIFORM2FPROC                            _glProgramUniform2f;
extern PFNGLPROGRAMUNIFORM2FVPROC                           _glProgramUniform2fv;
extern PFNGLPROGRAMUNIFORM2DPROC                            _glProgramUniform2d;
extern PFNGLPROGRAMUNIFORM2DVPROC                           _glProgramUniform2dv;
extern PFNGLPROGRAMUNIFORM2UIPROC                           _glProgramUniform2ui;
extern PFNGLPROGRAMUNIFORM2UIVPROC                          _glProgramUniform2uiv;
extern PFNGLPROGRAMUNIFORM3IPROC                            _glProgramUniform3i;
extern PFNGLPROGRAMUNIFORM3IVPROC                           _glProgramUniform3iv;
extern PFNGLPROGRAMUNIFORM3FPROC                            _glProgramUniform3f;
extern PFNGLPROGRAMUNIFORM3FVPROC                           _glProgramUniform3fv;
extern PFNGLPROGRAMUNIFORM3DPROC                            _glProgramUniform3d;
extern PFNGLPROGRAMUNIFORM3DVPROC                           _glProgramUniform3dv;
extern PFNGLPROGRAMUNIFORM3UIPROC                           _glProgramUniform3ui;
extern PFNGLPROGRAMUNIFORM3UIVPROC                          _glProgramUniform3uiv;
extern PFNGLPROGRAMUNIFORM4IPROC                            _glProgramUniform4i;
extern PFNGLPROGRAMUNIFORM4IVPROC                           _glProgramUniform4iv;
extern PFNGLPROGRAMUNIFORM4FPROC                            _glProgramUniform4f;
extern PFNGLPROGRAMUNIFORM4FVPROC                           _glProgramUniform4fv;
extern PFNGLPROGRAMUNIFORM4DPROC                            _glProgramUniform4d;
extern PFNGLPROGRAMUNIFORM4DVPROC                           _glProgramUniform4dv;
extern PFNGLPROGRAMUNIFORM4UIPROC                           _glProgramUniform4ui;
extern PFNGLPROGRAMUNIFORM4UIVPROC                          _glProgramUniform4uiv;
extern PFNGLPROGRAMUNIFORMMATRIX2FVPROC                     _glProgramUniformMatrix2fv;
extern PFNGLPROGRAMUNIFORMMATRIX3FVPROC                     _glProgramUniformMatrix3fv;
extern PFNGLPROGRAMUNIFORMMATRIX4FVPROC                     _glProgramUniformMatrix4fv;
extern PFNGLPROGRAMUNIFORMMATRIX2DVPROC                     _glProgramUniformMatrix2dv;
extern PFNGLPROGRAMUNIFORMMATRIX3DVPROC                     _glProgramUniformMatrix3dv;
extern PFNGLPROGRAMUNIFORMMATRIX4DVPROC                     _glProgramUniformMatrix4dv;
extern PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC                   _glProgramUniformMatrix2x3fv;
extern PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC                   _glProgramUniformMatrix3x2fv;
extern PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC                   _glProgramUniformMatrix2x4fv;
extern PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC                   _glProgramUniformMatrix4x2fv;
extern PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC                   _glProgramUniformMatrix3x4fv;
extern PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC                   _glProgramUniformMatrix4x3fv;
extern PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC                   _glProgramUniformMatrix2x3dv;
extern PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC                   _glProgramUniformMatrix3x2dv;
extern PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC                   _glProgramUniformMatrix2x4dv;
extern PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC                   _glProgramUniformMatrix4x2dv;
extern PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC                   _glProgramUniformMatrix3x4dv;
extern PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC                   _glProgramUniformMatrix4x3dv;
extern PFNGLVALIDATEPROGRAMPIPELINEPROC                     _glValidateProgramPipeline;
extern PFNGLGETPROGRAMPIPELINEINFOLOGPROC                   _glGetProgramPipelineInfoLog;
extern PFNGLVERTEXATTRIBL1DPROC                             _glVertexAttribL1d;
extern PFNGLVERTEXATTRIBL2DPROC                             _glVertexAttribL2d;
extern PFNGLVERTEXATTRIBL3DPROC                             _glVertexAttribL3d;
extern PFNGLVERTEXATTRIBL4DPROC                             _glVertexAttribL4d;
extern PFNGLVERTEXATTRIBL1DVPROC                            _glVertexAttribL1dv;
extern PFNGLVERTEXATTRIBL2DVPROC                            _glVertexAttribL2dv;
extern PFNGLVERTEXATTRIBL3DVPROC                            _glVertexAttribL3dv;
extern PFNGLVERTEXATTRIBL4DVPROC                            _glVertexAttribL4dv;
extern PFNGLVERTEXATTRIBLPOINTERPROC                        _glVertexAttribLPointer;
extern PFNGLGETVERTEXATTRIBLDVPROC                          _glGetVertexAttribLdv;
extern PFNGLVIEWPORTARRAYVPROC                              _glViewportArrayv;
extern PFNGLVIEWPORTINDEXEDFPROC                            _glViewportIndexedf;
extern PFNGLVIEWPORTINDEXEDFVPROC                           _glViewportIndexedfv;
extern PFNGLSCISSORARRAYVPROC                               _glScissorArrayv;
extern PFNGLSCISSORINDEXEDPROC                              _glScissorIndexed;
extern PFNGLSCISSORINDEXEDVPROC                             _glScissorIndexedv;
extern PFNGLDEPTHRANGEARRAYVPROC                            _glDepthRangeArrayv;
extern PFNGLDEPTHRANGEINDEXEDPROC                           _glDepthRangeIndexed;
extern PFNGLGETFLOATI_VPROC                                 _glGetFloati_v;
extern PFNGLGETDOUBLEI_VPROC                                _glGetDoublei_v;
extern PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC             _glDrawArraysInstancedBaseInstance;
extern PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC           _glDrawElementsInstancedBaseInstance;
extern PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC _glDrawElementsInstancedBaseVertexBaseInstance;
extern PFNGLGETINTERNALFORMATIVPROC                         _glGetInternalformativ;
extern PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC              _glGetActiveAtomicCounterBufferiv;
extern PFNGLBINDIMAGETEXTUREPROC                            _glBindImageTexture;
extern PFNGLMEMORYBARRIERPROC                               _glMemoryBarrier;
extern PFNGLTEXSTORAGE1DPROC                                _glTexStorage1D;
extern PFNGLTEXSTORAGE2DPROC                                _glTexStorage2D;
extern PFNGLTEXSTORAGE3DPROC                                _glTexStorage3D;
extern PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC              _glDrawTransformFeedbackInstanced;
extern PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC        _glDrawTransformFeedbackStreamInstanced;
extern PFNGLCLEARBUFFERDATAPROC                             _glClearBufferData;
extern PFNGLCLEARBUFFERSUBDATAPROC                          _glClearBufferSubData;
extern PFNGLDISPATCHCOMPUTEPROC                             _glDispatchCompute;
extern PFNGLDISPATCHCOMPUTEINDIRECTPROC                     _glDispatchComputeIndirect;
extern PFNGLCOPYIMAGESUBDATAPROC                            _glCopyImageSubData;
extern PFNGLFRAMEBUFFERPARAMETERIPROC                       _glFramebufferParameteri;
extern PFNGLGETFRAMEBUFFERPARAMETERIVPROC                   _glGetFramebufferParameteriv;
extern PFNGLGETINTERNALFORMATI64VPROC                       _glGetInternalformati64v;
extern PFNGLINVALIDATETEXSUBIMAGEPROC                       _glInvalidateTexSubImage;
extern PFNGLINVALIDATETEXIMAGEPROC                          _glInvalidateTexImage;
extern PFNGLINVALIDATEBUFFERSUBDATAPROC                     _glInvalidateBufferSubData;
extern PFNGLINVALIDATEBUFFERDATAPROC                        _glInvalidateBufferData;
extern PFNGLINVALIDATEFRAMEBUFFERPROC                       _glInvalidateFramebuffer;
extern PFNGLINVALIDATESUBFRAMEBUFFERPROC                    _glInvalidateSubFramebuffer;
extern PFNGLMULTIDRAWARRAYSINDIRECTPROC                     _glMultiDrawArraysIndirect;
extern PFNGLMULTIDRAWELEMENTSINDIRECTPROC                   _glMultiDrawElementsIndirect;
extern PFNGLGETPROGRAMINTERFACEIVPROC                       _glGetProgramInterfaceiv;
extern PFNGLGETPROGRAMRESOURCEINDEXPROC                     _glGetProgramResourceIndex;
extern PFNGLGETPROGRAMRESOURCENAMEPROC                      _glGetProgramResourceName;
extern PFNGLGETPROGRAMRESOURCEIVPROC                        _glGetProgramResourceiv;
extern PFNGLGETPROGRAMRESOURCELOCATIONPROC                  _glGetProgramResourceLocation;
extern PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC             _glGetProgramResourceLocationIndex;
extern PFNGLSHADERSTORAGEBLOCKBINDINGPROC                   _glShaderStorageBlockBinding;
extern PFNGLTEXBUFFERRANGEPROC                              _glTexBufferRange;
extern PFNGLTEXSTORAGE2DMULTISAMPLEPROC                     _glTexStorage2DMultisample;
extern PFNGLTEXSTORAGE3DMULTISAMPLEPROC                     _glTexStorage3DMultisample;
extern PFNGLTEXTUREVIEWPROC                                 _glTextureView;
extern PFNGLBINDVERTEXBUFFERPROC                            _glBindVertexBuffer;
extern PFNGLVERTEXATTRIBFORMATPROC                          _glVertexAttribFormat;
extern PFNGLVERTEXATTRIBIFORMATPROC                         _glVertexAttribIFormat;
extern PFNGLVERTEXATTRIBLFORMATPROC                         _glVertexAttribLFormat;
extern PFNGLVERTEXATTRIBBINDINGPROC                         _glVertexAttribBinding;
extern PFNGLVERTEXBINDINGDIVISORPROC                        _glVertexBindingDivisor;
extern PFNGLDEBUGMESSAGECONTROLPROC                         _glDebugMessageControl;
extern PFNGLDEBUGMESSAGEINSERTPROC                          _glDebugMessageInsert;
extern PFNGLDEBUGMESSAGECALLBACKPROC                        _glDebugMessageCallback;
extern PFNGLGETDEBUGMESSAGELOGPROC                          _glGetDebugMessageLog;
extern PFNGLPUSHDEBUGGROUPPROC                              _glPushDebugGroup;
extern PFNGLPOPDEBUGGROUPPROC                               _glPopDebugGroup;
extern PFNGLOBJECTLABELPROC                                 _glObjectLabel;
extern PFNGLGETOBJECTLABELPROC                              _glGetObjectLabel;
extern PFNGLOBJECTPTRLABELPROC                              _glObjectPtrLabel;
extern PFNGLGETOBJECTPTRLABELPROC                           _glGetObjectPtrLabel;
extern PFNGLBUFFERSTORAGEPROC                               _glBufferStorage;
extern PFNGLCLEARTEXIMAGEPROC                               _glClearTexImage;
extern PFNGLCLEARTEXSUBIMAGEPROC                            _glClearTexSubImage;
extern PFNGLBINDBUFFERSBASEPROC                             _glBindBuffersBase;
extern PFNGLBINDBUFFERSRANGEPROC                            _glBindBuffersRange;
extern PFNGLBINDTEXTURESPROC                                _glBindTextures;
extern PFNGLBINDSAMPLERSPROC                                _glBindSamplers;
extern PFNGLBINDIMAGETEXTURESPROC                           _glBindImageTextures;
extern PFNGLBINDVERTEXBUFFERSPROC                           _glBindVertexBuffers;
extern PFNGLCLIPCONTROLPROC                                 _glClipControl;
extern PFNGLCREATETRANSFORMFEEDBACKSPROC                    _glCreateTransformFeedbacks;
extern PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC                 _glTransformFeedbackBufferBase;
extern PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC                _glTransformFeedbackBufferRange;
extern PFNGLGETTRANSFORMFEEDBACKIVPROC                      _glGetTransformFeedbackiv;
extern PFNGLGETTRANSFORMFEEDBACKI_VPROC                     _glGetTransformFeedbacki_v;
extern PFNGLGETTRANSFORMFEEDBACKI64_VPROC                   _glGetTransformFeedbacki64_v;
extern PFNGLCREATEBUFFERSPROC                               _glCreateBuffers;
extern PFNGLNAMEDBUFFERSTORAGEPROC                          _glNamedBufferStorage;
extern PFNGLNAMEDBUFFERDATAPROC                             _glNamedBufferData;
extern PFNGLNAMEDBUFFERSUBDATAPROC                          _glNamedBufferSubData;
extern PFNGLCOPYNAMEDBUFFERSUBDATAPROC                      _glCopyNamedBufferSubData;
extern PFNGLCLEARNAMEDBUFFERDATAPROC                        _glClearNamedBufferData;
extern PFNGLCLEARNAMEDBUFFERSUBDATAPROC                     _glClearNamedBufferSubData;
extern PFNGLMAPNAMEDBUFFERPROC                              _glMapNamedBuffer;
extern PFNGLMAPNAMEDBUFFERRANGEPROC                         _glMapNamedBufferRange;
extern PFNGLUNMAPNAMEDBUFFERPROC                            _glUnmapNamedBuffer;
extern PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC                 _glFlushMappedNamedBufferRange;
extern PFNGLGETNAMEDBUFFERPARAMETERIVPROC                   _glGetNamedBufferParameteriv;
extern PFNGLGETNAMEDBUFFERPARAMETERI64VPROC                 _glGetNamedBufferParameteri64v;
extern PFNGLGETNAMEDBUFFERPOINTERVPROC                      _glGetNamedBufferPointerv;
extern PFNGLGETNAMEDBUFFERSUBDATAPROC                       _glGetNamedBufferSubData;
extern PFNGLCREATEFRAMEBUFFERSPROC                          _glCreateFramebuffers;
extern PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC                _glNamedFramebufferRenderbuffer;
extern PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC                  _glNamedFramebufferParameteri;
extern PFNGLNAMEDFRAMEBUFFERTEXTUREPROC                     _glNamedFramebufferTexture;
extern PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC                _glNamedFramebufferTextureLayer;
extern PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC                  _glNamedFramebufferDrawBuffer;
extern PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC                 _glNamedFramebufferDrawBuffers;
extern PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC                  _glNamedFramebufferReadBuffer;
extern PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC              _glInvalidateNamedFramebufferData;
extern PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC           _glInvalidateNamedFramebufferSubData;
extern PFNGLCLEARNAMEDFRAMEBUFFERIVPROC                     _glClearNamedFramebufferiv;
extern PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC                    _glClearNamedFramebufferuiv;
extern PFNGLCLEARNAMEDFRAMEBUFFERFVPROC                     _glClearNamedFramebufferfv;
extern PFNGLCLEARNAMEDFRAMEBUFFERFIPROC                     _glClearNamedFramebufferfi;
extern PFNGLBLITNAMEDFRAMEBUFFERPROC                        _glBlitNamedFramebuffer;
extern PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC                 _glCheckNamedFramebufferStatus;
extern PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC              _glGetNamedFramebufferParameteriv;
extern PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC    _glGetNamedFramebufferAttachmentParameteriv;
extern PFNGLCREATERENDERBUFFERSPROC                         _glCreateRenderbuffers;
extern PFNGLNAMEDRENDERBUFFERSTORAGEPROC                    _glNamedRenderbufferStorage;
extern PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC         _glNamedRenderbufferStorageMultisample;
extern PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC             _glGetNamedRenderbufferParameteriv;
extern PFNGLCREATETEXTURESPROC                              _glCreateTextures;
extern PFNGLTEXTUREBUFFERPROC                               _glTextureBuffer;
extern PFNGLTEXTUREBUFFERRANGEPROC                          _glTextureBufferRange;
extern PFNGLTEXTURESTORAGE1DPROC                            _glTextureStorage1D;
extern PFNGLTEXTURESTORAGE2DPROC                            _glTextureStorage2D;
extern PFNGLTEXTURESTORAGE3DPROC                            _glTextureStorage3D;
extern PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC                 _glTextureStorage2DMultisample;
extern PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC                 _glTextureStorage3DMultisample;
extern PFNGLTEXTURESUBIMAGE1DPROC                           _glTextureSubImage1D;
extern PFNGLTEXTURESUBIMAGE2DPROC                           _glTextureSubImage2D;
extern PFNGLTEXTURESUBIMAGE3DPROC                           _glTextureSubImage3D;
extern PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC                 _glCompressedTextureSubImage1D;
extern PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC                 _glCompressedTextureSubImage2D;
extern PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC                 _glCompressedTextureSubImage3D;
extern PFNGLCOPYTEXTURESUBIMAGE1DPROC                       _glCopyTextureSubImage1D;
extern PFNGLCOPYTEXTURESUBIMAGE2DPROC                       _glCopyTextureSubImage2D;
extern PFNGLCOPYTEXTURESUBIMAGE3DPROC                       _glCopyTextureSubImage3D;
extern PFNGLTEXTUREPARAMETERFPROC                           _glTextureParameterf;
extern PFNGLTEXTUREPARAMETERFVPROC                          _glTextureParameterfv;
extern PFNGLTEXTUREPARAMETERIPROC                           _glTextureParameteri;
extern PFNGLTEXTUREPARAMETERIIVPROC                         _glTextureParameterIiv;
extern PFNGLTEXTUREPARAMETERIUIVPROC                        _glTextureParameterIuiv;
extern PFNGLTEXTUREPARAMETERIVPROC                          _glTextureParameteriv;
extern PFNGLGENERATETEXTUREMIPMAPPROC                       _glGenerateTextureMipmap;
extern PFNGLBINDTEXTUREUNITPROC                             _glBindTextureUnit;
extern PFNGLGETTEXTUREIMAGEPROC                             _glGetTextureImage;
extern PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC                   _glGetCompressedTextureImage;
extern PFNGLGETTEXTURELEVELPARAMETERFVPROC                  _glGetTextureLevelParameterfv;
extern PFNGLGETTEXTURELEVELPARAMETERIVPROC                  _glGetTextureLevelParameteriv;
extern PFNGLGETTEXTUREPARAMETERFVPROC                       _glGetTextureParameterfv;
extern PFNGLGETTEXTUREPARAMETERIIVPROC                      _glGetTextureParameterIiv;
extern PFNGLGETTEXTUREPARAMETERIUIVPROC                     _glGetTextureParameterIuiv;
extern PFNGLGETTEXTUREPARAMETERIVPROC                       _glGetTextureParameteriv;
extern PFNGLCREATEVERTEXARRAYSPROC                          _glCreateVertexArrays;
extern PFNGLDISABLEVERTEXARRAYATTRIBPROC                    _glDisableVertexArrayAttrib;
extern PFNGLENABLEVERTEXARRAYATTRIBPROC                     _glEnableVertexArrayAttrib;
extern PFNGLVERTEXARRAYELEMENTBUFFERPROC                    _glVertexArrayElementBuffer;
extern PFNGLVERTEXARRAYVERTEXBUFFERPROC                     _glVertexArrayVertexBuffer;
extern PFNGLVERTEXARRAYVERTEXBUFFERSPROC                    _glVertexArrayVertexBuffers;
extern PFNGLVERTEXARRAYATTRIBBINDINGPROC                    _glVertexArrayAttribBinding;
extern PFNGLVERTEXARRAYATTRIBFORMATPROC                     _glVertexArrayAttribFormat;
extern PFNGLVERTEXARRAYATTRIBIFORMATPROC                    _glVertexArrayAttribIFormat;
extern PFNGLVERTEXARRAYATTRIBLFORMATPROC                    _glVertexArrayAttribLFormat;
extern PFNGLVERTEXARRAYBINDINGDIVISORPROC                   _glVertexArrayBindingDivisor;
extern PFNGLGETVERTEXARRAYIVPROC                            _glGetVertexArrayiv;
extern PFNGLGETVERTEXARRAYINDEXEDIVPROC                     _glGetVertexArrayIndexediv;
extern PFNGLGETVERTEXARRAYINDEXED64IVPROC                   _glGetVertexArrayIndexed64iv;
extern PFNGLCREATESAMPLERSPROC                              _glCreateSamplers;
extern PFNGLCREATEPROGRAMPIPELINESPROC                      _glCreateProgramPipelines;
extern PFNGLCREATEQUERIESPROC                               _glCreateQueries;
extern PFNGLGETQUERYBUFFEROBJECTI64VPROC                    _glGetQueryBufferObjecti64v;
extern PFNGLGETQUERYBUFFEROBJECTIVPROC                      _glGetQueryBufferObjectiv;
extern PFNGLGETQUERYBUFFEROBJECTUI64VPROC                   _glGetQueryBufferObjectui64v;
extern PFNGLGETQUERYBUFFEROBJECTUIVPROC                     _glGetQueryBufferObjectuiv;
extern PFNGLMEMORYBARRIERBYREGIONPROC                       _glMemoryBarrierByRegion;
extern PFNGLGETTEXTURESUBIMAGEPROC                          _glGetTextureSubImage;
extern PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC                _glGetCompressedTextureSubImage;
extern PFNGLGETGRAPHICSRESETSTATUSPROC                      _glGetGraphicsResetStatus;
extern PFNGLGETNCOMPRESSEDTEXIMAGEPROC                      _glGetnCompressedTexImage;
extern PFNGLGETNTEXIMAGEPROC                                _glGetnTexImage;
extern PFNGLGETNUNIFORMDVPROC                               _glGetnUniformdv;
extern PFNGLGETNUNIFORMFVPROC                               _glGetnUniformfv;
extern PFNGLGETNUNIFORMIVPROC                               _glGetnUniformiv;
extern PFNGLGETNUNIFORMUIVPROC                              _glGetnUniformuiv;
extern PFNGLREADNPIXELSPROC                                 _glReadnPixels;
extern PFNGLTEXTUREBARRIERPROC                              _glTextureBarrier;
extern PFNGLSPECIALIZESHADERPROC                            _glSpecializeShader;
extern PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC                _glMultiDrawArraysIndirectCount;
extern PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC              _glMultiDrawElementsIndirectCount;
extern PFNGLPOLYGONOFFSETCLAMPPROC                          _glPolygonOffsetClamp;
extern PFNGLPRIMITIVEBOUNDINGBOXARBPROC                     _glPrimitiveBoundingBoxARB;
extern PFNGLGETTEXTUREHANDLEARBPROC                         _glGetTextureHandleARB;
extern PFNGLGETTEXTURESAMPLERHANDLEARBPROC                  _glGetTextureSamplerHandleARB;
extern PFNGLMAKETEXTUREHANDLERESIDENTARBPROC                _glMakeTextureHandleResidentARB;
extern PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC             _glMakeTextureHandleNonResidentARB;
extern PFNGLGETIMAGEHANDLEARBPROC                           _glGetImageHandleARB;
extern PFNGLMAKEIMAGEHANDLERESIDENTARBPROC                  _glMakeImageHandleResidentARB;
extern PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC               _glMakeImageHandleNonResidentARB;
extern PFNGLUNIFORMHANDLEUI64ARBPROC                        _glUniformHandleui64ARB;
extern PFNGLUNIFORMHANDLEUI64VARBPROC                       _glUniformHandleui64vARB;
extern PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC                 _glProgramUniformHandleui64ARB;
extern PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC                _glProgramUniformHandleui64vARB;
extern PFNGLISTEXTUREHANDLERESIDENTARBPROC                  _glIsTextureHandleResidentARB;
extern PFNGLISIMAGEHANDLERESIDENTARBPROC                    _glIsImageHandleResidentARB;
extern PFNGLVERTEXATTRIBL1UI64ARBPROC                       _glVertexAttribL1ui64ARB;
extern PFNGLVERTEXATTRIBL1UI64VARBPROC                      _glVertexAttribL1ui64vARB;
extern PFNGLGETVERTEXATTRIBLUI64VARBPROC                    _glGetVertexAttribLui64vARB;
extern PFNGLCREATESYNCFROMCLEVENTARBPROC                    _glCreateSyncFromCLeventARB;
extern PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC                 _glDispatchComputeGroupSizeARB;
extern PFNGLDEBUGMESSAGECONTROLARBPROC                      _glDebugMessageControlARB;
extern PFNGLDEBUGMESSAGEINSERTARBPROC                       _glDebugMessageInsertARB;
extern PFNGLDEBUGMESSAGECALLBACKARBPROC                     _glDebugMessageCallbackARB;
extern PFNGLGETDEBUGMESSAGELOGARBPROC                       _glGetDebugMessageLogARB;
extern PFNGLBLENDEQUATIONIARBPROC                           _glBlendEquationiARB;
extern PFNGLBLENDEQUATIONSEPARATEIARBPROC                   _glBlendEquationSeparateiARB;
extern PFNGLBLENDFUNCIARBPROC                               _glBlendFunciARB;
extern PFNGLBLENDFUNCSEPARATEIARBPROC                       _glBlendFuncSeparateiARB;
extern PFNGLDRAWARRAYSINSTANCEDARBPROC                      _glDrawArraysInstancedARB;
extern PFNGLDRAWELEMENTSINSTANCEDARBPROC                    _glDrawElementsInstancedARB;
extern PFNGLPROGRAMPARAMETERIARBPROC                        _glProgramParameteriARB;
extern PFNGLFRAMEBUFFERTEXTUREARBPROC                       _glFramebufferTextureARB;
extern PFNGLFRAMEBUFFERTEXTURELAYERARBPROC                  _glFramebufferTextureLayerARB;
extern PFNGLFRAMEBUFFERTEXTUREFACEARBPROC                   _glFramebufferTextureFaceARB;
extern PFNGLSPECIALIZESHADERARBPROC                         _glSpecializeShaderARB;
extern PFNGLUNIFORM1I64ARBPROC                              _glUniform1i64ARB;
extern PFNGLUNIFORM2I64ARBPROC                              _glUniform2i64ARB;
extern PFNGLUNIFORM3I64ARBPROC                              _glUniform3i64ARB;
extern PFNGLUNIFORM4I64ARBPROC                              _glUniform4i64ARB;
extern PFNGLUNIFORM1I64VARBPROC                             _glUniform1i64vARB;
extern PFNGLUNIFORM2I64VARBPROC                             _glUniform2i64vARB;
extern PFNGLUNIFORM3I64VARBPROC                             _glUniform3i64vARB;
extern PFNGLUNIFORM4I64VARBPROC                             _glUniform4i64vARB;
extern PFNGLUNIFORM1UI64ARBPROC                             _glUniform1ui64ARB;
extern PFNGLUNIFORM2UI64ARBPROC                             _glUniform2ui64ARB;
extern PFNGLUNIFORM3UI64ARBPROC                             _glUniform3ui64ARB;
extern PFNGLUNIFORM4UI64ARBPROC                             _glUniform4ui64ARB;
extern PFNGLUNIFORM1UI64VARBPROC                            _glUniform1ui64vARB;
extern PFNGLUNIFORM2UI64VARBPROC                            _glUniform2ui64vARB;
extern PFNGLUNIFORM3UI64VARBPROC                            _glUniform3ui64vARB;
extern PFNGLUNIFORM4UI64VARBPROC                            _glUniform4ui64vARB;
extern PFNGLGETUNIFORMI64VARBPROC                           _glGetUniformi64vARB;
extern PFNGLGETUNIFORMUI64VARBPROC                          _glGetUniformui64vARB;
extern PFNGLGETNUNIFORMI64VARBPROC                          _glGetnUniformi64vARB;
extern PFNGLGETNUNIFORMUI64VARBPROC                         _glGetnUniformui64vARB;
extern PFNGLPROGRAMUNIFORM1I64ARBPROC                       _glProgramUniform1i64ARB;
extern PFNGLPROGRAMUNIFORM2I64ARBPROC                       _glProgramUniform2i64ARB;
extern PFNGLPROGRAMUNIFORM3I64ARBPROC                       _glProgramUniform3i64ARB;
extern PFNGLPROGRAMUNIFORM4I64ARBPROC                       _glProgramUniform4i64ARB;
extern PFNGLPROGRAMUNIFORM1I64VARBPROC                      _glProgramUniform1i64vARB;
extern PFNGLPROGRAMUNIFORM2I64VARBPROC                      _glProgramUniform2i64vARB;
extern PFNGLPROGRAMUNIFORM3I64VARBPROC                      _glProgramUniform3i64vARB;
extern PFNGLPROGRAMUNIFORM4I64VARBPROC                      _glProgramUniform4i64vARB;
extern PFNGLPROGRAMUNIFORM1UI64ARBPROC                      _glProgramUniform1ui64ARB;
extern PFNGLPROGRAMUNIFORM2UI64ARBPROC                      _glProgramUniform2ui64ARB;
extern PFNGLPROGRAMUNIFORM3UI64ARBPROC                      _glProgramUniform3ui64ARB;
extern PFNGLPROGRAMUNIFORM4UI64ARBPROC                      _glProgramUniform4ui64ARB;
extern PFNGLPROGRAMUNIFORM1UI64VARBPROC                     _glProgramUniform1ui64vARB;
extern PFNGLPROGRAMUNIFORM2UI64VARBPROC                     _glProgramUniform2ui64vARB;
extern PFNGLPROGRAMUNIFORM3UI64VARBPROC                     _glProgramUniform3ui64vARB;
extern PFNGLPROGRAMUNIFORM4UI64VARBPROC                     _glProgramUniform4ui64vARB;
extern PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC             _glMultiDrawArraysIndirectCountARB;
extern PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC           _glMultiDrawElementsIndirectCountARB;
extern PFNGLVERTEXATTRIBDIVISORARBPROC                      _glVertexAttribDivisorARB;
extern PFNGLMAXSHADERCOMPILERTHREADSARBPROC                 _glMaxShaderCompilerThreadsARB;
extern PFNGLGETGRAPHICSRESETSTATUSARBPROC                   _glGetGraphicsResetStatusARB;
extern PFNGLGETNTEXIMAGEARBPROC                             _glGetnTexImageARB;
extern PFNGLREADNPIXELSARBPROC                              _glReadnPixelsARB;
extern PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC                   _glGetnCompressedTexImageARB;
extern PFNGLGETNUNIFORMFVARBPROC                            _glGetnUniformfvARB;
extern PFNGLGETNUNIFORMIVARBPROC                            _glGetnUniformivARB;
extern PFNGLGETNUNIFORMUIVARBPROC                           _glGetnUniformuivARB;
extern PFNGLGETNUNIFORMDVARBPROC                            _glGetnUniformdvARB;
extern PFNGLFRAMEBUFFERSAMPLELOCATIONSFVARBPROC             _glFramebufferSampleLocationsfvARB;
extern PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVARBPROC        _glNamedFramebufferSampleLocationsfvARB;
extern PFNGLEVALUATEDEPTHVALUESARBPROC                      _glEvaluateDepthValuesARB;
extern PFNGLMINSAMPLESHADINGARBPROC                         _glMinSampleShadingARB;
extern PFNGLNAMEDSTRINGARBPROC                              _glNamedStringARB;
extern PFNGLDELETENAMEDSTRINGARBPROC                        _glDeleteNamedStringARB;
extern PFNGLCOMPILESHADERINCLUDEARBPROC                     _glCompileShaderIncludeARB;
extern PFNGLISNAMEDSTRINGARBPROC                            _glIsNamedStringARB;
extern PFNGLGETNAMEDSTRINGARBPROC                           _glGetNamedStringARB;
extern PFNGLGETNAMEDSTRINGIVARBPROC                         _glGetNamedStringivARB;
extern PFNGLBUFFERPAGECOMMITMENTARBPROC                     _glBufferPageCommitmentARB;
extern PFNGLNAMEDBUFFERPAGECOMMITMENTEXTPROC                _glNamedBufferPageCommitmentEXT;
extern PFNGLNAMEDBUFFERPAGECOMMITMENTARBPROC                _glNamedBufferPageCommitmentARB;
extern PFNGLTEXPAGECOMMITMENTARBPROC                        _glTexPageCommitmentARB;
extern PFNGLTEXBUFFERARBPROC                                _glTexBufferARB;
extern PFNGLBLENDBARRIERKHRPROC                             _glBlendBarrierKHR;
extern PFNGLMAXSHADERCOMPILERTHREADSKHRPROC                 _glMaxShaderCompilerThreadsKHR;
extern PFNGLGETPERFMONITORGROUPSAMDPROC                     _glGetPerfMonitorGroupsAMD;
extern PFNGLGETPERFMONITORCOUNTERSAMDPROC                   _glGetPerfMonitorCountersAMD;
extern PFNGLGETPERFMONITORGROUPSTRINGAMDPROC                _glGetPerfMonitorGroupStringAMD;
extern PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC              _glGetPerfMonitorCounterStringAMD;
extern PFNGLGETPERFMONITORCOUNTERINFOAMDPROC                _glGetPerfMonitorCounterInfoAMD;
extern PFNGLGENPERFMONITORSAMDPROC                          _glGenPerfMonitorsAMD;
extern PFNGLDELETEPERFMONITORSAMDPROC                       _glDeletePerfMonitorsAMD;
extern PFNGLSELECTPERFMONITORCOUNTERSAMDPROC                _glSelectPerfMonitorCountersAMD;
extern PFNGLBEGINPERFMONITORAMDPROC                         _glBeginPerfMonitorAMD;
extern PFNGLENDPERFMONITORAMDPROC                           _glEndPerfMonitorAMD;
extern PFNGLGETPERFMONITORCOUNTERDATAAMDPROC                _glGetPerfMonitorCounterDataAMD;
extern PFNGLLABELOBJECTEXTPROC                              _glLabelObjectEXT;
extern PFNGLGETOBJECTLABELEXTPROC                           _glGetObjectLabelEXT;
extern PFNGLINSERTEVENTMARKEREXTPROC                        _glInsertEventMarkerEXT;
extern PFNGLPUSHGROUPMARKEREXTPROC                          _glPushGroupMarkerEXT;
extern PFNGLPOPGROUPMARKEREXTPROC                           _glPopGroupMarkerEXT;
extern PFNGLMATRIXLOADFEXTPROC                              _glMatrixLoadfEXT;
extern PFNGLMATRIXLOADDEXTPROC                              _glMatrixLoaddEXT;
extern PFNGLMATRIXMULTFEXTPROC                              _glMatrixMultfEXT;
extern PFNGLMATRIXMULTDEXTPROC                              _glMatrixMultdEXT;
extern PFNGLMATRIXLOADIDENTITYEXTPROC                       _glMatrixLoadIdentityEXT;
extern PFNGLMATRIXROTATEFEXTPROC                            _glMatrixRotatefEXT;
extern PFNGLMATRIXROTATEDEXTPROC                            _glMatrixRotatedEXT;
extern PFNGLMATRIXSCALEFEXTPROC                             _glMatrixScalefEXT;
extern PFNGLMATRIXSCALEDEXTPROC                             _glMatrixScaledEXT;
extern PFNGLMATRIXTRANSLATEFEXTPROC                         _glMatrixTranslatefEXT;
extern PFNGLMATRIXTRANSLATEDEXTPROC                         _glMatrixTranslatedEXT;
extern PFNGLMATRIXFRUSTUMEXTPROC                            _glMatrixFrustumEXT;
extern PFNGLMATRIXORTHOEXTPROC                              _glMatrixOrthoEXT;
extern PFNGLMATRIXPOPEXTPROC                                _glMatrixPopEXT;
extern PFNGLMATRIXPUSHEXTPROC                               _glMatrixPushEXT;
extern PFNGLCLIENTATTRIBDEFAULTEXTPROC                      _glClientAttribDefaultEXT;
extern PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC                  _glPushClientAttribDefaultEXT;
extern PFNGLTEXTUREPARAMETERFEXTPROC                        _glTextureParameterfEXT;
extern PFNGLTEXTUREPARAMETERFVEXTPROC                       _glTextureParameterfvEXT;
extern PFNGLTEXTUREPARAMETERIEXTPROC                        _glTextureParameteriEXT;
extern PFNGLTEXTUREPARAMETERIVEXTPROC                       _glTextureParameterivEXT;
extern PFNGLTEXTUREIMAGE1DEXTPROC                           _glTextureImage1DEXT;
extern PFNGLTEXTUREIMAGE2DEXTPROC                           _glTextureImage2DEXT;
extern PFNGLTEXTURESUBIMAGE1DEXTPROC                        _glTextureSubImage1DEXT;
extern PFNGLTEXTURESUBIMAGE2DEXTPROC                        _glTextureSubImage2DEXT;
extern PFNGLCOPYTEXTUREIMAGE1DEXTPROC                       _glCopyTextureImage1DEXT;
extern PFNGLCOPYTEXTUREIMAGE2DEXTPROC                       _glCopyTextureImage2DEXT;
extern PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC                    _glCopyTextureSubImage1DEXT;
extern PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC                    _glCopyTextureSubImage2DEXT;
extern PFNGLGETTEXTUREIMAGEEXTPROC                          _glGetTextureImageEXT;
extern PFNGLGETTEXTUREPARAMETERFVEXTPROC                    _glGetTextureParameterfvEXT;
extern PFNGLGETTEXTUREPARAMETERIVEXTPROC                    _glGetTextureParameterivEXT;
extern PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC               _glGetTextureLevelParameterfvEXT;
extern PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC               _glGetTextureLevelParameterivEXT;
extern PFNGLTEXTUREIMAGE3DEXTPROC                           _glTextureImage3DEXT;
extern PFNGLTEXTURESUBIMAGE3DEXTPROC                        _glTextureSubImage3DEXT;
extern PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC                    _glCopyTextureSubImage3DEXT;
extern PFNGLBINDMULTITEXTUREEXTPROC                         _glBindMultiTextureEXT;
extern PFNGLMULTITEXCOORDPOINTEREXTPROC                     _glMultiTexCoordPointerEXT;
extern PFNGLMULTITEXENVFEXTPROC                             _glMultiTexEnvfEXT;
extern PFNGLMULTITEXENVFVEXTPROC                            _glMultiTexEnvfvEXT;
extern PFNGLMULTITEXENVIEXTPROC                             _glMultiTexEnviEXT;
extern PFNGLMULTITEXENVIVEXTPROC                            _glMultiTexEnvivEXT;
extern PFNGLMULTITEXGENDEXTPROC                             _glMultiTexGendEXT;
extern PFNGLMULTITEXGENDVEXTPROC                            _glMultiTexGendvEXT;
extern PFNGLMULTITEXGENFEXTPROC                             _glMultiTexGenfEXT;
extern PFNGLMULTITEXGENFVEXTPROC                            _glMultiTexGenfvEXT;
extern PFNGLMULTITEXGENIEXTPROC                             _glMultiTexGeniEXT;
extern PFNGLMULTITEXGENIVEXTPROC                            _glMultiTexGenivEXT;
extern PFNGLGETMULTITEXENVFVEXTPROC                         _glGetMultiTexEnvfvEXT;
extern PFNGLGETMULTITEXENVIVEXTPROC                         _glGetMultiTexEnvivEXT;
extern PFNGLGETMULTITEXGENDVEXTPROC                         _glGetMultiTexGendvEXT;
extern PFNGLGETMULTITEXGENFVEXTPROC                         _glGetMultiTexGenfvEXT;
extern PFNGLGETMULTITEXGENIVEXTPROC                         _glGetMultiTexGenivEXT;
extern PFNGLMULTITEXPARAMETERIEXTPROC                       _glMultiTexParameteriEXT;
extern PFNGLMULTITEXPARAMETERIVEXTPROC                      _glMultiTexParameterivEXT;
extern PFNGLMULTITEXPARAMETERFEXTPROC                       _glMultiTexParameterfEXT;
extern PFNGLMULTITEXPARAMETERFVEXTPROC                      _glMultiTexParameterfvEXT;
extern PFNGLMULTITEXIMAGE1DEXTPROC                          _glMultiTexImage1DEXT;
extern PFNGLMULTITEXIMAGE2DEXTPROC                          _glMultiTexImage2DEXT;
extern PFNGLMULTITEXSUBIMAGE1DEXTPROC                       _glMultiTexSubImage1DEXT;
extern PFNGLMULTITEXSUBIMAGE2DEXTPROC                       _glMultiTexSubImage2DEXT;
extern PFNGLCOPYMULTITEXIMAGE1DEXTPROC                      _glCopyMultiTexImage1DEXT;
extern PFNGLCOPYMULTITEXIMAGE2DEXTPROC                      _glCopyMultiTexImage2DEXT;
extern PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC                   _glCopyMultiTexSubImage1DEXT;
extern PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC                   _glCopyMultiTexSubImage2DEXT;
extern PFNGLGETMULTITEXIMAGEEXTPROC                         _glGetMultiTexImageEXT;
extern PFNGLGETMULTITEXPARAMETERFVEXTPROC                   _glGetMultiTexParameterfvEXT;
extern PFNGLGETMULTITEXPARAMETERIVEXTPROC                   _glGetMultiTexParameterivEXT;
extern PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC              _glGetMultiTexLevelParameterfvEXT;
extern PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC              _glGetMultiTexLevelParameterivEXT;
extern PFNGLMULTITEXIMAGE3DEXTPROC                          _glMultiTexImage3DEXT;
extern PFNGLMULTITEXSUBIMAGE3DEXTPROC                       _glMultiTexSubImage3DEXT;
extern PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC                   _glCopyMultiTexSubImage3DEXT;
extern PFNGLENABLECLIENTSTATEINDEXEDEXTPROC                 _glEnableClientStateIndexedEXT;
extern PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC                _glDisableClientStateIndexedEXT;
extern PFNGLGETFLOATINDEXEDVEXTPROC                         _glGetFloatIndexedvEXT;
extern PFNGLGETDOUBLEINDEXEDVEXTPROC                        _glGetDoubleIndexedvEXT;
extern PFNGLGETPOINTERINDEXEDVEXTPROC                       _glGetPointerIndexedvEXT;
extern PFNGLENABLEINDEXEDEXTPROC                            _glEnableIndexedEXT;
extern PFNGLDISABLEINDEXEDEXTPROC                           _glDisableIndexedEXT;
extern PFNGLISENABLEDINDEXEDEXTPROC                         _glIsEnabledIndexedEXT;
extern PFNGLGETINTEGERINDEXEDVEXTPROC                       _glGetIntegerIndexedvEXT;
extern PFNGLGETBOOLEANINDEXEDVEXTPROC                       _glGetBooleanIndexedvEXT;
extern PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC                 _glCompressedTextureImage3DEXT;
extern PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC                 _glCompressedTextureImage2DEXT;
extern PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC                 _glCompressedTextureImage1DEXT;
extern PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC              _glCompressedTextureSubImage3DEXT;
extern PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC              _glCompressedTextureSubImage2DEXT;
extern PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC              _glCompressedTextureSubImage1DEXT;
extern PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC                _glGetCompressedTextureImageEXT;
extern PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC                _glCompressedMultiTexImage3DEXT;
extern PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC                _glCompressedMultiTexImage2DEXT;
extern PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC                _glCompressedMultiTexImage1DEXT;
extern PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC             _glCompressedMultiTexSubImage3DEXT;
extern PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC             _glCompressedMultiTexSubImage2DEXT;
extern PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC             _glCompressedMultiTexSubImage1DEXT;
extern PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC               _glGetCompressedMultiTexImageEXT;
extern PFNGLMATRIXLOADTRANSPOSEFEXTPROC                     _glMatrixLoadTransposefEXT;
extern PFNGLMATRIXLOADTRANSPOSEDEXTPROC                     _glMatrixLoadTransposedEXT;
extern PFNGLMATRIXMULTTRANSPOSEFEXTPROC                     _glMatrixMultTransposefEXT;
extern PFNGLMATRIXMULTTRANSPOSEDEXTPROC                     _glMatrixMultTransposedEXT;
extern PFNGLNAMEDBUFFERDATAEXTPROC                          _glNamedBufferDataEXT;
extern PFNGLNAMEDBUFFERSUBDATAEXTPROC                       _glNamedBufferSubDataEXT;
extern PFNGLMAPNAMEDBUFFEREXTPROC                           _glMapNamedBufferEXT;
extern PFNGLUNMAPNAMEDBUFFEREXTPROC                         _glUnmapNamedBufferEXT;
extern PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC                _glGetNamedBufferParameterivEXT;
extern PFNGLGETNAMEDBUFFERPOINTERVEXTPROC                   _glGetNamedBufferPointervEXT;
extern PFNGLGETNAMEDBUFFERSUBDATAEXTPROC                    _glGetNamedBufferSubDataEXT;
extern PFNGLPROGRAMUNIFORM1FEXTPROC                         _glProgramUniform1fEXT;
extern PFNGLPROGRAMUNIFORM2FEXTPROC                         _glProgramUniform2fEXT;
extern PFNGLPROGRAMUNIFORM3FEXTPROC                         _glProgramUniform3fEXT;
extern PFNGLPROGRAMUNIFORM4FEXTPROC                         _glProgramUniform4fEXT;
extern PFNGLPROGRAMUNIFORM1IEXTPROC                         _glProgramUniform1iEXT;
extern PFNGLPROGRAMUNIFORM2IEXTPROC                         _glProgramUniform2iEXT;
extern PFNGLPROGRAMUNIFORM3IEXTPROC                         _glProgramUniform3iEXT;
extern PFNGLPROGRAMUNIFORM4IEXTPROC                         _glProgramUniform4iEXT;
extern PFNGLPROGRAMUNIFORM1FVEXTPROC                        _glProgramUniform1fvEXT;
extern PFNGLPROGRAMUNIFORM2FVEXTPROC                        _glProgramUniform2fvEXT;
extern PFNGLPROGRAMUNIFORM3FVEXTPROC                        _glProgramUniform3fvEXT;
extern PFNGLPROGRAMUNIFORM4FVEXTPROC                        _glProgramUniform4fvEXT;
extern PFNGLPROGRAMUNIFORM1IVEXTPROC                        _glProgramUniform1ivEXT;
extern PFNGLPROGRAMUNIFORM2IVEXTPROC                        _glProgramUniform2ivEXT;
extern PFNGLPROGRAMUNIFORM3IVEXTPROC                        _glProgramUniform3ivEXT;
extern PFNGLPROGRAMUNIFORM4IVEXTPROC                        _glProgramUniform4ivEXT;
extern PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC                  _glProgramUniformMatrix2fvEXT;
extern PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC                  _glProgramUniformMatrix3fvEXT;
extern PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC                  _glProgramUniformMatrix4fvEXT;
extern PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC                _glProgramUniformMatrix2x3fvEXT;
extern PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC                _glProgramUniformMatrix3x2fvEXT;
extern PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC                _glProgramUniformMatrix2x4fvEXT;
extern PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC                _glProgramUniformMatrix4x2fvEXT;
extern PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC                _glProgramUniformMatrix3x4fvEXT;
extern PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC                _glProgramUniformMatrix4x3fvEXT;
extern PFNGLTEXTUREBUFFEREXTPROC                            _glTextureBufferEXT;
extern PFNGLMULTITEXBUFFEREXTPROC                           _glMultiTexBufferEXT;
extern PFNGLTEXTUREPARAMETERIIVEXTPROC                      _glTextureParameterIivEXT;
extern PFNGLTEXTUREPARAMETERIUIVEXTPROC                     _glTextureParameterIuivEXT;
extern PFNGLGETTEXTUREPARAMETERIIVEXTPROC                   _glGetTextureParameterIivEXT;
extern PFNGLGETTEXTUREPARAMETERIUIVEXTPROC                  _glGetTextureParameterIuivEXT;
extern PFNGLMULTITEXPARAMETERIIVEXTPROC                     _glMultiTexParameterIivEXT;
extern PFNGLMULTITEXPARAMETERIUIVEXTPROC                    _glMultiTexParameterIuivEXT;
extern PFNGLGETMULTITEXPARAMETERIIVEXTPROC                  _glGetMultiTexParameterIivEXT;
extern PFNGLGETMULTITEXPARAMETERIUIVEXTPROC                 _glGetMultiTexParameterIuivEXT;
extern PFNGLPROGRAMUNIFORM1UIEXTPROC                        _glProgramUniform1uiEXT;
extern PFNGLPROGRAMUNIFORM2UIEXTPROC                        _glProgramUniform2uiEXT;
extern PFNGLPROGRAMUNIFORM3UIEXTPROC                        _glProgramUniform3uiEXT;
extern PFNGLPROGRAMUNIFORM4UIEXTPROC                        _glProgramUniform4uiEXT;
extern PFNGLPROGRAMUNIFORM1UIVEXTPROC                       _glProgramUniform1uivEXT;
extern PFNGLPROGRAMUNIFORM2UIVEXTPROC                       _glProgramUniform2uivEXT;
extern PFNGLPROGRAMUNIFORM3UIVEXTPROC                       _glProgramUniform3uivEXT;
extern PFNGLPROGRAMUNIFORM4UIVEXTPROC                       _glProgramUniform4uivEXT;
extern PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC           _glNamedProgramLocalParameters4fvEXT;
extern PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC            _glNamedProgramLocalParameterI4iEXT;
extern PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC           _glNamedProgramLocalParameterI4ivEXT;
extern PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC          _glNamedProgramLocalParametersI4ivEXT;
extern PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC           _glNamedProgramLocalParameterI4uiEXT;
extern PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC          _glNamedProgramLocalParameterI4uivEXT;
extern PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC         _glNamedProgramLocalParametersI4uivEXT;
extern PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC         _glGetNamedProgramLocalParameterIivEXT;
extern PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC        _glGetNamedProgramLocalParameterIuivEXT;
extern PFNGLENABLECLIENTSTATEIEXTPROC                       _glEnableClientStateiEXT;
extern PFNGLDISABLECLIENTSTATEIEXTPROC                      _glDisableClientStateiEXT;
extern PFNGLGETFLOATI_VEXTPROC                              _glGetFloati_vEXT;
extern PFNGLGETDOUBLEI_VEXTPROC                             _glGetDoublei_vEXT;
extern PFNGLGETPOINTERI_VEXTPROC                            _glGetPointeri_vEXT;
extern PFNGLNAMEDPROGRAMSTRINGEXTPROC                       _glNamedProgramStringEXT;
extern PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC             _glNamedProgramLocalParameter4dEXT;
extern PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC            _glNamedProgramLocalParameter4dvEXT;
extern PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC             _glNamedProgramLocalParameter4fEXT;
extern PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC            _glNamedProgramLocalParameter4fvEXT;
extern PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC          _glGetNamedProgramLocalParameterdvEXT;
extern PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC          _glGetNamedProgramLocalParameterfvEXT;
extern PFNGLGETNAMEDPROGRAMIVEXTPROC                        _glGetNamedProgramivEXT;
extern PFNGLGETNAMEDPROGRAMSTRINGEXTPROC                    _glGetNamedProgramStringEXT;
extern PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC                 _glNamedRenderbufferStorageEXT;
extern PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC          _glGetNamedRenderbufferParameterivEXT;
extern PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC      _glNamedRenderbufferStorageMultisampleEXT;
extern PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC _glNamedRenderbufferStorageMultisampleCoverageEXT;
extern PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC              _glCheckNamedFramebufferStatusEXT;
extern PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC                _glNamedFramebufferTexture1DEXT;
extern PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC                _glNamedFramebufferTexture2DEXT;
extern PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC                _glNamedFramebufferTexture3DEXT;
extern PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC             _glNamedFramebufferRenderbufferEXT;
extern PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC _glGetNamedFramebufferAttachmentParameterivEXT;
extern PFNGLGENERATETEXTUREMIPMAPEXTPROC                    _glGenerateTextureMipmapEXT;
extern PFNGLGENERATEMULTITEXMIPMAPEXTPROC                   _glGenerateMultiTexMipmapEXT;
extern PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC                    _glFramebufferDrawBufferEXT;
extern PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC                   _glFramebufferDrawBuffersEXT;
extern PFNGLFRAMEBUFFERREADBUFFEREXTPROC                    _glFramebufferReadBufferEXT;
extern PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC                _glGetFramebufferParameterivEXT;
extern PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC                   _glNamedCopyBufferSubDataEXT;
extern PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC                  _glNamedFramebufferTextureEXT;
extern PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC             _glNamedFramebufferTextureLayerEXT;
extern PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC              _glNamedFramebufferTextureFaceEXT;
extern PFNGLTEXTURERENDERBUFFEREXTPROC                      _glTextureRenderbufferEXT;
extern PFNGLMULTITEXRENDERBUFFEREXTPROC                     _glMultiTexRenderbufferEXT;
extern PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC                  _glVertexArrayVertexOffsetEXT;
extern PFNGLVERTEXARRAYCOLOROFFSETEXTPROC                   _glVertexArrayColorOffsetEXT;
extern PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC                _glVertexArrayEdgeFlagOffsetEXT;
extern PFNGLVERTEXARRAYINDEXOFFSETEXTPROC                   _glVertexArrayIndexOffsetEXT;
extern PFNGLVERTEXARRAYNORMALOFFSETEXTPROC                  _glVertexArrayNormalOffsetEXT;
extern PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC                _glVertexArrayTexCoordOffsetEXT;
extern PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC           _glVertexArrayMultiTexCoordOffsetEXT;
extern PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC                _glVertexArrayFogCoordOffsetEXT;
extern PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC          _glVertexArraySecondaryColorOffsetEXT;
extern PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC            _glVertexArrayVertexAttribOffsetEXT;
extern PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC           _glVertexArrayVertexAttribIOffsetEXT;
extern PFNGLENABLEVERTEXARRAYEXTPROC                        _glEnableVertexArrayEXT;
extern PFNGLDISABLEVERTEXARRAYEXTPROC                       _glDisableVertexArrayEXT;
extern PFNGLENABLEVERTEXARRAYATTRIBEXTPROC                  _glEnableVertexArrayAttribEXT;
extern PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC                 _glDisableVertexArrayAttribEXT;
extern PFNGLGETVERTEXARRAYINTEGERVEXTPROC                   _glGetVertexArrayIntegervEXT;
extern PFNGLGETVERTEXARRAYPOINTERVEXTPROC                   _glGetVertexArrayPointervEXT;
extern PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC                 _glGetVertexArrayIntegeri_vEXT;
extern PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC                 _glGetVertexArrayPointeri_vEXT;
extern PFNGLMAPNAMEDBUFFERRANGEEXTPROC                      _glMapNamedBufferRangeEXT;
extern PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC              _glFlushMappedNamedBufferRangeEXT;
extern PFNGLNAMEDBUFFERSTORAGEEXTPROC                       _glNamedBufferStorageEXT;
extern PFNGLCLEARNAMEDBUFFERDATAEXTPROC                     _glClearNamedBufferDataEXT;
extern PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC                  _glClearNamedBufferSubDataEXT;
extern PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC               _glNamedFramebufferParameteriEXT;
extern PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC           _glGetNamedFramebufferParameterivEXT;
extern PFNGLPROGRAMUNIFORM1DEXTPROC                         _glProgramUniform1dEXT;
extern PFNGLPROGRAMUNIFORM2DEXTPROC                         _glProgramUniform2dEXT;
extern PFNGLPROGRAMUNIFORM3DEXTPROC                         _glProgramUniform3dEXT;
extern PFNGLPROGRAMUNIFORM4DEXTPROC                         _glProgramUniform4dEXT;
extern PFNGLPROGRAMUNIFORM1DVEXTPROC                        _glProgramUniform1dvEXT;
extern PFNGLPROGRAMUNIFORM2DVEXTPROC                        _glProgramUniform2dvEXT;
extern PFNGLPROGRAMUNIFORM3DVEXTPROC                        _glProgramUniform3dvEXT;
extern PFNGLPROGRAMUNIFORM4DVEXTPROC                        _glProgramUniform4dvEXT;
extern PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC                  _glProgramUniformMatrix2dvEXT;
extern PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC                  _glProgramUniformMatrix3dvEXT;
extern PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC                  _glProgramUniformMatrix4dvEXT;
extern PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC                _glProgramUniformMatrix2x3dvEXT;
extern PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC                _glProgramUniformMatrix2x4dvEXT;
extern PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC                _glProgramUniformMatrix3x2dvEXT;
extern PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC                _glProgramUniformMatrix3x4dvEXT;
extern PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC                _glProgramUniformMatrix4x2dvEXT;
extern PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC                _glProgramUniformMatrix4x3dvEXT;
extern PFNGLTEXTUREBUFFERRANGEEXTPROC                       _glTextureBufferRangeEXT;
extern PFNGLTEXTURESTORAGE1DEXTPROC                         _glTextureStorage1DEXT;
extern PFNGLTEXTURESTORAGE2DEXTPROC                         _glTextureStorage2DEXT;
extern PFNGLTEXTURESTORAGE3DEXTPROC                         _glTextureStorage3DEXT;
extern PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC              _glTextureStorage2DMultisampleEXT;
extern PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC              _glTextureStorage3DMultisampleEXT;
extern PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC              _glVertexArrayBindVertexBufferEXT;
extern PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC            _glVertexArrayVertexAttribFormatEXT;
extern PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC           _glVertexArrayVertexAttribIFormatEXT;
extern PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC           _glVertexArrayVertexAttribLFormatEXT;
extern PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC           _glVertexArrayVertexAttribBindingEXT;
extern PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC          _glVertexArrayVertexBindingDivisorEXT;
extern PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC           _glVertexArrayVertexAttribLOffsetEXT;
extern PFNGLTEXTUREPAGECOMMITMENTEXTPROC                    _glTexturePageCommitmentEXT;
extern PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC           _glVertexArrayVertexAttribDivisorEXT;
extern PFNGLDRAWARRAYSINSTANCEDEXTPROC                      _glDrawArraysInstancedEXT;
extern PFNGLDRAWELEMENTSINSTANCEDEXTPROC                    _glDrawElementsInstancedEXT;
extern PFNGLPOLYGONOFFSETCLAMPEXTPROC                       _glPolygonOffsetClampEXT;
extern PFNGLRASTERSAMPLESEXTPROC                            _glRasterSamplesEXT;
extern PFNGLUSESHADERPROGRAMEXTPROC                         _glUseShaderProgramEXT;
extern PFNGLACTIVEPROGRAMEXTPROC                            _glActiveProgramEXT;
extern PFNGLCREATESHADERPROGRAMEXTPROC                      _glCreateShaderProgramEXT;
extern PFNGLWINDOWRECTANGLESEXTPROC                         _glWindowRectanglesEXT;
extern PFNGLAPPLYFRAMEBUFFERATTACHMENTCMAAINTELPROC         _glApplyFramebufferAttachmentCMAAINTEL;
extern PFNGLBEGINPERFQUERYINTELPROC                         _glBeginPerfQueryINTEL;
extern PFNGLCREATEPERFQUERYINTELPROC                        _glCreatePerfQueryINTEL;
extern PFNGLDELETEPERFQUERYINTELPROC                        _glDeletePerfQueryINTEL;
extern PFNGLENDPERFQUERYINTELPROC                           _glEndPerfQueryINTEL;
extern PFNGLGETFIRSTPERFQUERYIDINTELPROC                    _glGetFirstPerfQueryIdINTEL;
extern PFNGLGETNEXTPERFQUERYIDINTELPROC                     _glGetNextPerfQueryIdINTEL;
extern PFNGLGETPERFCOUNTERINFOINTELPROC                     _glGetPerfCounterInfoINTEL;
extern PFNGLGETPERFQUERYDATAINTELPROC                       _glGetPerfQueryDataINTEL;
extern PFNGLGETPERFQUERYIDBYNAMEINTELPROC                   _glGetPerfQueryIdByNameINTEL;
extern PFNGLGETPERFQUERYINFOINTELPROC                       _glGetPerfQueryInfoINTEL;
extern PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC           _glMultiDrawArraysIndirectBindlessNV;
extern PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC         _glMultiDrawElementsIndirectBindlessNV;
extern PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSCOUNTNVPROC      _glMultiDrawArraysIndirectBindlessCountNV;
extern PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSCOUNTNVPROC    _glMultiDrawElementsIndirectBindlessCountNV;
extern PFNGLGETTEXTUREHANDLENVPROC                          _glGetTextureHandleNV;
extern PFNGLGETTEXTURESAMPLERHANDLENVPROC                   _glGetTextureSamplerHandleNV;
extern PFNGLMAKETEXTUREHANDLERESIDENTNVPROC                 _glMakeTextureHandleResidentNV;
extern PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC              _glMakeTextureHandleNonResidentNV;
extern PFNGLGETIMAGEHANDLENVPROC                            _glGetImageHandleNV;
extern PFNGLMAKEIMAGEHANDLERESIDENTNVPROC                   _glMakeImageHandleResidentNV;
extern PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC                _glMakeImageHandleNonResidentNV;
extern PFNGLUNIFORMHANDLEUI64NVPROC                         _glUniformHandleui64NV;
extern PFNGLUNIFORMHANDLEUI64VNVPROC                        _glUniformHandleui64vNV;
extern PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC                  _glProgramUniformHandleui64NV;
extern PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC                 _glProgramUniformHandleui64vNV;
extern PFNGLISTEXTUREHANDLERESIDENTNVPROC                   _glIsTextureHandleResidentNV;
extern PFNGLISIMAGEHANDLERESIDENTNVPROC                     _glIsImageHandleResidentNV;
extern PFNGLBLENDPARAMETERINVPROC                           _glBlendParameteriNV;
extern PFNGLBLENDBARRIERNVPROC                              _glBlendBarrierNV;
extern PFNGLVIEWPORTPOSITIONWSCALENVPROC                    _glViewportPositionWScaleNV;
extern PFNGLCREATESTATESNVPROC                              _glCreateStatesNV;
extern PFNGLDELETESTATESNVPROC                              _glDeleteStatesNV;
extern PFNGLISSTATENVPROC                                   _glIsStateNV;
extern PFNGLSTATECAPTURENVPROC                              _glStateCaptureNV;
extern PFNGLGETCOMMANDHEADERNVPROC                          _glGetCommandHeaderNV;
extern PFNGLGETSTAGEINDEXNVPROC                             _glGetStageIndexNV;
extern PFNGLDRAWCOMMANDSNVPROC                              _glDrawCommandsNV;
extern PFNGLDRAWCOMMANDSADDRESSNVPROC                       _glDrawCommandsAddressNV;
extern PFNGLDRAWCOMMANDSSTATESNVPROC                        _glDrawCommandsStatesNV;
extern PFNGLDRAWCOMMANDSSTATESADDRESSNVPROC                 _glDrawCommandsStatesAddressNV;
extern PFNGLCREATECOMMANDLISTSNVPROC                        _glCreateCommandListsNV;
extern PFNGLDELETECOMMANDLISTSNVPROC                        _glDeleteCommandListsNV;
extern PFNGLISCOMMANDLISTNVPROC                             _glIsCommandListNV;
extern PFNGLLISTDRAWCOMMANDSSTATESCLIENTNVPROC              _glListDrawCommandsStatesClientNV;
extern PFNGLCOMMANDLISTSEGMENTSNVPROC                       _glCommandListSegmentsNV;
extern PFNGLCOMPILECOMMANDLISTNVPROC                        _glCompileCommandListNV;
extern PFNGLCALLCOMMANDLISTNVPROC                           _glCallCommandListNV;
extern PFNGLBEGINCONDITIONALRENDERNVPROC                    _glBeginConditionalRenderNV;
extern PFNGLENDCONDITIONALRENDERNVPROC                      _glEndConditionalRenderNV;
extern PFNGLSUBPIXELPRECISIONBIASNVPROC                     _glSubpixelPrecisionBiasNV;
extern PFNGLCONSERVATIVERASTERPARAMETERFNVPROC              _glConservativeRasterParameterfNV;
extern PFNGLCONSERVATIVERASTERPARAMETERINVPROC              _glConservativeRasterParameteriNV;
extern PFNGLDRAWVKIMAGENVPROC                               _glDrawVkImageNV;
extern PFNGLGETVKPROCADDRNVPROC                             _glGetVkProcAddrNV;
extern PFNGLWAITVKSEMAPHORENVPROC                           _glWaitVkSemaphoreNV;
extern PFNGLSIGNALVKSEMAPHORENVPROC                         _glSignalVkSemaphoreNV;
extern PFNGLSIGNALVKFENCENVPROC                             _glSignalVkFenceNV;
extern PFNGLFRAGMENTCOVERAGECOLORNVPROC                     _glFragmentCoverageColorNV;
extern PFNGLCOVERAGEMODULATIONTABLENVPROC                   _glCoverageModulationTableNV;
extern PFNGLGETCOVERAGEMODULATIONTABLENVPROC                _glGetCoverageModulationTableNV;
extern PFNGLCOVERAGEMODULATIONNVPROC                        _glCoverageModulationNV;
extern PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC    _glRenderbufferStorageMultisampleCoverageNV;
extern PFNGLUNIFORM1I64NVPROC                               _glUniform1i64NV;
extern PFNGLUNIFORM2I64NVPROC                               _glUniform2i64NV;
extern PFNGLUNIFORM3I64NVPROC                               _glUniform3i64NV;
extern PFNGLUNIFORM4I64NVPROC                               _glUniform4i64NV;
extern PFNGLUNIFORM1I64VNVPROC                              _glUniform1i64vNV;
extern PFNGLUNIFORM2I64VNVPROC                              _glUniform2i64vNV;
extern PFNGLUNIFORM3I64VNVPROC                              _glUniform3i64vNV;
extern PFNGLUNIFORM4I64VNVPROC                              _glUniform4i64vNV;
extern PFNGLUNIFORM1UI64NVPROC                              _glUniform1ui64NV;
extern PFNGLUNIFORM2UI64NVPROC                              _glUniform2ui64NV;
extern PFNGLUNIFORM3UI64NVPROC                              _glUniform3ui64NV;
extern PFNGLUNIFORM4UI64NVPROC                              _glUniform4ui64NV;
extern PFNGLUNIFORM1UI64VNVPROC                             _glUniform1ui64vNV;
extern PFNGLUNIFORM2UI64VNVPROC                             _glUniform2ui64vNV;
extern PFNGLUNIFORM3UI64VNVPROC                             _glUniform3ui64vNV;
extern PFNGLUNIFORM4UI64VNVPROC                             _glUniform4ui64vNV;
extern PFNGLGETUNIFORMI64VNVPROC                            _glGetUniformi64vNV;
extern PFNGLPROGRAMUNIFORM1I64NVPROC                        _glProgramUniform1i64NV;
extern PFNGLPROGRAMUNIFORM2I64NVPROC                        _glProgramUniform2i64NV;
extern PFNGLPROGRAMUNIFORM3I64NVPROC                        _glProgramUniform3i64NV;
extern PFNGLPROGRAMUNIFORM4I64NVPROC                        _glProgramUniform4i64NV;
extern PFNGLPROGRAMUNIFORM1I64VNVPROC                       _glProgramUniform1i64vNV;
extern PFNGLPROGRAMUNIFORM2I64VNVPROC                       _glProgramUniform2i64vNV;
extern PFNGLPROGRAMUNIFORM3I64VNVPROC                       _glProgramUniform3i64vNV;
extern PFNGLPROGRAMUNIFORM4I64VNVPROC                       _glProgramUniform4i64vNV;
extern PFNGLPROGRAMUNIFORM1UI64NVPROC                       _glProgramUniform1ui64NV;
extern PFNGLPROGRAMUNIFORM2UI64NVPROC                       _glProgramUniform2ui64NV;
extern PFNGLPROGRAMUNIFORM3UI64NVPROC                       _glProgramUniform3ui64NV;
extern PFNGLPROGRAMUNIFORM4UI64NVPROC                       _glProgramUniform4ui64NV;
extern PFNGLPROGRAMUNIFORM1UI64VNVPROC                      _glProgramUniform1ui64vNV;
extern PFNGLPROGRAMUNIFORM2UI64VNVPROC                      _glProgramUniform2ui64vNV;
extern PFNGLPROGRAMUNIFORM3UI64VNVPROC                      _glProgramUniform3ui64vNV;
extern PFNGLPROGRAMUNIFORM4UI64VNVPROC                      _glProgramUniform4ui64vNV;
extern PFNGLGETINTERNALFORMATSAMPLEIVNVPROC                 _glGetInternalformatSampleivNV;
extern PFNGLGENPATHSNVPROC                                  _glGenPathsNV;
extern PFNGLDELETEPATHSNVPROC                               _glDeletePathsNV;
extern PFNGLISPATHNVPROC                                    _glIsPathNV;
extern PFNGLPATHCOMMANDSNVPROC                              _glPathCommandsNV;
extern PFNGLPATHCOORDSNVPROC                                _glPathCoordsNV;
extern PFNGLPATHSUBCOMMANDSNVPROC                           _glPathSubCommandsNV;
extern PFNGLPATHSUBCOORDSNVPROC                             _glPathSubCoordsNV;
extern PFNGLPATHSTRINGNVPROC                                _glPathStringNV;
extern PFNGLPATHGLYPHSNVPROC                                _glPathGlyphsNV;
extern PFNGLPATHGLYPHRANGENVPROC                            _glPathGlyphRangeNV;
extern PFNGLWEIGHTPATHSNVPROC                               _glWeightPathsNV;
extern PFNGLCOPYPATHNVPROC                                  _glCopyPathNV;
extern PFNGLINTERPOLATEPATHSNVPROC                          _glInterpolatePathsNV;
extern PFNGLTRANSFORMPATHNVPROC                             _glTransformPathNV;
extern PFNGLPATHPARAMETERIVNVPROC                           _glPathParameterivNV;
extern PFNGLPATHPARAMETERINVPROC                            _glPathParameteriNV;
extern PFNGLPATHPARAMETERFVNVPROC                           _glPathParameterfvNV;
extern PFNGLPATHPARAMETERFNVPROC                            _glPathParameterfNV;
extern PFNGLPATHDASHARRAYNVPROC                             _glPathDashArrayNV;
extern PFNGLPATHSTENCILFUNCNVPROC                           _glPathStencilFuncNV;
extern PFNGLPATHSTENCILDEPTHOFFSETNVPROC                    _glPathStencilDepthOffsetNV;
extern PFNGLSTENCILFILLPATHNVPROC                           _glStencilFillPathNV;
extern PFNGLSTENCILSTROKEPATHNVPROC                         _glStencilStrokePathNV;
extern PFNGLSTENCILFILLPATHINSTANCEDNVPROC                  _glStencilFillPathInstancedNV;
extern PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC                _glStencilStrokePathInstancedNV;
extern PFNGLPATHCOVERDEPTHFUNCNVPROC                        _glPathCoverDepthFuncNV;
extern PFNGLCOVERFILLPATHNVPROC                             _glCoverFillPathNV;
extern PFNGLCOVERSTROKEPATHNVPROC                           _glCoverStrokePathNV;
extern PFNGLCOVERFILLPATHINSTANCEDNVPROC                    _glCoverFillPathInstancedNV;
extern PFNGLCOVERSTROKEPATHINSTANCEDNVPROC                  _glCoverStrokePathInstancedNV;
extern PFNGLGETPATHPARAMETERIVNVPROC                        _glGetPathParameterivNV;
extern PFNGLGETPATHPARAMETERFVNVPROC                        _glGetPathParameterfvNV;
extern PFNGLGETPATHCOMMANDSNVPROC                           _glGetPathCommandsNV;
extern PFNGLGETPATHCOORDSNVPROC                             _glGetPathCoordsNV;
extern PFNGLGETPATHDASHARRAYNVPROC                          _glGetPathDashArrayNV;
extern PFNGLGETPATHMETRICSNVPROC                            _glGetPathMetricsNV;
extern PFNGLGETPATHMETRICRANGENVPROC                        _glGetPathMetricRangeNV;
extern PFNGLGETPATHSPACINGNVPROC                            _glGetPathSpacingNV;
extern PFNGLISPOINTINFILLPATHNVPROC                         _glIsPointInFillPathNV;
extern PFNGLISPOINTINSTROKEPATHNVPROC                       _glIsPointInStrokePathNV;
extern PFNGLGETPATHLENGTHNVPROC                             _glGetPathLengthNV;
extern PFNGLPOINTALONGPATHNVPROC                            _glPointAlongPathNV;
extern PFNGLMATRIXLOAD3X2FNVPROC                            _glMatrixLoad3x2fNV;
extern PFNGLMATRIXLOAD3X3FNVPROC                            _glMatrixLoad3x3fNV;
extern PFNGLMATRIXLOADTRANSPOSE3X3FNVPROC                   _glMatrixLoadTranspose3x3fNV;
extern PFNGLMATRIXMULT3X2FNVPROC                            _glMatrixMult3x2fNV;
extern PFNGLMATRIXMULT3X3FNVPROC                            _glMatrixMult3x3fNV;
extern PFNGLMATRIXMULTTRANSPOSE3X3FNVPROC                   _glMatrixMultTranspose3x3fNV;
extern PFNGLSTENCILTHENCOVERFILLPATHNVPROC                  _glStencilThenCoverFillPathNV;
extern PFNGLSTENCILTHENCOVERSTROKEPATHNVPROC                _glStencilThenCoverStrokePathNV;
extern PFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC         _glStencilThenCoverFillPathInstancedNV;
extern PFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC       _glStencilThenCoverStrokePathInstancedNV;
extern PFNGLPATHGLYPHINDEXRANGENVPROC                       _glPathGlyphIndexRangeNV;
extern PFNGLPATHGLYPHINDEXARRAYNVPROC                       _glPathGlyphIndexArrayNV;
extern PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC                 _glPathMemoryGlyphIndexArrayNV;
extern PFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC               _glProgramPathFragmentInputGenNV;
extern PFNGLGETPROGRAMRESOURCEFVNVPROC                      _glGetProgramResourcefvNV;
extern PFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROC              _glFramebufferSampleLocationsfvNV;
extern PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROC         _glNamedFramebufferSampleLocationsfvNV;
extern PFNGLRESOLVEDEPTHVALUESNVPROC                        _glResolveDepthValuesNV;
extern PFNGLMAKEBUFFERRESIDENTNVPROC                        _glMakeBufferResidentNV;
extern PFNGLMAKEBUFFERNONRESIDENTNVPROC                     _glMakeBufferNonResidentNV;
extern PFNGLISBUFFERRESIDENTNVPROC                          _glIsBufferResidentNV;
extern PFNGLMAKENAMEDBUFFERRESIDENTNVPROC                   _glMakeNamedBufferResidentNV;
extern PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC                _glMakeNamedBufferNonResidentNV;
extern PFNGLISNAMEDBUFFERRESIDENTNVPROC                     _glIsNamedBufferResidentNV;
extern PFNGLGETBUFFERPARAMETERUI64VNVPROC                   _glGetBufferParameterui64vNV;
extern PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC              _glGetNamedBufferParameterui64vNV;
extern PFNGLGETINTEGERUI64VNVPROC                           _glGetIntegerui64vNV;
extern PFNGLUNIFORMUI64NVPROC                               _glUniformui64NV;
extern PFNGLUNIFORMUI64VNVPROC                              _glUniformui64vNV;
extern PFNGLGETUNIFORMUI64VNVPROC                           _glGetUniformui64vNV;
extern PFNGLPROGRAMUNIFORMUI64NVPROC                        _glProgramUniformui64NV;
extern PFNGLPROGRAMUNIFORMUI64VNVPROC                       _glProgramUniformui64vNV;
extern PFNGLTEXTUREBARRIERNVPROC                            _glTextureBarrierNV;
extern PFNGLVERTEXATTRIBL1I64NVPROC                         _glVertexAttribL1i64NV;
extern PFNGLVERTEXATTRIBL2I64NVPROC                         _glVertexAttribL2i64NV;
extern PFNGLVERTEXATTRIBL3I64NVPROC                         _glVertexAttribL3i64NV;
extern PFNGLVERTEXATTRIBL4I64NVPROC                         _glVertexAttribL4i64NV;
extern PFNGLVERTEXATTRIBL1I64VNVPROC                        _glVertexAttribL1i64vNV;
extern PFNGLVERTEXATTRIBL2I64VNVPROC                        _glVertexAttribL2i64vNV;
extern PFNGLVERTEXATTRIBL3I64VNVPROC                        _glVertexAttribL3i64vNV;
extern PFNGLVERTEXATTRIBL4I64VNVPROC                        _glVertexAttribL4i64vNV;
extern PFNGLVERTEXATTRIBL1UI64NVPROC                        _glVertexAttribL1ui64NV;
extern PFNGLVERTEXATTRIBL2UI64NVPROC                        _glVertexAttribL2ui64NV;
extern PFNGLVERTEXATTRIBL3UI64NVPROC                        _glVertexAttribL3ui64NV;
extern PFNGLVERTEXATTRIBL4UI64NVPROC                        _glVertexAttribL4ui64NV;
extern PFNGLVERTEXATTRIBL1UI64VNVPROC                       _glVertexAttribL1ui64vNV;
extern PFNGLVERTEXATTRIBL2UI64VNVPROC                       _glVertexAttribL2ui64vNV;
extern PFNGLVERTEXATTRIBL3UI64VNVPROC                       _glVertexAttribL3ui64vNV;
extern PFNGLVERTEXATTRIBL4UI64VNVPROC                       _glVertexAttribL4ui64vNV;
extern PFNGLGETVERTEXATTRIBLI64VNVPROC                      _glGetVertexAttribLi64vNV;
extern PFNGLGETVERTEXATTRIBLUI64VNVPROC                     _glGetVertexAttribLui64vNV;
extern PFNGLVERTEXATTRIBLFORMATNVPROC                       _glVertexAttribLFormatNV;
extern PFNGLBUFFERADDRESSRANGENVPROC                        _glBufferAddressRangeNV;
extern PFNGLVERTEXFORMATNVPROC                              _glVertexFormatNV;
extern PFNGLNORMALFORMATNVPROC                              _glNormalFormatNV;
extern PFNGLCOLORFORMATNVPROC                               _glColorFormatNV;
extern PFNGLINDEXFORMATNVPROC                               _glIndexFormatNV;
extern PFNGLTEXCOORDFORMATNVPROC                            _glTexCoordFormatNV;
extern PFNGLEDGEFLAGFORMATNVPROC                            _glEdgeFlagFormatNV;
extern PFNGLSECONDARYCOLORFORMATNVPROC                      _glSecondaryColorFormatNV;
extern PFNGLFOGCOORDFORMATNVPROC                            _glFogCoordFormatNV;
extern PFNGLVERTEXATTRIBFORMATNVPROC                        _glVertexAttribFormatNV;
extern PFNGLVERTEXATTRIBIFORMATNVPROC                       _glVertexAttribIFormatNV;
extern PFNGLGETINTEGERUI64I_VNVPROC                         _glGetIntegerui64i_vNV;
extern PFNGLVIEWPORTSWIZZLENVPROC                           _glViewportSwizzleNV;
extern PFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC              _glFramebufferTextureMultiviewOVR;
// }}} End OpenGL function pointer declarations

#ifdef __cplusplus
};
#endif

#if defined(PROTO3D_GLCOREARB_IMPLEMENTATION) && !defined(PROTO3D_GLCOREARB_IMPLEMENTATION_DONE)
# define PROTO2D_GLCOREARB_IMPLEMENTATION_DONE

// Macro for logging that takes printf-style arguments.
// This version requires <cstdio>, but it can be defined differently before
// including proto3d headers.
#ifndef PROTO3D_TRACE
#include <cstdio>  // NOLINT
#define PROTO3D_TRACE(...)      \
  fprintf(stderr, __VA_ARGS__); \
  fflush(stderr)
#endif

#ifndef PROTO3D_CHECK_GL_ERROR
# ifdef NDEBUG
#  define PROTO3D_CHECK_GL_ERROR(gl_proc_name_str)
# else
#  define PROTO3D_CHECK_GL_ERROR(gl_proc_name_str)                \
  {                                                               \
    const char *_last_error_str = Proto3dGlLastErrorString();     \
    if (_last_error_str != nullptr) {                             \
      PROTO3D_TRACE("OpenGL error:%s:%d: %s is set after %s.\n",  \
                    __FILE__,                                     \
                    __LINE__,                                     \
                    _last_error_str,                              \
                    (gl_proc_name_str));                          \
    }                                                             \
  }
# endif
#endif

#ifdef __cplusplus
extern "C" {
#endif

// OpenGL function pointers {{{
PFNGLCULLFACEPROC                                    _glCullFace;
PFNGLFRONTFACEPROC                                   _glFrontFace;
PFNGLHINTPROC                                        _glHint;
PFNGLLINEWIDTHPROC                                   _glLineWidth;
PFNGLPOINTSIZEPROC                                   _glPointSize;
PFNGLPOLYGONMODEPROC                                 _glPolygonMode;
PFNGLSCISSORPROC                                     _glScissor;
PFNGLTEXPARAMETERFPROC                               _glTexParameterf;
PFNGLTEXPARAMETERFVPROC                              _glTexParameterfv;
PFNGLTEXPARAMETERIPROC                               _glTexParameteri;
PFNGLTEXPARAMETERIVPROC                              _glTexParameteriv;
PFNGLTEXIMAGE1DPROC                                  _glTexImage1D;
PFNGLTEXIMAGE2DPROC                                  _glTexImage2D;
PFNGLDRAWBUFFERPROC                                  _glDrawBuffer;
PFNGLCLEARPROC                                       _glClear;
PFNGLCLEARCOLORPROC                                  _glClearColor;
PFNGLCLEARSTENCILPROC                                _glClearStencil;
PFNGLCLEARDEPTHPROC                                  _glClearDepth;
PFNGLSTENCILMASKPROC                                 _glStencilMask;
PFNGLCOLORMASKPROC                                   _glColorMask;
PFNGLDEPTHMASKPROC                                   _glDepthMask;
PFNGLDISABLEPROC                                     _glDisable;
PFNGLENABLEPROC                                      _glEnable;
PFNGLFINISHPROC                                      _glFinish;
PFNGLFLUSHPROC                                       _glFlush;
PFNGLBLENDFUNCPROC                                   _glBlendFunc;
PFNGLLOGICOPPROC                                     _glLogicOp;
PFNGLSTENCILFUNCPROC                                 _glStencilFunc;
PFNGLSTENCILOPPROC                                   _glStencilOp;
PFNGLDEPTHFUNCPROC                                   _glDepthFunc;
PFNGLPIXELSTOREFPROC                                 _glPixelStoref;
PFNGLPIXELSTOREIPROC                                 _glPixelStorei;
PFNGLREADBUFFERPROC                                  _glReadBuffer;
PFNGLREADPIXELSPROC                                  _glReadPixels;
PFNGLGETBOOLEANVPROC                                 _glGetBooleanv;
PFNGLGETDOUBLEVPROC                                  _glGetDoublev;
PFNGLGETERRORPROC                                    _glGetError;
PFNGLGETFLOATVPROC                                   _glGetFloatv;
PFNGLGETINTEGERVPROC                                 _glGetIntegerv;
PFNGLGETSTRINGPROC                                   _glGetString;
PFNGLGETTEXIMAGEPROC                                 _glGetTexImage;
PFNGLGETTEXPARAMETERFVPROC                           _glGetTexParameterfv;
PFNGLGETTEXPARAMETERIVPROC                           _glGetTexParameteriv;
PFNGLGETTEXLEVELPARAMETERFVPROC                      _glGetTexLevelParameterfv;
PFNGLGETTEXLEVELPARAMETERIVPROC                      _glGetTexLevelParameteriv;
PFNGLISENABLEDPROC                                   _glIsEnabled;
PFNGLDEPTHRANGEPROC                                  _glDepthRange;
PFNGLVIEWPORTPROC                                    _glViewport;
PFNGLDRAWARRAYSPROC                                  _glDrawArrays;
PFNGLDRAWELEMENTSPROC                                _glDrawElements;
PFNGLGETPOINTERVPROC                                 _glGetPointerv;
PFNGLPOLYGONOFFSETPROC                               _glPolygonOffset;
PFNGLCOPYTEXIMAGE1DPROC                              _glCopyTexImage1D;
PFNGLCOPYTEXIMAGE2DPROC                              _glCopyTexImage2D;
PFNGLCOPYTEXSUBIMAGE1DPROC                           _glCopyTexSubImage1D;
PFNGLCOPYTEXSUBIMAGE2DPROC                           _glCopyTexSubImage2D;
PFNGLTEXSUBIMAGE1DPROC                               _glTexSubImage1D;
PFNGLTEXSUBIMAGE2DPROC                               _glTexSubImage2D;
PFNGLBINDTEXTUREPROC                                 _glBindTexture;
PFNGLDELETETEXTURESPROC                              _glDeleteTextures;
PFNGLGENTEXTURESPROC                                 _glGenTextures;
PFNGLISTEXTUREPROC                                   _glIsTexture;
PFNGLDRAWRANGEELEMENTSPROC                           _glDrawRangeElements;
PFNGLTEXIMAGE3DPROC                                  _glTexImage3D;
PFNGLTEXSUBIMAGE3DPROC                               _glTexSubImage3D;
PFNGLCOPYTEXSUBIMAGE3DPROC                           _glCopyTexSubImage3D;
PFNGLACTIVETEXTUREPROC                               _glActiveTexture;
PFNGLSAMPLECOVERAGEPROC                              _glSampleCoverage;
PFNGLCOMPRESSEDTEXIMAGE3DPROC                        _glCompressedTexImage3D;
PFNGLCOMPRESSEDTEXIMAGE2DPROC                        _glCompressedTexImage2D;
PFNGLCOMPRESSEDTEXIMAGE1DPROC                        _glCompressedTexImage1D;
PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC                     _glCompressedTexSubImage3D;
PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC                     _glCompressedTexSubImage2D;
PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC                     _glCompressedTexSubImage1D;
PFNGLGETCOMPRESSEDTEXIMAGEPROC                       _glGetCompressedTexImage;
PFNGLBLENDFUNCSEPARATEPROC                           _glBlendFuncSeparate;
PFNGLMULTIDRAWARRAYSPROC                             _glMultiDrawArrays;
PFNGLMULTIDRAWELEMENTSPROC                           _glMultiDrawElements;
PFNGLPOINTPARAMETERFPROC                             _glPointParameterf;
PFNGLPOINTPARAMETERFVPROC                            _glPointParameterfv;
PFNGLPOINTPARAMETERIPROC                             _glPointParameteri;
PFNGLPOINTPARAMETERIVPROC                            _glPointParameteriv;
PFNGLBLENDCOLORPROC                                  _glBlendColor;
PFNGLBLENDEQUATIONPROC                               _glBlendEquation;
PFNGLGENQUERIESPROC                                  _glGenQueries;
PFNGLDELETEQUERIESPROC                               _glDeleteQueries;
PFNGLISQUERYPROC                                     _glIsQuery;
PFNGLBEGINQUERYPROC                                  _glBeginQuery;
PFNGLENDQUERYPROC                                    _glEndQuery;
PFNGLGETQUERYIVPROC                                  _glGetQueryiv;
PFNGLGETQUERYOBJECTIVPROC                            _glGetQueryObjectiv;
PFNGLGETQUERYOBJECTUIVPROC                           _glGetQueryObjectuiv;
PFNGLBINDBUFFERPROC                                  _glBindBuffer;
PFNGLDELETEBUFFERSPROC                               _glDeleteBuffers;
PFNGLGENBUFFERSPROC                                  _glGenBuffers;
PFNGLISBUFFERPROC                                    _glIsBuffer;
PFNGLBUFFERDATAPROC                                  _glBufferData;
PFNGLBUFFERSUBDATAPROC                               _glBufferSubData;
PFNGLGETBUFFERSUBDATAPROC                            _glGetBufferSubData;
PFNGLMAPBUFFERPROC                                   _glMapBuffer;
PFNGLUNMAPBUFFERPROC                                 _glUnmapBuffer;
PFNGLGETBUFFERPARAMETERIVPROC                        _glGetBufferParameteriv;
PFNGLGETBUFFERPOINTERVPROC                           _glGetBufferPointerv;
PFNGLBLENDEQUATIONSEPARATEPROC                       _glBlendEquationSeparate;
PFNGLDRAWBUFFERSPROC                                 _glDrawBuffers;
PFNGLSTENCILOPSEPARATEPROC                           _glStencilOpSeparate;
PFNGLSTENCILFUNCSEPARATEPROC                         _glStencilFuncSeparate;
PFNGLSTENCILMASKSEPARATEPROC                         _glStencilMaskSeparate;
PFNGLATTACHSHADERPROC                                _glAttachShader;
PFNGLBINDATTRIBLOCATIONPROC                          _glBindAttribLocation;
PFNGLCOMPILESHADERPROC                               _glCompileShader;
PFNGLCREATEPROGRAMPROC                               _glCreateProgram;
PFNGLCREATESHADERPROC                                _glCreateShader;
PFNGLDELETEPROGRAMPROC                               _glDeleteProgram;
PFNGLDELETESHADERPROC                                _glDeleteShader;
PFNGLDETACHSHADERPROC                                _glDetachShader;
PFNGLDISABLEVERTEXATTRIBARRAYPROC                    _glDisableVertexAttribArray;
PFNGLENABLEVERTEXATTRIBARRAYPROC                     _glEnableVertexAttribArray;
PFNGLGETACTIVEATTRIBPROC                             _glGetActiveAttrib;
PFNGLGETACTIVEUNIFORMPROC                            _glGetActiveUniform;
PFNGLGETATTACHEDSHADERSPROC                          _glGetAttachedShaders;
PFNGLGETATTRIBLOCATIONPROC                           _glGetAttribLocation;
PFNGLGETPROGRAMIVPROC                                _glGetProgramiv;
PFNGLGETPROGRAMINFOLOGPROC                           _glGetProgramInfoLog;
PFNGLGETSHADERIVPROC                                 _glGetShaderiv;
PFNGLGETSHADERINFOLOGPROC                            _glGetShaderInfoLog;
PFNGLGETSHADERSOURCEPROC                             _glGetShaderSource;
PFNGLGETUNIFORMLOCATIONPROC                          _glGetUniformLocation;
PFNGLGETUNIFORMFVPROC                                _glGetUniformfv;
PFNGLGETUNIFORMIVPROC                                _glGetUniformiv;
PFNGLGETVERTEXATTRIBDVPROC                           _glGetVertexAttribdv;
PFNGLGETVERTEXATTRIBFVPROC                           _glGetVertexAttribfv;
PFNGLGETVERTEXATTRIBIVPROC                           _glGetVertexAttribiv;
PFNGLGETVERTEXATTRIBPOINTERVPROC                     _glGetVertexAttribPointerv;
PFNGLISPROGRAMPROC                                   _glIsProgram;
PFNGLISSHADERPROC                                    _glIsShader;
PFNGLLINKPROGRAMPROC                                 _glLinkProgram;
PFNGLSHADERSOURCEPROC                                _glShaderSource;
PFNGLUSEPROGRAMPROC                                  _glUseProgram;
PFNGLUNIFORM1FPROC                                   _glUniform1f;
PFNGLUNIFORM2FPROC                                   _glUniform2f;
PFNGLUNIFORM3FPROC                                   _glUniform3f;
PFNGLUNIFORM4FPROC                                   _glUniform4f;
PFNGLUNIFORM1IPROC                                   _glUniform1i;
PFNGLUNIFORM2IPROC                                   _glUniform2i;
PFNGLUNIFORM3IPROC                                   _glUniform3i;
PFNGLUNIFORM4IPROC                                   _glUniform4i;
PFNGLUNIFORM1FVPROC                                  _glUniform1fv;
PFNGLUNIFORM2FVPROC                                  _glUniform2fv;
PFNGLUNIFORM3FVPROC                                  _glUniform3fv;
PFNGLUNIFORM4FVPROC                                  _glUniform4fv;
PFNGLUNIFORM1IVPROC                                  _glUniform1iv;
PFNGLUNIFORM2IVPROC                                  _glUniform2iv;
PFNGLUNIFORM3IVPROC                                  _glUniform3iv;
PFNGLUNIFORM4IVPROC                                  _glUniform4iv;
PFNGLUNIFORMMATRIX2FVPROC                            _glUniformMatrix2fv;
PFNGLUNIFORMMATRIX3FVPROC                            _glUniformMatrix3fv;
PFNGLUNIFORMMATRIX4FVPROC                            _glUniformMatrix4fv;
PFNGLVALIDATEPROGRAMPROC                             _glValidateProgram;
PFNGLVERTEXATTRIB1DPROC                              _glVertexAttrib1d;
PFNGLVERTEXATTRIB1DVPROC                             _glVertexAttrib1dv;
PFNGLVERTEXATTRIB1FPROC                              _glVertexAttrib1f;
PFNGLVERTEXATTRIB1FVPROC                             _glVertexAttrib1fv;
PFNGLVERTEXATTRIB1SPROC                              _glVertexAttrib1s;
PFNGLVERTEXATTRIB1SVPROC                             _glVertexAttrib1sv;
PFNGLVERTEXATTRIB2DPROC                              _glVertexAttrib2d;
PFNGLVERTEXATTRIB2DVPROC                             _glVertexAttrib2dv;
PFNGLVERTEXATTRIB2FPROC                              _glVertexAttrib2f;
PFNGLVERTEXATTRIB2FVPROC                             _glVertexAttrib2fv;
PFNGLVERTEXATTRIB2SPROC                              _glVertexAttrib2s;
PFNGLVERTEXATTRIB2SVPROC                             _glVertexAttrib2sv;
PFNGLVERTEXATTRIB3DPROC                              _glVertexAttrib3d;
PFNGLVERTEXATTRIB3DVPROC                             _glVertexAttrib3dv;
PFNGLVERTEXATTRIB3FPROC                              _glVertexAttrib3f;
PFNGLVERTEXATTRIB3FVPROC                             _glVertexAttrib3fv;
PFNGLVERTEXATTRIB3SPROC                              _glVertexAttrib3s;
PFNGLVERTEXATTRIB3SVPROC                             _glVertexAttrib3sv;
PFNGLVERTEXATTRIB4NBVPROC                            _glVertexAttrib4Nbv;
PFNGLVERTEXATTRIB4NIVPROC                            _glVertexAttrib4Niv;
PFNGLVERTEXATTRIB4NSVPROC                            _glVertexAttrib4Nsv;
PFNGLVERTEXATTRIB4NUBPROC                            _glVertexAttrib4Nub;
PFNGLVERTEXATTRIB4NUBVPROC                           _glVertexAttrib4Nubv;
PFNGLVERTEXATTRIB4NUIVPROC                           _glVertexAttrib4Nuiv;
PFNGLVERTEXATTRIB4NUSVPROC                           _glVertexAttrib4Nusv;
PFNGLVERTEXATTRIB4BVPROC                             _glVertexAttrib4bv;
PFNGLVERTEXATTRIB4DPROC                              _glVertexAttrib4d;
PFNGLVERTEXATTRIB4DVPROC                             _glVertexAttrib4dv;
PFNGLVERTEXATTRIB4FPROC                              _glVertexAttrib4f;
PFNGLVERTEXATTRIB4FVPROC                             _glVertexAttrib4fv;
PFNGLVERTEXATTRIB4IVPROC                             _glVertexAttrib4iv;
PFNGLVERTEXATTRIB4SPROC                              _glVertexAttrib4s;
PFNGLVERTEXATTRIB4SVPROC                             _glVertexAttrib4sv;
PFNGLVERTEXATTRIB4UBVPROC                            _glVertexAttrib4ubv;
PFNGLVERTEXATTRIB4UIVPROC                            _glVertexAttrib4uiv;
PFNGLVERTEXATTRIB4USVPROC                            _glVertexAttrib4usv;
PFNGLVERTEXATTRIBPOINTERPROC                         _glVertexAttribPointer;
PFNGLUNIFORMMATRIX2X3FVPROC                          _glUniformMatrix2x3fv;
PFNGLUNIFORMMATRIX3X2FVPROC                          _glUniformMatrix3x2fv;
PFNGLUNIFORMMATRIX2X4FVPROC                          _glUniformMatrix2x4fv;
PFNGLUNIFORMMATRIX4X2FVPROC                          _glUniformMatrix4x2fv;
PFNGLUNIFORMMATRIX3X4FVPROC                          _glUniformMatrix3x4fv;
PFNGLUNIFORMMATRIX4X3FVPROC                          _glUniformMatrix4x3fv;
PFNGLCOLORMASKIPROC                                  _glColorMaski;
PFNGLGETBOOLEANI_VPROC                               _glGetBooleani_v;
PFNGLGETINTEGERI_VPROC                               _glGetIntegeri_v;
PFNGLENABLEIPROC                                     _glEnablei;
PFNGLDISABLEIPROC                                    _glDisablei;
PFNGLISENABLEDIPROC                                  _glIsEnabledi;
PFNGLBEGINTRANSFORMFEEDBACKPROC                      _glBeginTransformFeedback;
PFNGLENDTRANSFORMFEEDBACKPROC                        _glEndTransformFeedback;
PFNGLBINDBUFFERRANGEPROC                             _glBindBufferRange;
PFNGLBINDBUFFERBASEPROC                              _glBindBufferBase;
PFNGLTRANSFORMFEEDBACKVARYINGSPROC                   _glTransformFeedbackVaryings;
PFNGLGETTRANSFORMFEEDBACKVARYINGPROC                 _glGetTransformFeedbackVarying;
PFNGLCLAMPCOLORPROC                                  _glClampColor;
PFNGLBEGINCONDITIONALRENDERPROC                      _glBeginConditionalRender;
PFNGLENDCONDITIONALRENDERPROC                        _glEndConditionalRender;
PFNGLVERTEXATTRIBIPOINTERPROC                        _glVertexAttribIPointer;
PFNGLGETVERTEXATTRIBIIVPROC                          _glGetVertexAttribIiv;
PFNGLGETVERTEXATTRIBIUIVPROC                         _glGetVertexAttribIuiv;
PFNGLVERTEXATTRIBI1IPROC                             _glVertexAttribI1i;
PFNGLVERTEXATTRIBI2IPROC                             _glVertexAttribI2i;
PFNGLVERTEXATTRIBI3IPROC                             _glVertexAttribI3i;
PFNGLVERTEXATTRIBI4IPROC                             _glVertexAttribI4i;
PFNGLVERTEXATTRIBI1UIPROC                            _glVertexAttribI1ui;
PFNGLVERTEXATTRIBI2UIPROC                            _glVertexAttribI2ui;
PFNGLVERTEXATTRIBI3UIPROC                            _glVertexAttribI3ui;
PFNGLVERTEXATTRIBI4UIPROC                            _glVertexAttribI4ui;
PFNGLVERTEXATTRIBI1IVPROC                            _glVertexAttribI1iv;
PFNGLVERTEXATTRIBI2IVPROC                            _glVertexAttribI2iv;
PFNGLVERTEXATTRIBI3IVPROC                            _glVertexAttribI3iv;
PFNGLVERTEXATTRIBI4IVPROC                            _glVertexAttribI4iv;
PFNGLVERTEXATTRIBI1UIVPROC                           _glVertexAttribI1uiv;
PFNGLVERTEXATTRIBI2UIVPROC                           _glVertexAttribI2uiv;
PFNGLVERTEXATTRIBI3UIVPROC                           _glVertexAttribI3uiv;
PFNGLVERTEXATTRIBI4UIVPROC                           _glVertexAttribI4uiv;
PFNGLVERTEXATTRIBI4BVPROC                            _glVertexAttribI4bv;
PFNGLVERTEXATTRIBI4SVPROC                            _glVertexAttribI4sv;
PFNGLVERTEXATTRIBI4UBVPROC                           _glVertexAttribI4ubv;
PFNGLVERTEXATTRIBI4USVPROC                           _glVertexAttribI4usv;
PFNGLGETUNIFORMUIVPROC                               _glGetUniformuiv;
PFNGLBINDFRAGDATALOCATIONPROC                        _glBindFragDataLocation;
PFNGLGETFRAGDATALOCATIONPROC                         _glGetFragDataLocation;
PFNGLUNIFORM1UIPROC                                  _glUniform1ui;
PFNGLUNIFORM2UIPROC                                  _glUniform2ui;
PFNGLUNIFORM3UIPROC                                  _glUniform3ui;
PFNGLUNIFORM4UIPROC                                  _glUniform4ui;
PFNGLUNIFORM1UIVPROC                                 _glUniform1uiv;
PFNGLUNIFORM2UIVPROC                                 _glUniform2uiv;
PFNGLUNIFORM3UIVPROC                                 _glUniform3uiv;
PFNGLUNIFORM4UIVPROC                                 _glUniform4uiv;
PFNGLTEXPARAMETERIIVPROC                             _glTexParameterIiv;
PFNGLTEXPARAMETERIUIVPROC                            _glTexParameterIuiv;
PFNGLGETTEXPARAMETERIIVPROC                          _glGetTexParameterIiv;
PFNGLGETTEXPARAMETERIUIVPROC                         _glGetTexParameterIuiv;
PFNGLCLEARBUFFERIVPROC                               _glClearBufferiv;
PFNGLCLEARBUFFERUIVPROC                              _glClearBufferuiv;
PFNGLCLEARBUFFERFVPROC                               _glClearBufferfv;
PFNGLCLEARBUFFERFIPROC                               _glClearBufferfi;
PFNGLGETSTRINGIPROC                                  _glGetStringi;
PFNGLISRENDERBUFFERPROC                              _glIsRenderbuffer;
PFNGLBINDRENDERBUFFERPROC                            _glBindRenderbuffer;
PFNGLDELETERENDERBUFFERSPROC                         _glDeleteRenderbuffers;
PFNGLGENRENDERBUFFERSPROC                            _glGenRenderbuffers;
PFNGLRENDERBUFFERSTORAGEPROC                         _glRenderbufferStorage;
PFNGLGETRENDERBUFFERPARAMETERIVPROC                  _glGetRenderbufferParameteriv;
PFNGLISFRAMEBUFFERPROC                               _glIsFramebuffer;
PFNGLBINDFRAMEBUFFERPROC                             _glBindFramebuffer;
PFNGLDELETEFRAMEBUFFERSPROC                          _glDeleteFramebuffers;
PFNGLGENFRAMEBUFFERSPROC                             _glGenFramebuffers;
PFNGLCHECKFRAMEBUFFERSTATUSPROC                      _glCheckFramebufferStatus;
PFNGLFRAMEBUFFERTEXTURE1DPROC                        _glFramebufferTexture1D;
PFNGLFRAMEBUFFERTEXTURE2DPROC                        _glFramebufferTexture2D;
PFNGLFRAMEBUFFERTEXTURE3DPROC                        _glFramebufferTexture3D;
PFNGLFRAMEBUFFERRENDERBUFFERPROC                     _glFramebufferRenderbuffer;
PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC         _glGetFramebufferAttachmentParameteriv;
PFNGLGENERATEMIPMAPPROC                              _glGenerateMipmap;
PFNGLBLITFRAMEBUFFERPROC                             _glBlitFramebuffer;
PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC              _glRenderbufferStorageMultisample;
PFNGLFRAMEBUFFERTEXTURELAYERPROC                     _glFramebufferTextureLayer;
PFNGLMAPBUFFERRANGEPROC                              _glMapBufferRange;
PFNGLFLUSHMAPPEDBUFFERRANGEPROC                      _glFlushMappedBufferRange;
PFNGLBINDVERTEXARRAYPROC                             _glBindVertexArray;
PFNGLDELETEVERTEXARRAYSPROC                          _glDeleteVertexArrays;
PFNGLGENVERTEXARRAYSPROC                             _glGenVertexArrays;
PFNGLISVERTEXARRAYPROC                               _glIsVertexArray;
PFNGLDRAWARRAYSINSTANCEDPROC                         _glDrawArraysInstanced;
PFNGLDRAWELEMENTSINSTANCEDPROC                       _glDrawElementsInstanced;
PFNGLTEXBUFFERPROC                                   _glTexBuffer;
PFNGLPRIMITIVERESTARTINDEXPROC                       _glPrimitiveRestartIndex;
PFNGLCOPYBUFFERSUBDATAPROC                           _glCopyBufferSubData;
PFNGLGETUNIFORMINDICESPROC                           _glGetUniformIndices;
PFNGLGETACTIVEUNIFORMSIVPROC                         _glGetActiveUniformsiv;
PFNGLGETACTIVEUNIFORMNAMEPROC                        _glGetActiveUniformName;
PFNGLGETUNIFORMBLOCKINDEXPROC                        _glGetUniformBlockIndex;
PFNGLGETACTIVEUNIFORMBLOCKIVPROC                     _glGetActiveUniformBlockiv;
PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC                   _glGetActiveUniformBlockName;
PFNGLUNIFORMBLOCKBINDINGPROC                         _glUniformBlockBinding;
PFNGLDRAWELEMENTSBASEVERTEXPROC                      _glDrawElementsBaseVertex;
PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC                 _glDrawRangeElementsBaseVertex;
PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC             _glDrawElementsInstancedBaseVertex;
PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC                 _glMultiDrawElementsBaseVertex;
PFNGLPROVOKINGVERTEXPROC                             _glProvokingVertex;
PFNGLFENCESYNCPROC                                   _glFenceSync;
PFNGLISSYNCPROC                                      _glIsSync;
PFNGLDELETESYNCPROC                                  _glDeleteSync;
PFNGLCLIENTWAITSYNCPROC                              _glClientWaitSync;
PFNGLWAITSYNCPROC                                    _glWaitSync;
PFNGLGETINTEGER64VPROC                               _glGetInteger64v;
PFNGLGETSYNCIVPROC                                   _glGetSynciv;
PFNGLGETINTEGER64I_VPROC                             _glGetInteger64i_v;
PFNGLGETBUFFERPARAMETERI64VPROC                      _glGetBufferParameteri64v;
PFNGLFRAMEBUFFERTEXTUREPROC                          _glFramebufferTexture;
PFNGLTEXIMAGE2DMULTISAMPLEPROC                       _glTexImage2DMultisample;
PFNGLTEXIMAGE3DMULTISAMPLEPROC                       _glTexImage3DMultisample;
PFNGLGETMULTISAMPLEFVPROC                            _glGetMultisamplefv;
PFNGLSAMPLEMASKIPROC                                 _glSampleMaski;
PFNGLBINDFRAGDATALOCATIONINDEXEDPROC                 _glBindFragDataLocationIndexed;
PFNGLGETFRAGDATAINDEXPROC                            _glGetFragDataIndex;
PFNGLGENSAMPLERSPROC                                 _glGenSamplers;
PFNGLDELETESAMPLERSPROC                              _glDeleteSamplers;
PFNGLISSAMPLERPROC                                   _glIsSampler;
PFNGLBINDSAMPLERPROC                                 _glBindSampler;
PFNGLSAMPLERPARAMETERIPROC                           _glSamplerParameteri;
PFNGLSAMPLERPARAMETERIVPROC                          _glSamplerParameteriv;
PFNGLSAMPLERPARAMETERFPROC                           _glSamplerParameterf;
PFNGLSAMPLERPARAMETERFVPROC                          _glSamplerParameterfv;
PFNGLSAMPLERPARAMETERIIVPROC                         _glSamplerParameterIiv;
PFNGLSAMPLERPARAMETERIUIVPROC                        _glSamplerParameterIuiv;
PFNGLGETSAMPLERPARAMETERIVPROC                       _glGetSamplerParameteriv;
PFNGLGETSAMPLERPARAMETERIIVPROC                      _glGetSamplerParameterIiv;
PFNGLGETSAMPLERPARAMETERFVPROC                       _glGetSamplerParameterfv;
PFNGLGETSAMPLERPARAMETERIUIVPROC                     _glGetSamplerParameterIuiv;
PFNGLQUERYCOUNTERPROC                                _glQueryCounter;
PFNGLGETQUERYOBJECTI64VPROC                          _glGetQueryObjecti64v;
PFNGLGETQUERYOBJECTUI64VPROC                         _glGetQueryObjectui64v;
PFNGLVERTEXATTRIBDIVISORPROC                         _glVertexAttribDivisor;
PFNGLVERTEXATTRIBP1UIPROC                            _glVertexAttribP1ui;
PFNGLVERTEXATTRIBP1UIVPROC                           _glVertexAttribP1uiv;
PFNGLVERTEXATTRIBP2UIPROC                            _glVertexAttribP2ui;
PFNGLVERTEXATTRIBP2UIVPROC                           _glVertexAttribP2uiv;
PFNGLVERTEXATTRIBP3UIPROC                            _glVertexAttribP3ui;
PFNGLVERTEXATTRIBP3UIVPROC                           _glVertexAttribP3uiv;
PFNGLVERTEXATTRIBP4UIPROC                            _glVertexAttribP4ui;
PFNGLVERTEXATTRIBP4UIVPROC                           _glVertexAttribP4uiv;
PFNGLMINSAMPLESHADINGPROC                            _glMinSampleShading;
PFNGLBLENDEQUATIONIPROC                              _glBlendEquationi;
PFNGLBLENDEQUATIONSEPARATEIPROC                      _glBlendEquationSeparatei;
PFNGLBLENDFUNCIPROC                                  _glBlendFunci;
PFNGLBLENDFUNCSEPARATEIPROC                          _glBlendFuncSeparatei;
PFNGLDRAWARRAYSINDIRECTPROC                          _glDrawArraysIndirect;
PFNGLDRAWELEMENTSINDIRECTPROC                        _glDrawElementsIndirect;
PFNGLUNIFORM1DPROC                                   _glUniform1d;
PFNGLUNIFORM2DPROC                                   _glUniform2d;
PFNGLUNIFORM3DPROC                                   _glUniform3d;
PFNGLUNIFORM4DPROC                                   _glUniform4d;
PFNGLUNIFORM1DVPROC                                  _glUniform1dv;
PFNGLUNIFORM2DVPROC                                  _glUniform2dv;
PFNGLUNIFORM3DVPROC                                  _glUniform3dv;
PFNGLUNIFORM4DVPROC                                  _glUniform4dv;
PFNGLUNIFORMMATRIX2DVPROC                            _glUniformMatrix2dv;
PFNGLUNIFORMMATRIX3DVPROC                            _glUniformMatrix3dv;
PFNGLUNIFORMMATRIX4DVPROC                            _glUniformMatrix4dv;
PFNGLUNIFORMMATRIX2X3DVPROC                          _glUniformMatrix2x3dv;
PFNGLUNIFORMMATRIX2X4DVPROC                          _glUniformMatrix2x4dv;
PFNGLUNIFORMMATRIX3X2DVPROC                          _glUniformMatrix3x2dv;
PFNGLUNIFORMMATRIX3X4DVPROC                          _glUniformMatrix3x4dv;
PFNGLUNIFORMMATRIX4X2DVPROC                          _glUniformMatrix4x2dv;
PFNGLUNIFORMMATRIX4X3DVPROC                          _glUniformMatrix4x3dv;
PFNGLGETUNIFORMDVPROC                                _glGetUniformdv;
PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC                _glGetSubroutineUniformLocation;
PFNGLGETSUBROUTINEINDEXPROC                          _glGetSubroutineIndex;
PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC                _glGetActiveSubroutineUniformiv;
PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC              _glGetActiveSubroutineUniformName;
PFNGLGETACTIVESUBROUTINENAMEPROC                     _glGetActiveSubroutineName;
PFNGLUNIFORMSUBROUTINESUIVPROC                       _glUniformSubroutinesuiv;
PFNGLGETUNIFORMSUBROUTINEUIVPROC                     _glGetUniformSubroutineuiv;
PFNGLGETPROGRAMSTAGEIVPROC                           _glGetProgramStageiv;
PFNGLPATCHPARAMETERIPROC                             _glPatchParameteri;
PFNGLPATCHPARAMETERFVPROC                            _glPatchParameterfv;
PFNGLBINDTRANSFORMFEEDBACKPROC                       _glBindTransformFeedback;
PFNGLDELETETRANSFORMFEEDBACKSPROC                    _glDeleteTransformFeedbacks;
PFNGLGENTRANSFORMFEEDBACKSPROC                       _glGenTransformFeedbacks;
PFNGLISTRANSFORMFEEDBACKPROC                         _glIsTransformFeedback;
PFNGLPAUSETRANSFORMFEEDBACKPROC                      _glPauseTransformFeedback;
PFNGLRESUMETRANSFORMFEEDBACKPROC                     _glResumeTransformFeedback;
PFNGLDRAWTRANSFORMFEEDBACKPROC                       _glDrawTransformFeedback;
PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC                 _glDrawTransformFeedbackStream;
PFNGLBEGINQUERYINDEXEDPROC                           _glBeginQueryIndexed;
PFNGLENDQUERYINDEXEDPROC                             _glEndQueryIndexed;
PFNGLGETQUERYINDEXEDIVPROC                           _glGetQueryIndexediv;
PFNGLRELEASESHADERCOMPILERPROC                       _glReleaseShaderCompiler;
PFNGLSHADERBINARYPROC                                _glShaderBinary;
PFNGLGETSHADERPRECISIONFORMATPROC                    _glGetShaderPrecisionFormat;
PFNGLDEPTHRANGEFPROC                                 _glDepthRangef;
PFNGLCLEARDEPTHFPROC                                 _glClearDepthf;
PFNGLGETPROGRAMBINARYPROC                            _glGetProgramBinary;
PFNGLPROGRAMBINARYPROC                               _glProgramBinary;
PFNGLPROGRAMPARAMETERIPROC                           _glProgramParameteri;
PFNGLUSEPROGRAMSTAGESPROC                            _glUseProgramStages;
PFNGLACTIVESHADERPROGRAMPROC                         _glActiveShaderProgram;
PFNGLCREATESHADERPROGRAMVPROC                        _glCreateShaderProgramv;
PFNGLBINDPROGRAMPIPELINEPROC                         _glBindProgramPipeline;
PFNGLDELETEPROGRAMPIPELINESPROC                      _glDeleteProgramPipelines;
PFNGLGENPROGRAMPIPELINESPROC                         _glGenProgramPipelines;
PFNGLISPROGRAMPIPELINEPROC                           _glIsProgramPipeline;
PFNGLGETPROGRAMPIPELINEIVPROC                        _glGetProgramPipelineiv;
PFNGLPROGRAMUNIFORM1IPROC                            _glProgramUniform1i;
PFNGLPROGRAMUNIFORM1IVPROC                           _glProgramUniform1iv;
PFNGLPROGRAMUNIFORM1FPROC                            _glProgramUniform1f;
PFNGLPROGRAMUNIFORM1FVPROC                           _glProgramUniform1fv;
PFNGLPROGRAMUNIFORM1DPROC                            _glProgramUniform1d;
PFNGLPROGRAMUNIFORM1DVPROC                           _glProgramUniform1dv;
PFNGLPROGRAMUNIFORM1UIPROC                           _glProgramUniform1ui;
PFNGLPROGRAMUNIFORM1UIVPROC                          _glProgramUniform1uiv;
PFNGLPROGRAMUNIFORM2IPROC                            _glProgramUniform2i;
PFNGLPROGRAMUNIFORM2IVPROC                           _glProgramUniform2iv;
PFNGLPROGRAMUNIFORM2FPROC                            _glProgramUniform2f;
PFNGLPROGRAMUNIFORM2FVPROC                           _glProgramUniform2fv;
PFNGLPROGRAMUNIFORM2DPROC                            _glProgramUniform2d;
PFNGLPROGRAMUNIFORM2DVPROC                           _glProgramUniform2dv;
PFNGLPROGRAMUNIFORM2UIPROC                           _glProgramUniform2ui;
PFNGLPROGRAMUNIFORM2UIVPROC                          _glProgramUniform2uiv;
PFNGLPROGRAMUNIFORM3IPROC                            _glProgramUniform3i;
PFNGLPROGRAMUNIFORM3IVPROC                           _glProgramUniform3iv;
PFNGLPROGRAMUNIFORM3FPROC                            _glProgramUniform3f;
PFNGLPROGRAMUNIFORM3FVPROC                           _glProgramUniform3fv;
PFNGLPROGRAMUNIFORM3DPROC                            _glProgramUniform3d;
PFNGLPROGRAMUNIFORM3DVPROC                           _glProgramUniform3dv;
PFNGLPROGRAMUNIFORM3UIPROC                           _glProgramUniform3ui;
PFNGLPROGRAMUNIFORM3UIVPROC                          _glProgramUniform3uiv;
PFNGLPROGRAMUNIFORM4IPROC                            _glProgramUniform4i;
PFNGLPROGRAMUNIFORM4IVPROC                           _glProgramUniform4iv;
PFNGLPROGRAMUNIFORM4FPROC                            _glProgramUniform4f;
PFNGLPROGRAMUNIFORM4FVPROC                           _glProgramUniform4fv;
PFNGLPROGRAMUNIFORM4DPROC                            _glProgramUniform4d;
PFNGLPROGRAMUNIFORM4DVPROC                           _glProgramUniform4dv;
PFNGLPROGRAMUNIFORM4UIPROC                           _glProgramUniform4ui;
PFNGLPROGRAMUNIFORM4UIVPROC                          _glProgramUniform4uiv;
PFNGLPROGRAMUNIFORMMATRIX2FVPROC                     _glProgramUniformMatrix2fv;
PFNGLPROGRAMUNIFORMMATRIX3FVPROC                     _glProgramUniformMatrix3fv;
PFNGLPROGRAMUNIFORMMATRIX4FVPROC                     _glProgramUniformMatrix4fv;
PFNGLPROGRAMUNIFORMMATRIX2DVPROC                     _glProgramUniformMatrix2dv;
PFNGLPROGRAMUNIFORMMATRIX3DVPROC                     _glProgramUniformMatrix3dv;
PFNGLPROGRAMUNIFORMMATRIX4DVPROC                     _glProgramUniformMatrix4dv;
PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC                   _glProgramUniformMatrix2x3fv;
PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC                   _glProgramUniformMatrix3x2fv;
PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC                   _glProgramUniformMatrix2x4fv;
PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC                   _glProgramUniformMatrix4x2fv;
PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC                   _glProgramUniformMatrix3x4fv;
PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC                   _glProgramUniformMatrix4x3fv;
PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC                   _glProgramUniformMatrix2x3dv;
PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC                   _glProgramUniformMatrix3x2dv;
PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC                   _glProgramUniformMatrix2x4dv;
PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC                   _glProgramUniformMatrix4x2dv;
PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC                   _glProgramUniformMatrix3x4dv;
PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC                   _glProgramUniformMatrix4x3dv;
PFNGLVALIDATEPROGRAMPIPELINEPROC                     _glValidateProgramPipeline;
PFNGLGETPROGRAMPIPELINEINFOLOGPROC                   _glGetProgramPipelineInfoLog;
PFNGLVERTEXATTRIBL1DPROC                             _glVertexAttribL1d;
PFNGLVERTEXATTRIBL2DPROC                             _glVertexAttribL2d;
PFNGLVERTEXATTRIBL3DPROC                             _glVertexAttribL3d;
PFNGLVERTEXATTRIBL4DPROC                             _glVertexAttribL4d;
PFNGLVERTEXATTRIBL1DVPROC                            _glVertexAttribL1dv;
PFNGLVERTEXATTRIBL2DVPROC                            _glVertexAttribL2dv;
PFNGLVERTEXATTRIBL3DVPROC                            _glVertexAttribL3dv;
PFNGLVERTEXATTRIBL4DVPROC                            _glVertexAttribL4dv;
PFNGLVERTEXATTRIBLPOINTERPROC                        _glVertexAttribLPointer;
PFNGLGETVERTEXATTRIBLDVPROC                          _glGetVertexAttribLdv;
PFNGLVIEWPORTARRAYVPROC                              _glViewportArrayv;
PFNGLVIEWPORTINDEXEDFPROC                            _glViewportIndexedf;
PFNGLVIEWPORTINDEXEDFVPROC                           _glViewportIndexedfv;
PFNGLSCISSORARRAYVPROC                               _glScissorArrayv;
PFNGLSCISSORINDEXEDPROC                              _glScissorIndexed;
PFNGLSCISSORINDEXEDVPROC                             _glScissorIndexedv;
PFNGLDEPTHRANGEARRAYVPROC                            _glDepthRangeArrayv;
PFNGLDEPTHRANGEINDEXEDPROC                           _glDepthRangeIndexed;
PFNGLGETFLOATI_VPROC                                 _glGetFloati_v;
PFNGLGETDOUBLEI_VPROC                                _glGetDoublei_v;
PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC             _glDrawArraysInstancedBaseInstance;
PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC           _glDrawElementsInstancedBaseInstance;
PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC _glDrawElementsInstancedBaseVertexBaseInstance;
PFNGLGETINTERNALFORMATIVPROC                         _glGetInternalformativ;
PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC              _glGetActiveAtomicCounterBufferiv;
PFNGLBINDIMAGETEXTUREPROC                            _glBindImageTexture;
PFNGLMEMORYBARRIERPROC                               _glMemoryBarrier;
PFNGLTEXSTORAGE1DPROC                                _glTexStorage1D;
PFNGLTEXSTORAGE2DPROC                                _glTexStorage2D;
PFNGLTEXSTORAGE3DPROC                                _glTexStorage3D;
PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC              _glDrawTransformFeedbackInstanced;
PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC        _glDrawTransformFeedbackStreamInstanced;
PFNGLCLEARBUFFERDATAPROC                             _glClearBufferData;
PFNGLCLEARBUFFERSUBDATAPROC                          _glClearBufferSubData;
PFNGLDISPATCHCOMPUTEPROC                             _glDispatchCompute;
PFNGLDISPATCHCOMPUTEINDIRECTPROC                     _glDispatchComputeIndirect;
PFNGLCOPYIMAGESUBDATAPROC                            _glCopyImageSubData;
PFNGLFRAMEBUFFERPARAMETERIPROC                       _glFramebufferParameteri;
PFNGLGETFRAMEBUFFERPARAMETERIVPROC                   _glGetFramebufferParameteriv;
PFNGLGETINTERNALFORMATI64VPROC                       _glGetInternalformati64v;
PFNGLINVALIDATETEXSUBIMAGEPROC                       _glInvalidateTexSubImage;
PFNGLINVALIDATETEXIMAGEPROC                          _glInvalidateTexImage;
PFNGLINVALIDATEBUFFERSUBDATAPROC                     _glInvalidateBufferSubData;
PFNGLINVALIDATEBUFFERDATAPROC                        _glInvalidateBufferData;
PFNGLINVALIDATEFRAMEBUFFERPROC                       _glInvalidateFramebuffer;
PFNGLINVALIDATESUBFRAMEBUFFERPROC                    _glInvalidateSubFramebuffer;
PFNGLMULTIDRAWARRAYSINDIRECTPROC                     _glMultiDrawArraysIndirect;
PFNGLMULTIDRAWELEMENTSINDIRECTPROC                   _glMultiDrawElementsIndirect;
PFNGLGETPROGRAMINTERFACEIVPROC                       _glGetProgramInterfaceiv;
PFNGLGETPROGRAMRESOURCEINDEXPROC                     _glGetProgramResourceIndex;
PFNGLGETPROGRAMRESOURCENAMEPROC                      _glGetProgramResourceName;
PFNGLGETPROGRAMRESOURCEIVPROC                        _glGetProgramResourceiv;
PFNGLGETPROGRAMRESOURCELOCATIONPROC                  _glGetProgramResourceLocation;
PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC             _glGetProgramResourceLocationIndex;
PFNGLSHADERSTORAGEBLOCKBINDINGPROC                   _glShaderStorageBlockBinding;
PFNGLTEXBUFFERRANGEPROC                              _glTexBufferRange;
PFNGLTEXSTORAGE2DMULTISAMPLEPROC                     _glTexStorage2DMultisample;
PFNGLTEXSTORAGE3DMULTISAMPLEPROC                     _glTexStorage3DMultisample;
PFNGLTEXTUREVIEWPROC                                 _glTextureView;
PFNGLBINDVERTEXBUFFERPROC                            _glBindVertexBuffer;
PFNGLVERTEXATTRIBFORMATPROC                          _glVertexAttribFormat;
PFNGLVERTEXATTRIBIFORMATPROC                         _glVertexAttribIFormat;
PFNGLVERTEXATTRIBLFORMATPROC                         _glVertexAttribLFormat;
PFNGLVERTEXATTRIBBINDINGPROC                         _glVertexAttribBinding;
PFNGLVERTEXBINDINGDIVISORPROC                        _glVertexBindingDivisor;
PFNGLDEBUGMESSAGECONTROLPROC                         _glDebugMessageControl;
PFNGLDEBUGMESSAGEINSERTPROC                          _glDebugMessageInsert;
PFNGLDEBUGMESSAGECALLBACKPROC                        _glDebugMessageCallback;
PFNGLGETDEBUGMESSAGELOGPROC                          _glGetDebugMessageLog;
PFNGLPUSHDEBUGGROUPPROC                              _glPushDebugGroup;
PFNGLPOPDEBUGGROUPPROC                               _glPopDebugGroup;
PFNGLOBJECTLABELPROC                                 _glObjectLabel;
PFNGLGETOBJECTLABELPROC                              _glGetObjectLabel;
PFNGLOBJECTPTRLABELPROC                              _glObjectPtrLabel;
PFNGLGETOBJECTPTRLABELPROC                           _glGetObjectPtrLabel;
PFNGLBUFFERSTORAGEPROC                               _glBufferStorage;
PFNGLCLEARTEXIMAGEPROC                               _glClearTexImage;
PFNGLCLEARTEXSUBIMAGEPROC                            _glClearTexSubImage;
PFNGLBINDBUFFERSBASEPROC                             _glBindBuffersBase;
PFNGLBINDBUFFERSRANGEPROC                            _glBindBuffersRange;
PFNGLBINDTEXTURESPROC                                _glBindTextures;
PFNGLBINDSAMPLERSPROC                                _glBindSamplers;
PFNGLBINDIMAGETEXTURESPROC                           _glBindImageTextures;
PFNGLBINDVERTEXBUFFERSPROC                           _glBindVertexBuffers;
PFNGLCLIPCONTROLPROC                                 _glClipControl;
PFNGLCREATETRANSFORMFEEDBACKSPROC                    _glCreateTransformFeedbacks;
PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC                 _glTransformFeedbackBufferBase;
PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC                _glTransformFeedbackBufferRange;
PFNGLGETTRANSFORMFEEDBACKIVPROC                      _glGetTransformFeedbackiv;
PFNGLGETTRANSFORMFEEDBACKI_VPROC                     _glGetTransformFeedbacki_v;
PFNGLGETTRANSFORMFEEDBACKI64_VPROC                   _glGetTransformFeedbacki64_v;
PFNGLCREATEBUFFERSPROC                               _glCreateBuffers;
PFNGLNAMEDBUFFERSTORAGEPROC                          _glNamedBufferStorage;
PFNGLNAMEDBUFFERDATAPROC                             _glNamedBufferData;
PFNGLNAMEDBUFFERSUBDATAPROC                          _glNamedBufferSubData;
PFNGLCOPYNAMEDBUFFERSUBDATAPROC                      _glCopyNamedBufferSubData;
PFNGLCLEARNAMEDBUFFERDATAPROC                        _glClearNamedBufferData;
PFNGLCLEARNAMEDBUFFERSUBDATAPROC                     _glClearNamedBufferSubData;
PFNGLMAPNAMEDBUFFERPROC                              _glMapNamedBuffer;
PFNGLMAPNAMEDBUFFERRANGEPROC                         _glMapNamedBufferRange;
PFNGLUNMAPNAMEDBUFFERPROC                            _glUnmapNamedBuffer;
PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC                 _glFlushMappedNamedBufferRange;
PFNGLGETNAMEDBUFFERPARAMETERIVPROC                   _glGetNamedBufferParameteriv;
PFNGLGETNAMEDBUFFERPARAMETERI64VPROC                 _glGetNamedBufferParameteri64v;
PFNGLGETNAMEDBUFFERPOINTERVPROC                      _glGetNamedBufferPointerv;
PFNGLGETNAMEDBUFFERSUBDATAPROC                       _glGetNamedBufferSubData;
PFNGLCREATEFRAMEBUFFERSPROC                          _glCreateFramebuffers;
PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC                _glNamedFramebufferRenderbuffer;
PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC                  _glNamedFramebufferParameteri;
PFNGLNAMEDFRAMEBUFFERTEXTUREPROC                     _glNamedFramebufferTexture;
PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC                _glNamedFramebufferTextureLayer;
PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC                  _glNamedFramebufferDrawBuffer;
PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC                 _glNamedFramebufferDrawBuffers;
PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC                  _glNamedFramebufferReadBuffer;
PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC              _glInvalidateNamedFramebufferData;
PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC           _glInvalidateNamedFramebufferSubData;
PFNGLCLEARNAMEDFRAMEBUFFERIVPROC                     _glClearNamedFramebufferiv;
PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC                    _glClearNamedFramebufferuiv;
PFNGLCLEARNAMEDFRAMEBUFFERFVPROC                     _glClearNamedFramebufferfv;
PFNGLCLEARNAMEDFRAMEBUFFERFIPROC                     _glClearNamedFramebufferfi;
PFNGLBLITNAMEDFRAMEBUFFERPROC                        _glBlitNamedFramebuffer;
PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC                 _glCheckNamedFramebufferStatus;
PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC              _glGetNamedFramebufferParameteriv;
PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC    _glGetNamedFramebufferAttachmentParameteriv;
PFNGLCREATERENDERBUFFERSPROC                         _glCreateRenderbuffers;
PFNGLNAMEDRENDERBUFFERSTORAGEPROC                    _glNamedRenderbufferStorage;
PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC         _glNamedRenderbufferStorageMultisample;
PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC             _glGetNamedRenderbufferParameteriv;
PFNGLCREATETEXTURESPROC                              _glCreateTextures;
PFNGLTEXTUREBUFFERPROC                               _glTextureBuffer;
PFNGLTEXTUREBUFFERRANGEPROC                          _glTextureBufferRange;
PFNGLTEXTURESTORAGE1DPROC                            _glTextureStorage1D;
PFNGLTEXTURESTORAGE2DPROC                            _glTextureStorage2D;
PFNGLTEXTURESTORAGE3DPROC                            _glTextureStorage3D;
PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC                 _glTextureStorage2DMultisample;
PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC                 _glTextureStorage3DMultisample;
PFNGLTEXTURESUBIMAGE1DPROC                           _glTextureSubImage1D;
PFNGLTEXTURESUBIMAGE2DPROC                           _glTextureSubImage2D;
PFNGLTEXTURESUBIMAGE3DPROC                           _glTextureSubImage3D;
PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC                 _glCompressedTextureSubImage1D;
PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC                 _glCompressedTextureSubImage2D;
PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC                 _glCompressedTextureSubImage3D;
PFNGLCOPYTEXTURESUBIMAGE1DPROC                       _glCopyTextureSubImage1D;
PFNGLCOPYTEXTURESUBIMAGE2DPROC                       _glCopyTextureSubImage2D;
PFNGLCOPYTEXTURESUBIMAGE3DPROC                       _glCopyTextureSubImage3D;
PFNGLTEXTUREPARAMETERFPROC                           _glTextureParameterf;
PFNGLTEXTUREPARAMETERFVPROC                          _glTextureParameterfv;
PFNGLTEXTUREPARAMETERIPROC                           _glTextureParameteri;
PFNGLTEXTUREPARAMETERIIVPROC                         _glTextureParameterIiv;
PFNGLTEXTUREPARAMETERIUIVPROC                        _glTextureParameterIuiv;
PFNGLTEXTUREPARAMETERIVPROC                          _glTextureParameteriv;
PFNGLGENERATETEXTUREMIPMAPPROC                       _glGenerateTextureMipmap;
PFNGLBINDTEXTUREUNITPROC                             _glBindTextureUnit;
PFNGLGETTEXTUREIMAGEPROC                             _glGetTextureImage;
PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC                   _glGetCompressedTextureImage;
PFNGLGETTEXTURELEVELPARAMETERFVPROC                  _glGetTextureLevelParameterfv;
PFNGLGETTEXTURELEVELPARAMETERIVPROC                  _glGetTextureLevelParameteriv;
PFNGLGETTEXTUREPARAMETERFVPROC                       _glGetTextureParameterfv;
PFNGLGETTEXTUREPARAMETERIIVPROC                      _glGetTextureParameterIiv;
PFNGLGETTEXTUREPARAMETERIUIVPROC                     _glGetTextureParameterIuiv;
PFNGLGETTEXTUREPARAMETERIVPROC                       _glGetTextureParameteriv;
PFNGLCREATEVERTEXARRAYSPROC                          _glCreateVertexArrays;
PFNGLDISABLEVERTEXARRAYATTRIBPROC                    _glDisableVertexArrayAttrib;
PFNGLENABLEVERTEXARRAYATTRIBPROC                     _glEnableVertexArrayAttrib;
PFNGLVERTEXARRAYELEMENTBUFFERPROC                    _glVertexArrayElementBuffer;
PFNGLVERTEXARRAYVERTEXBUFFERPROC                     _glVertexArrayVertexBuffer;
PFNGLVERTEXARRAYVERTEXBUFFERSPROC                    _glVertexArrayVertexBuffers;
PFNGLVERTEXARRAYATTRIBBINDINGPROC                    _glVertexArrayAttribBinding;
PFNGLVERTEXARRAYATTRIBFORMATPROC                     _glVertexArrayAttribFormat;
PFNGLVERTEXARRAYATTRIBIFORMATPROC                    _glVertexArrayAttribIFormat;
PFNGLVERTEXARRAYATTRIBLFORMATPROC                    _glVertexArrayAttribLFormat;
PFNGLVERTEXARRAYBINDINGDIVISORPROC                   _glVertexArrayBindingDivisor;
PFNGLGETVERTEXARRAYIVPROC                            _glGetVertexArrayiv;
PFNGLGETVERTEXARRAYINDEXEDIVPROC                     _glGetVertexArrayIndexediv;
PFNGLGETVERTEXARRAYINDEXED64IVPROC                   _glGetVertexArrayIndexed64iv;
PFNGLCREATESAMPLERSPROC                              _glCreateSamplers;
PFNGLCREATEPROGRAMPIPELINESPROC                      _glCreateProgramPipelines;
PFNGLCREATEQUERIESPROC                               _glCreateQueries;
PFNGLGETQUERYBUFFEROBJECTI64VPROC                    _glGetQueryBufferObjecti64v;
PFNGLGETQUERYBUFFEROBJECTIVPROC                      _glGetQueryBufferObjectiv;
PFNGLGETQUERYBUFFEROBJECTUI64VPROC                   _glGetQueryBufferObjectui64v;
PFNGLGETQUERYBUFFEROBJECTUIVPROC                     _glGetQueryBufferObjectuiv;
PFNGLMEMORYBARRIERBYREGIONPROC                       _glMemoryBarrierByRegion;
PFNGLGETTEXTURESUBIMAGEPROC                          _glGetTextureSubImage;
PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC                _glGetCompressedTextureSubImage;
PFNGLGETGRAPHICSRESETSTATUSPROC                      _glGetGraphicsResetStatus;
PFNGLGETNCOMPRESSEDTEXIMAGEPROC                      _glGetnCompressedTexImage;
PFNGLGETNTEXIMAGEPROC                                _glGetnTexImage;
PFNGLGETNUNIFORMDVPROC                               _glGetnUniformdv;
PFNGLGETNUNIFORMFVPROC                               _glGetnUniformfv;
PFNGLGETNUNIFORMIVPROC                               _glGetnUniformiv;
PFNGLGETNUNIFORMUIVPROC                              _glGetnUniformuiv;
PFNGLREADNPIXELSPROC                                 _glReadnPixels;
PFNGLTEXTUREBARRIERPROC                              _glTextureBarrier;
PFNGLSPECIALIZESHADERPROC                            _glSpecializeShader;
PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC                _glMultiDrawArraysIndirectCount;
PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC              _glMultiDrawElementsIndirectCount;
PFNGLPOLYGONOFFSETCLAMPPROC                          _glPolygonOffsetClamp;
PFNGLPRIMITIVEBOUNDINGBOXARBPROC                     _glPrimitiveBoundingBoxARB;
PFNGLGETTEXTUREHANDLEARBPROC                         _glGetTextureHandleARB;
PFNGLGETTEXTURESAMPLERHANDLEARBPROC                  _glGetTextureSamplerHandleARB;
PFNGLMAKETEXTUREHANDLERESIDENTARBPROC                _glMakeTextureHandleResidentARB;
PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC             _glMakeTextureHandleNonResidentARB;
PFNGLGETIMAGEHANDLEARBPROC                           _glGetImageHandleARB;
PFNGLMAKEIMAGEHANDLERESIDENTARBPROC                  _glMakeImageHandleResidentARB;
PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC               _glMakeImageHandleNonResidentARB;
PFNGLUNIFORMHANDLEUI64ARBPROC                        _glUniformHandleui64ARB;
PFNGLUNIFORMHANDLEUI64VARBPROC                       _glUniformHandleui64vARB;
PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC                 _glProgramUniformHandleui64ARB;
PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC                _glProgramUniformHandleui64vARB;
PFNGLISTEXTUREHANDLERESIDENTARBPROC                  _glIsTextureHandleResidentARB;
PFNGLISIMAGEHANDLERESIDENTARBPROC                    _glIsImageHandleResidentARB;
PFNGLVERTEXATTRIBL1UI64ARBPROC                       _glVertexAttribL1ui64ARB;
PFNGLVERTEXATTRIBL1UI64VARBPROC                      _glVertexAttribL1ui64vARB;
PFNGLGETVERTEXATTRIBLUI64VARBPROC                    _glGetVertexAttribLui64vARB;
PFNGLCREATESYNCFROMCLEVENTARBPROC                    _glCreateSyncFromCLeventARB;
PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC                 _glDispatchComputeGroupSizeARB;
PFNGLDEBUGMESSAGECONTROLARBPROC                      _glDebugMessageControlARB;
PFNGLDEBUGMESSAGEINSERTARBPROC                       _glDebugMessageInsertARB;
PFNGLDEBUGMESSAGECALLBACKARBPROC                     _glDebugMessageCallbackARB;
PFNGLGETDEBUGMESSAGELOGARBPROC                       _glGetDebugMessageLogARB;
PFNGLBLENDEQUATIONIARBPROC                           _glBlendEquationiARB;
PFNGLBLENDEQUATIONSEPARATEIARBPROC                   _glBlendEquationSeparateiARB;
PFNGLBLENDFUNCIARBPROC                               _glBlendFunciARB;
PFNGLBLENDFUNCSEPARATEIARBPROC                       _glBlendFuncSeparateiARB;
PFNGLDRAWARRAYSINSTANCEDARBPROC                      _glDrawArraysInstancedARB;
PFNGLDRAWELEMENTSINSTANCEDARBPROC                    _glDrawElementsInstancedARB;
PFNGLPROGRAMPARAMETERIARBPROC                        _glProgramParameteriARB;
PFNGLFRAMEBUFFERTEXTUREARBPROC                       _glFramebufferTextureARB;
PFNGLFRAMEBUFFERTEXTURELAYERARBPROC                  _glFramebufferTextureLayerARB;
PFNGLFRAMEBUFFERTEXTUREFACEARBPROC                   _glFramebufferTextureFaceARB;
PFNGLSPECIALIZESHADERARBPROC                         _glSpecializeShaderARB;
PFNGLUNIFORM1I64ARBPROC                              _glUniform1i64ARB;
PFNGLUNIFORM2I64ARBPROC                              _glUniform2i64ARB;
PFNGLUNIFORM3I64ARBPROC                              _glUniform3i64ARB;
PFNGLUNIFORM4I64ARBPROC                              _glUniform4i64ARB;
PFNGLUNIFORM1I64VARBPROC                             _glUniform1i64vARB;
PFNGLUNIFORM2I64VARBPROC                             _glUniform2i64vARB;
PFNGLUNIFORM3I64VARBPROC                             _glUniform3i64vARB;
PFNGLUNIFORM4I64VARBPROC                             _glUniform4i64vARB;
PFNGLUNIFORM1UI64ARBPROC                             _glUniform1ui64ARB;
PFNGLUNIFORM2UI64ARBPROC                             _glUniform2ui64ARB;
PFNGLUNIFORM3UI64ARBPROC                             _glUniform3ui64ARB;
PFNGLUNIFORM4UI64ARBPROC                             _glUniform4ui64ARB;
PFNGLUNIFORM1UI64VARBPROC                            _glUniform1ui64vARB;
PFNGLUNIFORM2UI64VARBPROC                            _glUniform2ui64vARB;
PFNGLUNIFORM3UI64VARBPROC                            _glUniform3ui64vARB;
PFNGLUNIFORM4UI64VARBPROC                            _glUniform4ui64vARB;
PFNGLGETUNIFORMI64VARBPROC                           _glGetUniformi64vARB;
PFNGLGETUNIFORMUI64VARBPROC                          _glGetUniformui64vARB;
PFNGLGETNUNIFORMI64VARBPROC                          _glGetnUniformi64vARB;
PFNGLGETNUNIFORMUI64VARBPROC                         _glGetnUniformui64vARB;
PFNGLPROGRAMUNIFORM1I64ARBPROC                       _glProgramUniform1i64ARB;
PFNGLPROGRAMUNIFORM2I64ARBPROC                       _glProgramUniform2i64ARB;
PFNGLPROGRAMUNIFORM3I64ARBPROC                       _glProgramUniform3i64ARB;
PFNGLPROGRAMUNIFORM4I64ARBPROC                       _glProgramUniform4i64ARB;
PFNGLPROGRAMUNIFORM1I64VARBPROC                      _glProgramUniform1i64vARB;
PFNGLPROGRAMUNIFORM2I64VARBPROC                      _glProgramUniform2i64vARB;
PFNGLPROGRAMUNIFORM3I64VARBPROC                      _glProgramUniform3i64vARB;
PFNGLPROGRAMUNIFORM4I64VARBPROC                      _glProgramUniform4i64vARB;
PFNGLPROGRAMUNIFORM1UI64ARBPROC                      _glProgramUniform1ui64ARB;
PFNGLPROGRAMUNIFORM2UI64ARBPROC                      _glProgramUniform2ui64ARB;
PFNGLPROGRAMUNIFORM3UI64ARBPROC                      _glProgramUniform3ui64ARB;
PFNGLPROGRAMUNIFORM4UI64ARBPROC                      _glProgramUniform4ui64ARB;
PFNGLPROGRAMUNIFORM1UI64VARBPROC                     _glProgramUniform1ui64vARB;
PFNGLPROGRAMUNIFORM2UI64VARBPROC                     _glProgramUniform2ui64vARB;
PFNGLPROGRAMUNIFORM3UI64VARBPROC                     _glProgramUniform3ui64vARB;
PFNGLPROGRAMUNIFORM4UI64VARBPROC                     _glProgramUniform4ui64vARB;
PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC             _glMultiDrawArraysIndirectCountARB;
PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC           _glMultiDrawElementsIndirectCountARB;
PFNGLVERTEXATTRIBDIVISORARBPROC                      _glVertexAttribDivisorARB;
PFNGLMAXSHADERCOMPILERTHREADSARBPROC                 _glMaxShaderCompilerThreadsARB;
PFNGLGETGRAPHICSRESETSTATUSARBPROC                   _glGetGraphicsResetStatusARB;
PFNGLGETNTEXIMAGEARBPROC                             _glGetnTexImageARB;
PFNGLREADNPIXELSARBPROC                              _glReadnPixelsARB;
PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC                   _glGetnCompressedTexImageARB;
PFNGLGETNUNIFORMFVARBPROC                            _glGetnUniformfvARB;
PFNGLGETNUNIFORMIVARBPROC                            _glGetnUniformivARB;
PFNGLGETNUNIFORMUIVARBPROC                           _glGetnUniformuivARB;
PFNGLGETNUNIFORMDVARBPROC                            _glGetnUniformdvARB;
PFNGLFRAMEBUFFERSAMPLELOCATIONSFVARBPROC             _glFramebufferSampleLocationsfvARB;
PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVARBPROC        _glNamedFramebufferSampleLocationsfvARB;
PFNGLEVALUATEDEPTHVALUESARBPROC                      _glEvaluateDepthValuesARB;
PFNGLMINSAMPLESHADINGARBPROC                         _glMinSampleShadingARB;
PFNGLNAMEDSTRINGARBPROC                              _glNamedStringARB;
PFNGLDELETENAMEDSTRINGARBPROC                        _glDeleteNamedStringARB;
PFNGLCOMPILESHADERINCLUDEARBPROC                     _glCompileShaderIncludeARB;
PFNGLISNAMEDSTRINGARBPROC                            _glIsNamedStringARB;
PFNGLGETNAMEDSTRINGARBPROC                           _glGetNamedStringARB;
PFNGLGETNAMEDSTRINGIVARBPROC                         _glGetNamedStringivARB;
PFNGLBUFFERPAGECOMMITMENTARBPROC                     _glBufferPageCommitmentARB;
PFNGLNAMEDBUFFERPAGECOMMITMENTEXTPROC                _glNamedBufferPageCommitmentEXT;
PFNGLNAMEDBUFFERPAGECOMMITMENTARBPROC                _glNamedBufferPageCommitmentARB;
PFNGLTEXPAGECOMMITMENTARBPROC                        _glTexPageCommitmentARB;
PFNGLTEXBUFFERARBPROC                                _glTexBufferARB;
PFNGLBLENDBARRIERKHRPROC                             _glBlendBarrierKHR;
PFNGLMAXSHADERCOMPILERTHREADSKHRPROC                 _glMaxShaderCompilerThreadsKHR;
PFNGLGETPERFMONITORGROUPSAMDPROC                     _glGetPerfMonitorGroupsAMD;
PFNGLGETPERFMONITORCOUNTERSAMDPROC                   _glGetPerfMonitorCountersAMD;
PFNGLGETPERFMONITORGROUPSTRINGAMDPROC                _glGetPerfMonitorGroupStringAMD;
PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC              _glGetPerfMonitorCounterStringAMD;
PFNGLGETPERFMONITORCOUNTERINFOAMDPROC                _glGetPerfMonitorCounterInfoAMD;
PFNGLGENPERFMONITORSAMDPROC                          _glGenPerfMonitorsAMD;
PFNGLDELETEPERFMONITORSAMDPROC                       _glDeletePerfMonitorsAMD;
PFNGLSELECTPERFMONITORCOUNTERSAMDPROC                _glSelectPerfMonitorCountersAMD;
PFNGLBEGINPERFMONITORAMDPROC                         _glBeginPerfMonitorAMD;
PFNGLENDPERFMONITORAMDPROC                           _glEndPerfMonitorAMD;
PFNGLGETPERFMONITORCOUNTERDATAAMDPROC                _glGetPerfMonitorCounterDataAMD;
PFNGLLABELOBJECTEXTPROC                              _glLabelObjectEXT;
PFNGLGETOBJECTLABELEXTPROC                           _glGetObjectLabelEXT;
PFNGLINSERTEVENTMARKEREXTPROC                        _glInsertEventMarkerEXT;
PFNGLPUSHGROUPMARKEREXTPROC                          _glPushGroupMarkerEXT;
PFNGLPOPGROUPMARKEREXTPROC                           _glPopGroupMarkerEXT;
PFNGLMATRIXLOADFEXTPROC                              _glMatrixLoadfEXT;
PFNGLMATRIXLOADDEXTPROC                              _glMatrixLoaddEXT;
PFNGLMATRIXMULTFEXTPROC                              _glMatrixMultfEXT;
PFNGLMATRIXMULTDEXTPROC                              _glMatrixMultdEXT;
PFNGLMATRIXLOADIDENTITYEXTPROC                       _glMatrixLoadIdentityEXT;
PFNGLMATRIXROTATEFEXTPROC                            _glMatrixRotatefEXT;
PFNGLMATRIXROTATEDEXTPROC                            _glMatrixRotatedEXT;
PFNGLMATRIXSCALEFEXTPROC                             _glMatrixScalefEXT;
PFNGLMATRIXSCALEDEXTPROC                             _glMatrixScaledEXT;
PFNGLMATRIXTRANSLATEFEXTPROC                         _glMatrixTranslatefEXT;
PFNGLMATRIXTRANSLATEDEXTPROC                         _glMatrixTranslatedEXT;
PFNGLMATRIXFRUSTUMEXTPROC                            _glMatrixFrustumEXT;
PFNGLMATRIXORTHOEXTPROC                              _glMatrixOrthoEXT;
PFNGLMATRIXPOPEXTPROC                                _glMatrixPopEXT;
PFNGLMATRIXPUSHEXTPROC                               _glMatrixPushEXT;
PFNGLCLIENTATTRIBDEFAULTEXTPROC                      _glClientAttribDefaultEXT;
PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC                  _glPushClientAttribDefaultEXT;
PFNGLTEXTUREPARAMETERFEXTPROC                        _glTextureParameterfEXT;
PFNGLTEXTUREPARAMETERFVEXTPROC                       _glTextureParameterfvEXT;
PFNGLTEXTUREPARAMETERIEXTPROC                        _glTextureParameteriEXT;
PFNGLTEXTUREPARAMETERIVEXTPROC                       _glTextureParameterivEXT;
PFNGLTEXTUREIMAGE1DEXTPROC                           _glTextureImage1DEXT;
PFNGLTEXTUREIMAGE2DEXTPROC                           _glTextureImage2DEXT;
PFNGLTEXTURESUBIMAGE1DEXTPROC                        _glTextureSubImage1DEXT;
PFNGLTEXTURESUBIMAGE2DEXTPROC                        _glTextureSubImage2DEXT;
PFNGLCOPYTEXTUREIMAGE1DEXTPROC                       _glCopyTextureImage1DEXT;
PFNGLCOPYTEXTUREIMAGE2DEXTPROC                       _glCopyTextureImage2DEXT;
PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC                    _glCopyTextureSubImage1DEXT;
PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC                    _glCopyTextureSubImage2DEXT;
PFNGLGETTEXTUREIMAGEEXTPROC                          _glGetTextureImageEXT;
PFNGLGETTEXTUREPARAMETERFVEXTPROC                    _glGetTextureParameterfvEXT;
PFNGLGETTEXTUREPARAMETERIVEXTPROC                    _glGetTextureParameterivEXT;
PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC               _glGetTextureLevelParameterfvEXT;
PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC               _glGetTextureLevelParameterivEXT;
PFNGLTEXTUREIMAGE3DEXTPROC                           _glTextureImage3DEXT;
PFNGLTEXTURESUBIMAGE3DEXTPROC                        _glTextureSubImage3DEXT;
PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC                    _glCopyTextureSubImage3DEXT;
PFNGLBINDMULTITEXTUREEXTPROC                         _glBindMultiTextureEXT;
PFNGLMULTITEXCOORDPOINTEREXTPROC                     _glMultiTexCoordPointerEXT;
PFNGLMULTITEXENVFEXTPROC                             _glMultiTexEnvfEXT;
PFNGLMULTITEXENVFVEXTPROC                            _glMultiTexEnvfvEXT;
PFNGLMULTITEXENVIEXTPROC                             _glMultiTexEnviEXT;
PFNGLMULTITEXENVIVEXTPROC                            _glMultiTexEnvivEXT;
PFNGLMULTITEXGENDEXTPROC                             _glMultiTexGendEXT;
PFNGLMULTITEXGENDVEXTPROC                            _glMultiTexGendvEXT;
PFNGLMULTITEXGENFEXTPROC                             _glMultiTexGenfEXT;
PFNGLMULTITEXGENFVEXTPROC                            _glMultiTexGenfvEXT;
PFNGLMULTITEXGENIEXTPROC                             _glMultiTexGeniEXT;
PFNGLMULTITEXGENIVEXTPROC                            _glMultiTexGenivEXT;
PFNGLGETMULTITEXENVFVEXTPROC                         _glGetMultiTexEnvfvEXT;
PFNGLGETMULTITEXENVIVEXTPROC                         _glGetMultiTexEnvivEXT;
PFNGLGETMULTITEXGENDVEXTPROC                         _glGetMultiTexGendvEXT;
PFNGLGETMULTITEXGENFVEXTPROC                         _glGetMultiTexGenfvEXT;
PFNGLGETMULTITEXGENIVEXTPROC                         _glGetMultiTexGenivEXT;
PFNGLMULTITEXPARAMETERIEXTPROC                       _glMultiTexParameteriEXT;
PFNGLMULTITEXPARAMETERIVEXTPROC                      _glMultiTexParameterivEXT;
PFNGLMULTITEXPARAMETERFEXTPROC                       _glMultiTexParameterfEXT;
PFNGLMULTITEXPARAMETERFVEXTPROC                      _glMultiTexParameterfvEXT;
PFNGLMULTITEXIMAGE1DEXTPROC                          _glMultiTexImage1DEXT;
PFNGLMULTITEXIMAGE2DEXTPROC                          _glMultiTexImage2DEXT;
PFNGLMULTITEXSUBIMAGE1DEXTPROC                       _glMultiTexSubImage1DEXT;
PFNGLMULTITEXSUBIMAGE2DEXTPROC                       _glMultiTexSubImage2DEXT;
PFNGLCOPYMULTITEXIMAGE1DEXTPROC                      _glCopyMultiTexImage1DEXT;
PFNGLCOPYMULTITEXIMAGE2DEXTPROC                      _glCopyMultiTexImage2DEXT;
PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC                   _glCopyMultiTexSubImage1DEXT;
PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC                   _glCopyMultiTexSubImage2DEXT;
PFNGLGETMULTITEXIMAGEEXTPROC                         _glGetMultiTexImageEXT;
PFNGLGETMULTITEXPARAMETERFVEXTPROC                   _glGetMultiTexParameterfvEXT;
PFNGLGETMULTITEXPARAMETERIVEXTPROC                   _glGetMultiTexParameterivEXT;
PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC              _glGetMultiTexLevelParameterfvEXT;
PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC              _glGetMultiTexLevelParameterivEXT;
PFNGLMULTITEXIMAGE3DEXTPROC                          _glMultiTexImage3DEXT;
PFNGLMULTITEXSUBIMAGE3DEXTPROC                       _glMultiTexSubImage3DEXT;
PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC                   _glCopyMultiTexSubImage3DEXT;
PFNGLENABLECLIENTSTATEINDEXEDEXTPROC                 _glEnableClientStateIndexedEXT;
PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC                _glDisableClientStateIndexedEXT;
PFNGLGETFLOATINDEXEDVEXTPROC                         _glGetFloatIndexedvEXT;
PFNGLGETDOUBLEINDEXEDVEXTPROC                        _glGetDoubleIndexedvEXT;
PFNGLGETPOINTERINDEXEDVEXTPROC                       _glGetPointerIndexedvEXT;
PFNGLENABLEINDEXEDEXTPROC                            _glEnableIndexedEXT;
PFNGLDISABLEINDEXEDEXTPROC                           _glDisableIndexedEXT;
PFNGLISENABLEDINDEXEDEXTPROC                         _glIsEnabledIndexedEXT;
PFNGLGETINTEGERINDEXEDVEXTPROC                       _glGetIntegerIndexedvEXT;
PFNGLGETBOOLEANINDEXEDVEXTPROC                       _glGetBooleanIndexedvEXT;
PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC                 _glCompressedTextureImage3DEXT;
PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC                 _glCompressedTextureImage2DEXT;
PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC                 _glCompressedTextureImage1DEXT;
PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC              _glCompressedTextureSubImage3DEXT;
PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC              _glCompressedTextureSubImage2DEXT;
PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC              _glCompressedTextureSubImage1DEXT;
PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC                _glGetCompressedTextureImageEXT;
PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC                _glCompressedMultiTexImage3DEXT;
PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC                _glCompressedMultiTexImage2DEXT;
PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC                _glCompressedMultiTexImage1DEXT;
PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC             _glCompressedMultiTexSubImage3DEXT;
PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC             _glCompressedMultiTexSubImage2DEXT;
PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC             _glCompressedMultiTexSubImage1DEXT;
PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC               _glGetCompressedMultiTexImageEXT;
PFNGLMATRIXLOADTRANSPOSEFEXTPROC                     _glMatrixLoadTransposefEXT;
PFNGLMATRIXLOADTRANSPOSEDEXTPROC                     _glMatrixLoadTransposedEXT;
PFNGLMATRIXMULTTRANSPOSEFEXTPROC                     _glMatrixMultTransposefEXT;
PFNGLMATRIXMULTTRANSPOSEDEXTPROC                     _glMatrixMultTransposedEXT;
PFNGLNAMEDBUFFERDATAEXTPROC                          _glNamedBufferDataEXT;
PFNGLNAMEDBUFFERSUBDATAEXTPROC                       _glNamedBufferSubDataEXT;
PFNGLMAPNAMEDBUFFEREXTPROC                           _glMapNamedBufferEXT;
PFNGLUNMAPNAMEDBUFFEREXTPROC                         _glUnmapNamedBufferEXT;
PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC                _glGetNamedBufferParameterivEXT;
PFNGLGETNAMEDBUFFERPOINTERVEXTPROC                   _glGetNamedBufferPointervEXT;
PFNGLGETNAMEDBUFFERSUBDATAEXTPROC                    _glGetNamedBufferSubDataEXT;
PFNGLPROGRAMUNIFORM1FEXTPROC                         _glProgramUniform1fEXT;
PFNGLPROGRAMUNIFORM2FEXTPROC                         _glProgramUniform2fEXT;
PFNGLPROGRAMUNIFORM3FEXTPROC                         _glProgramUniform3fEXT;
PFNGLPROGRAMUNIFORM4FEXTPROC                         _glProgramUniform4fEXT;
PFNGLPROGRAMUNIFORM1IEXTPROC                         _glProgramUniform1iEXT;
PFNGLPROGRAMUNIFORM2IEXTPROC                         _glProgramUniform2iEXT;
PFNGLPROGRAMUNIFORM3IEXTPROC                         _glProgramUniform3iEXT;
PFNGLPROGRAMUNIFORM4IEXTPROC                         _glProgramUniform4iEXT;
PFNGLPROGRAMUNIFORM1FVEXTPROC                        _glProgramUniform1fvEXT;
PFNGLPROGRAMUNIFORM2FVEXTPROC                        _glProgramUniform2fvEXT;
PFNGLPROGRAMUNIFORM3FVEXTPROC                        _glProgramUniform3fvEXT;
PFNGLPROGRAMUNIFORM4FVEXTPROC                        _glProgramUniform4fvEXT;
PFNGLPROGRAMUNIFORM1IVEXTPROC                        _glProgramUniform1ivEXT;
PFNGLPROGRAMUNIFORM2IVEXTPROC                        _glProgramUniform2ivEXT;
PFNGLPROGRAMUNIFORM3IVEXTPROC                        _glProgramUniform3ivEXT;
PFNGLPROGRAMUNIFORM4IVEXTPROC                        _glProgramUniform4ivEXT;
PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC                  _glProgramUniformMatrix2fvEXT;
PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC                  _glProgramUniformMatrix3fvEXT;
PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC                  _glProgramUniformMatrix4fvEXT;
PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC                _glProgramUniformMatrix2x3fvEXT;
PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC                _glProgramUniformMatrix3x2fvEXT;
PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC                _glProgramUniformMatrix2x4fvEXT;
PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC                _glProgramUniformMatrix4x2fvEXT;
PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC                _glProgramUniformMatrix3x4fvEXT;
PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC                _glProgramUniformMatrix4x3fvEXT;
PFNGLTEXTUREBUFFEREXTPROC                            _glTextureBufferEXT;
PFNGLMULTITEXBUFFEREXTPROC                           _glMultiTexBufferEXT;
PFNGLTEXTUREPARAMETERIIVEXTPROC                      _glTextureParameterIivEXT;
PFNGLTEXTUREPARAMETERIUIVEXTPROC                     _glTextureParameterIuivEXT;
PFNGLGETTEXTUREPARAMETERIIVEXTPROC                   _glGetTextureParameterIivEXT;
PFNGLGETTEXTUREPARAMETERIUIVEXTPROC                  _glGetTextureParameterIuivEXT;
PFNGLMULTITEXPARAMETERIIVEXTPROC                     _glMultiTexParameterIivEXT;
PFNGLMULTITEXPARAMETERIUIVEXTPROC                    _glMultiTexParameterIuivEXT;
PFNGLGETMULTITEXPARAMETERIIVEXTPROC                  _glGetMultiTexParameterIivEXT;
PFNGLGETMULTITEXPARAMETERIUIVEXTPROC                 _glGetMultiTexParameterIuivEXT;
PFNGLPROGRAMUNIFORM1UIEXTPROC                        _glProgramUniform1uiEXT;
PFNGLPROGRAMUNIFORM2UIEXTPROC                        _glProgramUniform2uiEXT;
PFNGLPROGRAMUNIFORM3UIEXTPROC                        _glProgramUniform3uiEXT;
PFNGLPROGRAMUNIFORM4UIEXTPROC                        _glProgramUniform4uiEXT;
PFNGLPROGRAMUNIFORM1UIVEXTPROC                       _glProgramUniform1uivEXT;
PFNGLPROGRAMUNIFORM2UIVEXTPROC                       _glProgramUniform2uivEXT;
PFNGLPROGRAMUNIFORM3UIVEXTPROC                       _glProgramUniform3uivEXT;
PFNGLPROGRAMUNIFORM4UIVEXTPROC                       _glProgramUniform4uivEXT;
PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC           _glNamedProgramLocalParameters4fvEXT;
PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC            _glNamedProgramLocalParameterI4iEXT;
PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC           _glNamedProgramLocalParameterI4ivEXT;
PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC          _glNamedProgramLocalParametersI4ivEXT;
PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC           _glNamedProgramLocalParameterI4uiEXT;
PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC          _glNamedProgramLocalParameterI4uivEXT;
PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC         _glNamedProgramLocalParametersI4uivEXT;
PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC         _glGetNamedProgramLocalParameterIivEXT;
PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC        _glGetNamedProgramLocalParameterIuivEXT;
PFNGLENABLECLIENTSTATEIEXTPROC                       _glEnableClientStateiEXT;
PFNGLDISABLECLIENTSTATEIEXTPROC                      _glDisableClientStateiEXT;
PFNGLGETFLOATI_VEXTPROC                              _glGetFloati_vEXT;
PFNGLGETDOUBLEI_VEXTPROC                             _glGetDoublei_vEXT;
PFNGLGETPOINTERI_VEXTPROC                            _glGetPointeri_vEXT;
PFNGLNAMEDPROGRAMSTRINGEXTPROC                       _glNamedProgramStringEXT;
PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC             _glNamedProgramLocalParameter4dEXT;
PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC            _glNamedProgramLocalParameter4dvEXT;
PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC             _glNamedProgramLocalParameter4fEXT;
PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC            _glNamedProgramLocalParameter4fvEXT;
PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC          _glGetNamedProgramLocalParameterdvEXT;
PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC          _glGetNamedProgramLocalParameterfvEXT;
PFNGLGETNAMEDPROGRAMIVEXTPROC                        _glGetNamedProgramivEXT;
PFNGLGETNAMEDPROGRAMSTRINGEXTPROC                    _glGetNamedProgramStringEXT;
PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC                 _glNamedRenderbufferStorageEXT;
PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC          _glGetNamedRenderbufferParameterivEXT;
PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC      _glNamedRenderbufferStorageMultisampleEXT;
PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC _glNamedRenderbufferStorageMultisampleCoverageEXT;
PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC              _glCheckNamedFramebufferStatusEXT;
PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC                _glNamedFramebufferTexture1DEXT;
PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC                _glNamedFramebufferTexture2DEXT;
PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC                _glNamedFramebufferTexture3DEXT;
PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC             _glNamedFramebufferRenderbufferEXT;
PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC _glGetNamedFramebufferAttachmentParameterivEXT;
PFNGLGENERATETEXTUREMIPMAPEXTPROC                    _glGenerateTextureMipmapEXT;
PFNGLGENERATEMULTITEXMIPMAPEXTPROC                   _glGenerateMultiTexMipmapEXT;
PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC                    _glFramebufferDrawBufferEXT;
PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC                   _glFramebufferDrawBuffersEXT;
PFNGLFRAMEBUFFERREADBUFFEREXTPROC                    _glFramebufferReadBufferEXT;
PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC                _glGetFramebufferParameterivEXT;
PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC                   _glNamedCopyBufferSubDataEXT;
PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC                  _glNamedFramebufferTextureEXT;
PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC             _glNamedFramebufferTextureLayerEXT;
PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC              _glNamedFramebufferTextureFaceEXT;
PFNGLTEXTURERENDERBUFFEREXTPROC                      _glTextureRenderbufferEXT;
PFNGLMULTITEXRENDERBUFFEREXTPROC                     _glMultiTexRenderbufferEXT;
PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC                  _glVertexArrayVertexOffsetEXT;
PFNGLVERTEXARRAYCOLOROFFSETEXTPROC                   _glVertexArrayColorOffsetEXT;
PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC                _glVertexArrayEdgeFlagOffsetEXT;
PFNGLVERTEXARRAYINDEXOFFSETEXTPROC                   _glVertexArrayIndexOffsetEXT;
PFNGLVERTEXARRAYNORMALOFFSETEXTPROC                  _glVertexArrayNormalOffsetEXT;
PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC                _glVertexArrayTexCoordOffsetEXT;
PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC           _glVertexArrayMultiTexCoordOffsetEXT;
PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC                _glVertexArrayFogCoordOffsetEXT;
PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC          _glVertexArraySecondaryColorOffsetEXT;
PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC            _glVertexArrayVertexAttribOffsetEXT;
PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC           _glVertexArrayVertexAttribIOffsetEXT;
PFNGLENABLEVERTEXARRAYEXTPROC                        _glEnableVertexArrayEXT;
PFNGLDISABLEVERTEXARRAYEXTPROC                       _glDisableVertexArrayEXT;
PFNGLENABLEVERTEXARRAYATTRIBEXTPROC                  _glEnableVertexArrayAttribEXT;
PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC                 _glDisableVertexArrayAttribEXT;
PFNGLGETVERTEXARRAYINTEGERVEXTPROC                   _glGetVertexArrayIntegervEXT;
PFNGLGETVERTEXARRAYPOINTERVEXTPROC                   _glGetVertexArrayPointervEXT;
PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC                 _glGetVertexArrayIntegeri_vEXT;
PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC                 _glGetVertexArrayPointeri_vEXT;
PFNGLMAPNAMEDBUFFERRANGEEXTPROC                      _glMapNamedBufferRangeEXT;
PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC              _glFlushMappedNamedBufferRangeEXT;
PFNGLNAMEDBUFFERSTORAGEEXTPROC                       _glNamedBufferStorageEXT;
PFNGLCLEARNAMEDBUFFERDATAEXTPROC                     _glClearNamedBufferDataEXT;
PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC                  _glClearNamedBufferSubDataEXT;
PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC               _glNamedFramebufferParameteriEXT;
PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC           _glGetNamedFramebufferParameterivEXT;
PFNGLPROGRAMUNIFORM1DEXTPROC                         _glProgramUniform1dEXT;
PFNGLPROGRAMUNIFORM2DEXTPROC                         _glProgramUniform2dEXT;
PFNGLPROGRAMUNIFORM3DEXTPROC                         _glProgramUniform3dEXT;
PFNGLPROGRAMUNIFORM4DEXTPROC                         _glProgramUniform4dEXT;
PFNGLPROGRAMUNIFORM1DVEXTPROC                        _glProgramUniform1dvEXT;
PFNGLPROGRAMUNIFORM2DVEXTPROC                        _glProgramUniform2dvEXT;
PFNGLPROGRAMUNIFORM3DVEXTPROC                        _glProgramUniform3dvEXT;
PFNGLPROGRAMUNIFORM4DVEXTPROC                        _glProgramUniform4dvEXT;
PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC                  _glProgramUniformMatrix2dvEXT;
PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC                  _glProgramUniformMatrix3dvEXT;
PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC                  _glProgramUniformMatrix4dvEXT;
PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC                _glProgramUniformMatrix2x3dvEXT;
PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC                _glProgramUniformMatrix2x4dvEXT;
PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC                _glProgramUniformMatrix3x2dvEXT;
PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC                _glProgramUniformMatrix3x4dvEXT;
PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC                _glProgramUniformMatrix4x2dvEXT;
PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC                _glProgramUniformMatrix4x3dvEXT;
PFNGLTEXTUREBUFFERRANGEEXTPROC                       _glTextureBufferRangeEXT;
PFNGLTEXTURESTORAGE1DEXTPROC                         _glTextureStorage1DEXT;
PFNGLTEXTURESTORAGE2DEXTPROC                         _glTextureStorage2DEXT;
PFNGLTEXTURESTORAGE3DEXTPROC                         _glTextureStorage3DEXT;
PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC              _glTextureStorage2DMultisampleEXT;
PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC              _glTextureStorage3DMultisampleEXT;
PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC              _glVertexArrayBindVertexBufferEXT;
PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC            _glVertexArrayVertexAttribFormatEXT;
PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC           _glVertexArrayVertexAttribIFormatEXT;
PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC           _glVertexArrayVertexAttribLFormatEXT;
PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC           _glVertexArrayVertexAttribBindingEXT;
PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC          _glVertexArrayVertexBindingDivisorEXT;
PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC           _glVertexArrayVertexAttribLOffsetEXT;
PFNGLTEXTUREPAGECOMMITMENTEXTPROC                    _glTexturePageCommitmentEXT;
PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC           _glVertexArrayVertexAttribDivisorEXT;
PFNGLDRAWARRAYSINSTANCEDEXTPROC                      _glDrawArraysInstancedEXT;
PFNGLDRAWELEMENTSINSTANCEDEXTPROC                    _glDrawElementsInstancedEXT;
PFNGLPOLYGONOFFSETCLAMPEXTPROC                       _glPolygonOffsetClampEXT;
PFNGLRASTERSAMPLESEXTPROC                            _glRasterSamplesEXT;
PFNGLUSESHADERPROGRAMEXTPROC                         _glUseShaderProgramEXT;
PFNGLACTIVEPROGRAMEXTPROC                            _glActiveProgramEXT;
PFNGLCREATESHADERPROGRAMEXTPROC                      _glCreateShaderProgramEXT;
PFNGLWINDOWRECTANGLESEXTPROC                         _glWindowRectanglesEXT;
PFNGLAPPLYFRAMEBUFFERATTACHMENTCMAAINTELPROC         _glApplyFramebufferAttachmentCMAAINTEL;
PFNGLBEGINPERFQUERYINTELPROC                         _glBeginPerfQueryINTEL;
PFNGLCREATEPERFQUERYINTELPROC                        _glCreatePerfQueryINTEL;
PFNGLDELETEPERFQUERYINTELPROC                        _glDeletePerfQueryINTEL;
PFNGLENDPERFQUERYINTELPROC                           _glEndPerfQueryINTEL;
PFNGLGETFIRSTPERFQUERYIDINTELPROC                    _glGetFirstPerfQueryIdINTEL;
PFNGLGETNEXTPERFQUERYIDINTELPROC                     _glGetNextPerfQueryIdINTEL;
PFNGLGETPERFCOUNTERINFOINTELPROC                     _glGetPerfCounterInfoINTEL;
PFNGLGETPERFQUERYDATAINTELPROC                       _glGetPerfQueryDataINTEL;
PFNGLGETPERFQUERYIDBYNAMEINTELPROC                   _glGetPerfQueryIdByNameINTEL;
PFNGLGETPERFQUERYINFOINTELPROC                       _glGetPerfQueryInfoINTEL;
PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC           _glMultiDrawArraysIndirectBindlessNV;
PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC         _glMultiDrawElementsIndirectBindlessNV;
PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSCOUNTNVPROC      _glMultiDrawArraysIndirectBindlessCountNV;
PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSCOUNTNVPROC    _glMultiDrawElementsIndirectBindlessCountNV;
PFNGLGETTEXTUREHANDLENVPROC                          _glGetTextureHandleNV;
PFNGLGETTEXTURESAMPLERHANDLENVPROC                   _glGetTextureSamplerHandleNV;
PFNGLMAKETEXTUREHANDLERESIDENTNVPROC                 _glMakeTextureHandleResidentNV;
PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC              _glMakeTextureHandleNonResidentNV;
PFNGLGETIMAGEHANDLENVPROC                            _glGetImageHandleNV;
PFNGLMAKEIMAGEHANDLERESIDENTNVPROC                   _glMakeImageHandleResidentNV;
PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC                _glMakeImageHandleNonResidentNV;
PFNGLUNIFORMHANDLEUI64NVPROC                         _glUniformHandleui64NV;
PFNGLUNIFORMHANDLEUI64VNVPROC                        _glUniformHandleui64vNV;
PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC                  _glProgramUniformHandleui64NV;
PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC                 _glProgramUniformHandleui64vNV;
PFNGLISTEXTUREHANDLERESIDENTNVPROC                   _glIsTextureHandleResidentNV;
PFNGLISIMAGEHANDLERESIDENTNVPROC                     _glIsImageHandleResidentNV;
PFNGLBLENDPARAMETERINVPROC                           _glBlendParameteriNV;
PFNGLBLENDBARRIERNVPROC                              _glBlendBarrierNV;
PFNGLVIEWPORTPOSITIONWSCALENVPROC                    _glViewportPositionWScaleNV;
PFNGLCREATESTATESNVPROC                              _glCreateStatesNV;
PFNGLDELETESTATESNVPROC                              _glDeleteStatesNV;
PFNGLISSTATENVPROC                                   _glIsStateNV;
PFNGLSTATECAPTURENVPROC                              _glStateCaptureNV;
PFNGLGETCOMMANDHEADERNVPROC                          _glGetCommandHeaderNV;
PFNGLGETSTAGEINDEXNVPROC                             _glGetStageIndexNV;
PFNGLDRAWCOMMANDSNVPROC                              _glDrawCommandsNV;
PFNGLDRAWCOMMANDSADDRESSNVPROC                       _glDrawCommandsAddressNV;
PFNGLDRAWCOMMANDSSTATESNVPROC                        _glDrawCommandsStatesNV;
PFNGLDRAWCOMMANDSSTATESADDRESSNVPROC                 _glDrawCommandsStatesAddressNV;
PFNGLCREATECOMMANDLISTSNVPROC                        _glCreateCommandListsNV;
PFNGLDELETECOMMANDLISTSNVPROC                        _glDeleteCommandListsNV;
PFNGLISCOMMANDLISTNVPROC                             _glIsCommandListNV;
PFNGLLISTDRAWCOMMANDSSTATESCLIENTNVPROC              _glListDrawCommandsStatesClientNV;
PFNGLCOMMANDLISTSEGMENTSNVPROC                       _glCommandListSegmentsNV;
PFNGLCOMPILECOMMANDLISTNVPROC                        _glCompileCommandListNV;
PFNGLCALLCOMMANDLISTNVPROC                           _glCallCommandListNV;
PFNGLBEGINCONDITIONALRENDERNVPROC                    _glBeginConditionalRenderNV;
PFNGLENDCONDITIONALRENDERNVPROC                      _glEndConditionalRenderNV;
PFNGLSUBPIXELPRECISIONBIASNVPROC                     _glSubpixelPrecisionBiasNV;
PFNGLCONSERVATIVERASTERPARAMETERFNVPROC              _glConservativeRasterParameterfNV;
PFNGLCONSERVATIVERASTERPARAMETERINVPROC              _glConservativeRasterParameteriNV;
PFNGLDRAWVKIMAGENVPROC                               _glDrawVkImageNV;
PFNGLGETVKPROCADDRNVPROC                             _glGetVkProcAddrNV;
PFNGLWAITVKSEMAPHORENVPROC                           _glWaitVkSemaphoreNV;
PFNGLSIGNALVKSEMAPHORENVPROC                         _glSignalVkSemaphoreNV;
PFNGLSIGNALVKFENCENVPROC                             _glSignalVkFenceNV;
PFNGLFRAGMENTCOVERAGECOLORNVPROC                     _glFragmentCoverageColorNV;
PFNGLCOVERAGEMODULATIONTABLENVPROC                   _glCoverageModulationTableNV;
PFNGLGETCOVERAGEMODULATIONTABLENVPROC                _glGetCoverageModulationTableNV;
PFNGLCOVERAGEMODULATIONNVPROC                        _glCoverageModulationNV;
PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC    _glRenderbufferStorageMultisampleCoverageNV;
PFNGLUNIFORM1I64NVPROC                               _glUniform1i64NV;
PFNGLUNIFORM2I64NVPROC                               _glUniform2i64NV;
PFNGLUNIFORM3I64NVPROC                               _glUniform3i64NV;
PFNGLUNIFORM4I64NVPROC                               _glUniform4i64NV;
PFNGLUNIFORM1I64VNVPROC                              _glUniform1i64vNV;
PFNGLUNIFORM2I64VNVPROC                              _glUniform2i64vNV;
PFNGLUNIFORM3I64VNVPROC                              _glUniform3i64vNV;
PFNGLUNIFORM4I64VNVPROC                              _glUniform4i64vNV;
PFNGLUNIFORM1UI64NVPROC                              _glUniform1ui64NV;
PFNGLUNIFORM2UI64NVPROC                              _glUniform2ui64NV;
PFNGLUNIFORM3UI64NVPROC                              _glUniform3ui64NV;
PFNGLUNIFORM4UI64NVPROC                              _glUniform4ui64NV;
PFNGLUNIFORM1UI64VNVPROC                             _glUniform1ui64vNV;
PFNGLUNIFORM2UI64VNVPROC                             _glUniform2ui64vNV;
PFNGLUNIFORM3UI64VNVPROC                             _glUniform3ui64vNV;
PFNGLUNIFORM4UI64VNVPROC                             _glUniform4ui64vNV;
PFNGLGETUNIFORMI64VNVPROC                            _glGetUniformi64vNV;
PFNGLPROGRAMUNIFORM1I64NVPROC                        _glProgramUniform1i64NV;
PFNGLPROGRAMUNIFORM2I64NVPROC                        _glProgramUniform2i64NV;
PFNGLPROGRAMUNIFORM3I64NVPROC                        _glProgramUniform3i64NV;
PFNGLPROGRAMUNIFORM4I64NVPROC                        _glProgramUniform4i64NV;
PFNGLPROGRAMUNIFORM1I64VNVPROC                       _glProgramUniform1i64vNV;
PFNGLPROGRAMUNIFORM2I64VNVPROC                       _glProgramUniform2i64vNV;
PFNGLPROGRAMUNIFORM3I64VNVPROC                       _glProgramUniform3i64vNV;
PFNGLPROGRAMUNIFORM4I64VNVPROC                       _glProgramUniform4i64vNV;
PFNGLPROGRAMUNIFORM1UI64NVPROC                       _glProgramUniform1ui64NV;
PFNGLPROGRAMUNIFORM2UI64NVPROC                       _glProgramUniform2ui64NV;
PFNGLPROGRAMUNIFORM3UI64NVPROC                       _glProgramUniform3ui64NV;
PFNGLPROGRAMUNIFORM4UI64NVPROC                       _glProgramUniform4ui64NV;
PFNGLPROGRAMUNIFORM1UI64VNVPROC                      _glProgramUniform1ui64vNV;
PFNGLPROGRAMUNIFORM2UI64VNVPROC                      _glProgramUniform2ui64vNV;
PFNGLPROGRAMUNIFORM3UI64VNVPROC                      _glProgramUniform3ui64vNV;
PFNGLPROGRAMUNIFORM4UI64VNVPROC                      _glProgramUniform4ui64vNV;
PFNGLGETINTERNALFORMATSAMPLEIVNVPROC                 _glGetInternalformatSampleivNV;
PFNGLGENPATHSNVPROC                                  _glGenPathsNV;
PFNGLDELETEPATHSNVPROC                               _glDeletePathsNV;
PFNGLISPATHNVPROC                                    _glIsPathNV;
PFNGLPATHCOMMANDSNVPROC                              _glPathCommandsNV;
PFNGLPATHCOORDSNVPROC                                _glPathCoordsNV;
PFNGLPATHSUBCOMMANDSNVPROC                           _glPathSubCommandsNV;
PFNGLPATHSUBCOORDSNVPROC                             _glPathSubCoordsNV;
PFNGLPATHSTRINGNVPROC                                _glPathStringNV;
PFNGLPATHGLYPHSNVPROC                                _glPathGlyphsNV;
PFNGLPATHGLYPHRANGENVPROC                            _glPathGlyphRangeNV;
PFNGLWEIGHTPATHSNVPROC                               _glWeightPathsNV;
PFNGLCOPYPATHNVPROC                                  _glCopyPathNV;
PFNGLINTERPOLATEPATHSNVPROC                          _glInterpolatePathsNV;
PFNGLTRANSFORMPATHNVPROC                             _glTransformPathNV;
PFNGLPATHPARAMETERIVNVPROC                           _glPathParameterivNV;
PFNGLPATHPARAMETERINVPROC                            _glPathParameteriNV;
PFNGLPATHPARAMETERFVNVPROC                           _glPathParameterfvNV;
PFNGLPATHPARAMETERFNVPROC                            _glPathParameterfNV;
PFNGLPATHDASHARRAYNVPROC                             _glPathDashArrayNV;
PFNGLPATHSTENCILFUNCNVPROC                           _glPathStencilFuncNV;
PFNGLPATHSTENCILDEPTHOFFSETNVPROC                    _glPathStencilDepthOffsetNV;
PFNGLSTENCILFILLPATHNVPROC                           _glStencilFillPathNV;
PFNGLSTENCILSTROKEPATHNVPROC                         _glStencilStrokePathNV;
PFNGLSTENCILFILLPATHINSTANCEDNVPROC                  _glStencilFillPathInstancedNV;
PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC                _glStencilStrokePathInstancedNV;
PFNGLPATHCOVERDEPTHFUNCNVPROC                        _glPathCoverDepthFuncNV;
PFNGLCOVERFILLPATHNVPROC                             _glCoverFillPathNV;
PFNGLCOVERSTROKEPATHNVPROC                           _glCoverStrokePathNV;
PFNGLCOVERFILLPATHINSTANCEDNVPROC                    _glCoverFillPathInstancedNV;
PFNGLCOVERSTROKEPATHINSTANCEDNVPROC                  _glCoverStrokePathInstancedNV;
PFNGLGETPATHPARAMETERIVNVPROC                        _glGetPathParameterivNV;
PFNGLGETPATHPARAMETERFVNVPROC                        _glGetPathParameterfvNV;
PFNGLGETPATHCOMMANDSNVPROC                           _glGetPathCommandsNV;
PFNGLGETPATHCOORDSNVPROC                             _glGetPathCoordsNV;
PFNGLGETPATHDASHARRAYNVPROC                          _glGetPathDashArrayNV;
PFNGLGETPATHMETRICSNVPROC                            _glGetPathMetricsNV;
PFNGLGETPATHMETRICRANGENVPROC                        _glGetPathMetricRangeNV;
PFNGLGETPATHSPACINGNVPROC                            _glGetPathSpacingNV;
PFNGLISPOINTINFILLPATHNVPROC                         _glIsPointInFillPathNV;
PFNGLISPOINTINSTROKEPATHNVPROC                       _glIsPointInStrokePathNV;
PFNGLGETPATHLENGTHNVPROC                             _glGetPathLengthNV;
PFNGLPOINTALONGPATHNVPROC                            _glPointAlongPathNV;
PFNGLMATRIXLOAD3X2FNVPROC                            _glMatrixLoad3x2fNV;
PFNGLMATRIXLOAD3X3FNVPROC                            _glMatrixLoad3x3fNV;
PFNGLMATRIXLOADTRANSPOSE3X3FNVPROC                   _glMatrixLoadTranspose3x3fNV;
PFNGLMATRIXMULT3X2FNVPROC                            _glMatrixMult3x2fNV;
PFNGLMATRIXMULT3X3FNVPROC                            _glMatrixMult3x3fNV;
PFNGLMATRIXMULTTRANSPOSE3X3FNVPROC                   _glMatrixMultTranspose3x3fNV;
PFNGLSTENCILTHENCOVERFILLPATHNVPROC                  _glStencilThenCoverFillPathNV;
PFNGLSTENCILTHENCOVERSTROKEPATHNVPROC                _glStencilThenCoverStrokePathNV;
PFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC         _glStencilThenCoverFillPathInstancedNV;
PFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC       _glStencilThenCoverStrokePathInstancedNV;
PFNGLPATHGLYPHINDEXRANGENVPROC                       _glPathGlyphIndexRangeNV;
PFNGLPATHGLYPHINDEXARRAYNVPROC                       _glPathGlyphIndexArrayNV;
PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC                 _glPathMemoryGlyphIndexArrayNV;
PFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC               _glProgramPathFragmentInputGenNV;
PFNGLGETPROGRAMRESOURCEFVNVPROC                      _glGetProgramResourcefvNV;
PFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROC              _glFramebufferSampleLocationsfvNV;
PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROC         _glNamedFramebufferSampleLocationsfvNV;
PFNGLRESOLVEDEPTHVALUESNVPROC                        _glResolveDepthValuesNV;
PFNGLMAKEBUFFERRESIDENTNVPROC                        _glMakeBufferResidentNV;
PFNGLMAKEBUFFERNONRESIDENTNVPROC                     _glMakeBufferNonResidentNV;
PFNGLISBUFFERRESIDENTNVPROC                          _glIsBufferResidentNV;
PFNGLMAKENAMEDBUFFERRESIDENTNVPROC                   _glMakeNamedBufferResidentNV;
PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC                _glMakeNamedBufferNonResidentNV;
PFNGLISNAMEDBUFFERRESIDENTNVPROC                     _glIsNamedBufferResidentNV;
PFNGLGETBUFFERPARAMETERUI64VNVPROC                   _glGetBufferParameterui64vNV;
PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC              _glGetNamedBufferParameterui64vNV;
PFNGLGETINTEGERUI64VNVPROC                           _glGetIntegerui64vNV;
PFNGLUNIFORMUI64NVPROC                               _glUniformui64NV;
PFNGLUNIFORMUI64VNVPROC                              _glUniformui64vNV;
PFNGLGETUNIFORMUI64VNVPROC                           _glGetUniformui64vNV;
PFNGLPROGRAMUNIFORMUI64NVPROC                        _glProgramUniformui64NV;
PFNGLPROGRAMUNIFORMUI64VNVPROC                       _glProgramUniformui64vNV;
PFNGLTEXTUREBARRIERNVPROC                            _glTextureBarrierNV;
PFNGLVERTEXATTRIBL1I64NVPROC                         _glVertexAttribL1i64NV;
PFNGLVERTEXATTRIBL2I64NVPROC                         _glVertexAttribL2i64NV;
PFNGLVERTEXATTRIBL3I64NVPROC                         _glVertexAttribL3i64NV;
PFNGLVERTEXATTRIBL4I64NVPROC                         _glVertexAttribL4i64NV;
PFNGLVERTEXATTRIBL1I64VNVPROC                        _glVertexAttribL1i64vNV;
PFNGLVERTEXATTRIBL2I64VNVPROC                        _glVertexAttribL2i64vNV;
PFNGLVERTEXATTRIBL3I64VNVPROC                        _glVertexAttribL3i64vNV;
PFNGLVERTEXATTRIBL4I64VNVPROC                        _glVertexAttribL4i64vNV;
PFNGLVERTEXATTRIBL1UI64NVPROC                        _glVertexAttribL1ui64NV;
PFNGLVERTEXATTRIBL2UI64NVPROC                        _glVertexAttribL2ui64NV;
PFNGLVERTEXATTRIBL3UI64NVPROC                        _glVertexAttribL3ui64NV;
PFNGLVERTEXATTRIBL4UI64NVPROC                        _glVertexAttribL4ui64NV;
PFNGLVERTEXATTRIBL1UI64VNVPROC                       _glVertexAttribL1ui64vNV;
PFNGLVERTEXATTRIBL2UI64VNVPROC                       _glVertexAttribL2ui64vNV;
PFNGLVERTEXATTRIBL3UI64VNVPROC                       _glVertexAttribL3ui64vNV;
PFNGLVERTEXATTRIBL4UI64VNVPROC                       _glVertexAttribL4ui64vNV;
PFNGLGETVERTEXATTRIBLI64VNVPROC                      _glGetVertexAttribLi64vNV;
PFNGLGETVERTEXATTRIBLUI64VNVPROC                     _glGetVertexAttribLui64vNV;
PFNGLVERTEXATTRIBLFORMATNVPROC                       _glVertexAttribLFormatNV;
PFNGLBUFFERADDRESSRANGENVPROC                        _glBufferAddressRangeNV;
PFNGLVERTEXFORMATNVPROC                              _glVertexFormatNV;
PFNGLNORMALFORMATNVPROC                              _glNormalFormatNV;
PFNGLCOLORFORMATNVPROC                               _glColorFormatNV;
PFNGLINDEXFORMATNVPROC                               _glIndexFormatNV;
PFNGLTEXCOORDFORMATNVPROC                            _glTexCoordFormatNV;
PFNGLEDGEFLAGFORMATNVPROC                            _glEdgeFlagFormatNV;
PFNGLSECONDARYCOLORFORMATNVPROC                      _glSecondaryColorFormatNV;
PFNGLFOGCOORDFORMATNVPROC                            _glFogCoordFormatNV;
PFNGLVERTEXATTRIBFORMATNVPROC                        _glVertexAttribFormatNV;
PFNGLVERTEXATTRIBIFORMATNVPROC                       _glVertexAttribIFormatNV;
PFNGLGETINTEGERUI64I_VNVPROC                         _glGetIntegerui64i_vNV;
PFNGLVIEWPORTSWIZZLENVPROC                           _glViewportSwizzleNV;
PFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC              _glFramebufferTextureMultiviewOVR;
// }}} End OpenGL function pointers

#ifndef NDEBUG
// Debug GL API implementations {{{
void glCullFace(GLenum mode) {
  _glCullFace(mode);
  PROTO3D_CHECK_GL_ERROR("glCullFace");
}
void glFrontFace(GLenum mode) {
  _glFrontFace(mode);
  PROTO3D_CHECK_GL_ERROR("glFrontFace");
}
void glHint(GLenum target, GLenum mode) {
  _glHint(target, mode);
  PROTO3D_CHECK_GL_ERROR("glHint");
}
void glLineWidth(GLfloat width) {
  _glLineWidth(width);
  PROTO3D_CHECK_GL_ERROR("glLineWidth");
}
void glPointSize(GLfloat size) {
  _glPointSize(size);
  PROTO3D_CHECK_GL_ERROR("glPointSize");
}
void glPolygonMode(GLenum face, GLenum mode) {
  _glPolygonMode(face, mode);
  PROTO3D_CHECK_GL_ERROR("glPolygonMode");
}
void glScissor(GLint x, GLint y, GLsizei width, GLsizei height) {
  _glScissor(x, y, width, height);
  PROTO3D_CHECK_GL_ERROR("glScissor");
}
void glTexParameterf(GLenum target, GLenum pname, GLfloat param) {
  _glTexParameterf(target, pname, param);
  PROTO3D_CHECK_GL_ERROR("glTexParameterf");
}
void glTexParameterfv(GLenum target, GLenum pname, const GLfloat *params) {
  _glTexParameterfv(target, pname, params);
  PROTO3D_CHECK_GL_ERROR("glTexParameterfv");
}
void glTexParameteri(GLenum target, GLenum pname, GLint param) {
  _glTexParameteri(target, pname, param);
  PROTO3D_CHECK_GL_ERROR("glTexParameteri");
}
void glTexParameteriv(GLenum target, GLenum pname, const GLint *params) {
  _glTexParameteriv(target, pname, params);
  PROTO3D_CHECK_GL_ERROR("glTexParameteriv");
}
void glTexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels) {
  _glTexImage1D(target, level, internalformat, width, border, format, type, pixels);
  PROTO3D_CHECK_GL_ERROR("glTexImage1D");
}
void glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels) {
  _glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels);
  PROTO3D_CHECK_GL_ERROR("glTexImage2D");
}
void glDrawBuffer(GLenum buf) {
  _glDrawBuffer(buf);
  PROTO3D_CHECK_GL_ERROR("glDrawBuffer");
}
void glClear(GLbitfield mask) {
  _glClear(mask);
  PROTO3D_CHECK_GL_ERROR("glClear");
}
void glClearColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {
  _glClearColor(red, green, blue, alpha);
  PROTO3D_CHECK_GL_ERROR("glClearColor");
}
void glClearStencil(GLint s) {
  _glClearStencil(s);
  PROTO3D_CHECK_GL_ERROR("glClearStencil");
}
void glClearDepth(GLdouble depth) {
  _glClearDepth(depth);
  PROTO3D_CHECK_GL_ERROR("glClearDepth");
}
void glStencilMask(GLuint mask) {
  _glStencilMask(mask);
  PROTO3D_CHECK_GL_ERROR("glStencilMask");
}
void glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha) {
  _glColorMask(red, green, blue, alpha);
  PROTO3D_CHECK_GL_ERROR("glColorMask");
}
void glDepthMask(GLboolean flag) {
  _glDepthMask(flag);
  PROTO3D_CHECK_GL_ERROR("glDepthMask");
}
void glDisable(GLenum cap) {
  _glDisable(cap);
  PROTO3D_CHECK_GL_ERROR("glDisable");
}
void glEnable(GLenum cap) {
  _glEnable(cap);
  PROTO3D_CHECK_GL_ERROR("glEnable");
}
void glFinish(void) {
  _glFinish();
  PROTO3D_CHECK_GL_ERROR("glFinish");
}
void glFlush(void) {
  _glFlush();
  PROTO3D_CHECK_GL_ERROR("glFlush");
}
void glBlendFunc(GLenum sfactor, GLenum dfactor) {
  _glBlendFunc(sfactor, dfactor);
  PROTO3D_CHECK_GL_ERROR("glBlendFunc");
}
void glLogicOp(GLenum opcode) {
  _glLogicOp(opcode);
  PROTO3D_CHECK_GL_ERROR("glLogicOp");
}
void glStencilFunc(GLenum func, GLint ref, GLuint mask) {
  _glStencilFunc(func, ref, mask);
  PROTO3D_CHECK_GL_ERROR("glStencilFunc");
}
void glStencilOp(GLenum fail, GLenum zfail, GLenum zpass) {
  _glStencilOp(fail, zfail, zpass);
  PROTO3D_CHECK_GL_ERROR("glStencilOp");
}
void glDepthFunc(GLenum func) {
  _glDepthFunc(func);
  PROTO3D_CHECK_GL_ERROR("glDepthFunc");
}
void glPixelStoref(GLenum pname, GLfloat param) {
  _glPixelStoref(pname, param);
  PROTO3D_CHECK_GL_ERROR("glPixelStoref");
}
void glPixelStorei(GLenum pname, GLint param) {
  _glPixelStorei(pname, param);
  PROTO3D_CHECK_GL_ERROR("glPixelStorei");
}
void glReadBuffer(GLenum src) {
  _glReadBuffer(src);
  PROTO3D_CHECK_GL_ERROR("glReadBuffer");
}
void glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels) {
  _glReadPixels(x, y, width, height, format, type, pixels);
  PROTO3D_CHECK_GL_ERROR("glReadPixels");
}
void glGetBooleanv(GLenum pname, GLboolean *data) {
  _glGetBooleanv(pname, data);
  PROTO3D_CHECK_GL_ERROR("glGetBooleanv");
}
void glGetDoublev(GLenum pname, GLdouble *data) {
  _glGetDoublev(pname, data);
  PROTO3D_CHECK_GL_ERROR("glGetDoublev");
}
GLenum glGetError(void) {
  GLenum ret = _glGetError();
  return ret;
}
void glGetFloatv(GLenum pname, GLfloat *data) {
  _glGetFloatv(pname, data);
  PROTO3D_CHECK_GL_ERROR("glGetFloatv");
}
void glGetIntegerv(GLenum pname, GLint *data) {
  _glGetIntegerv(pname, data);
  PROTO3D_CHECK_GL_ERROR("glGetIntegerv");
}
const GLubyte *glGetString(GLenum name) {
  const GLubyte *ret = _glGetString(name);
  PROTO3D_CHECK_GL_ERROR("glGetString");
  return ret;
}
void glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, void *pixels) {
  _glGetTexImage(target, level, format, type, pixels);
  PROTO3D_CHECK_GL_ERROR("glGetTexImage");
}
void glGetTexParameterfv(GLenum target, GLenum pname, GLfloat *params) {
  _glGetTexParameterfv(target, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetTexParameterfv");
}
void glGetTexParameteriv(GLenum target, GLenum pname, GLint *params) {
  _glGetTexParameteriv(target, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetTexParameteriv");
}
void glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat *params) {
  _glGetTexLevelParameterfv(target, level, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetTexLevelParameterfv");
}
void glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint *params) {
  _glGetTexLevelParameteriv(target, level, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetTexLevelParameteriv");
}
GLboolean glIsEnabled(GLenum cap) {
  GLboolean ret = _glIsEnabled(cap);
  PROTO3D_CHECK_GL_ERROR("glIsEnabled");
  return ret;
}
void glDepthRange(GLdouble near, GLdouble far) {
  _glDepthRange(near, far);
  PROTO3D_CHECK_GL_ERROR("glDepthRange");
}
void glViewport(GLint x, GLint y, GLsizei width, GLsizei height) {
  _glViewport(x, y, width, height);
  PROTO3D_CHECK_GL_ERROR("glViewport");
}
void glDrawArrays(GLenum mode, GLint first, GLsizei count) {
  _glDrawArrays(mode, first, count);
  PROTO3D_CHECK_GL_ERROR("glDrawArrays");
}
void glDrawElements(GLenum mode, GLsizei count, GLenum type, const void *indices) {
  _glDrawElements(mode, count, type, indices);
  PROTO3D_CHECK_GL_ERROR("glDrawElements");
}
void glGetPointerv(GLenum pname, void **params) {
  _glGetPointerv(pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetPointerv");
}
void glPolygonOffset(GLfloat factor, GLfloat units) {
  _glPolygonOffset(factor, units);
  PROTO3D_CHECK_GL_ERROR("glPolygonOffset");
}
void glCopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) {
  _glCopyTexImage1D(target, level, internalformat, x, y, width, border);
  PROTO3D_CHECK_GL_ERROR("glCopyTexImage1D");
}
void glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) {
  _glCopyTexImage2D(target, level, internalformat, x, y, width, height, border);
  PROTO3D_CHECK_GL_ERROR("glCopyTexImage2D");
}
void glCopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) {
  _glCopyTexSubImage1D(target, level, xoffset, x, y, width);
  PROTO3D_CHECK_GL_ERROR("glCopyTexSubImage1D");
}
void glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
  _glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);
  PROTO3D_CHECK_GL_ERROR("glCopyTexSubImage2D");
}
void glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels) {
  _glTexSubImage1D(target, level, xoffset, width, format, type, pixels);
  PROTO3D_CHECK_GL_ERROR("glTexSubImage1D");
}
void glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels) {
  _glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels);
  PROTO3D_CHECK_GL_ERROR("glTexSubImage2D");
}
void glBindTexture(GLenum target, GLuint texture) {
  _glBindTexture(target, texture);
  PROTO3D_CHECK_GL_ERROR("glBindTexture");
}
void glDeleteTextures(GLsizei n, const GLuint *textures) {
  _glDeleteTextures(n, textures);
  PROTO3D_CHECK_GL_ERROR("glDeleteTextures");
}
void glGenTextures(GLsizei n, GLuint *textures) {
  _glGenTextures(n, textures);
  PROTO3D_CHECK_GL_ERROR("glGenTextures");
}
GLboolean glIsTexture(GLuint texture) {
  GLboolean ret = _glIsTexture(texture);
  PROTO3D_CHECK_GL_ERROR("glIsTexture");
  return ret;
}
void glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices) {
  _glDrawRangeElements(mode, start, end, count, type, indices);
  PROTO3D_CHECK_GL_ERROR("glDrawRangeElements");
}
void glTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels) {
  _glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels);
  PROTO3D_CHECK_GL_ERROR("glTexImage3D");
}
void glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels) {
  _glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
  PROTO3D_CHECK_GL_ERROR("glTexSubImage3D");
}
void glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
  _glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height);
  PROTO3D_CHECK_GL_ERROR("glCopyTexSubImage3D");
}
void glActiveTexture(GLenum texture) {
  _glActiveTexture(texture);
  PROTO3D_CHECK_GL_ERROR("glActiveTexture");
}
void glSampleCoverage(GLfloat value, GLboolean invert) {
  _glSampleCoverage(value, invert);
  PROTO3D_CHECK_GL_ERROR("glSampleCoverage");
}
void glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data) {
  _glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data);
  PROTO3D_CHECK_GL_ERROR("glCompressedTexImage3D");
}
void glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data) {
  _glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data);
  PROTO3D_CHECK_GL_ERROR("glCompressedTexImage2D");
}
void glCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data) {
  _glCompressedTexImage1D(target, level, internalformat, width, border, imageSize, data);
  PROTO3D_CHECK_GL_ERROR("glCompressedTexImage1D");
}
void glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data) {
  _glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
  PROTO3D_CHECK_GL_ERROR("glCompressedTexSubImage3D");
}
void glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data) {
  _glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data);
  PROTO3D_CHECK_GL_ERROR("glCompressedTexSubImage2D");
}
void glCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data) {
  _glCompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data);
  PROTO3D_CHECK_GL_ERROR("glCompressedTexSubImage1D");
}
void glGetCompressedTexImage(GLenum target, GLint level, void *img) {
  _glGetCompressedTexImage(target, level, img);
  PROTO3D_CHECK_GL_ERROR("glGetCompressedTexImage");
}
void glBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) {
  _glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
  PROTO3D_CHECK_GL_ERROR("glBlendFuncSeparate");
}
void glMultiDrawArrays(GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount) {
  _glMultiDrawArrays(mode, first, count, drawcount);
  PROTO3D_CHECK_GL_ERROR("glMultiDrawArrays");
}
void glMultiDrawElements(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount) {
  _glMultiDrawElements(mode, count, type, indices, drawcount);
  PROTO3D_CHECK_GL_ERROR("glMultiDrawElements");
}
void glPointParameterf(GLenum pname, GLfloat param) {
  _glPointParameterf(pname, param);
  PROTO3D_CHECK_GL_ERROR("glPointParameterf");
}
void glPointParameterfv(GLenum pname, const GLfloat *params) {
  _glPointParameterfv(pname, params);
  PROTO3D_CHECK_GL_ERROR("glPointParameterfv");
}
void glPointParameteri(GLenum pname, GLint param) {
  _glPointParameteri(pname, param);
  PROTO3D_CHECK_GL_ERROR("glPointParameteri");
}
void glPointParameteriv(GLenum pname, const GLint *params) {
  _glPointParameteriv(pname, params);
  PROTO3D_CHECK_GL_ERROR("glPointParameteriv");
}
void glBlendColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {
  _glBlendColor(red, green, blue, alpha);
  PROTO3D_CHECK_GL_ERROR("glBlendColor");
}
void glBlendEquation(GLenum mode) {
  _glBlendEquation(mode);
  PROTO3D_CHECK_GL_ERROR("glBlendEquation");
}
void glGenQueries(GLsizei n, GLuint *ids) {
  _glGenQueries(n, ids);
  PROTO3D_CHECK_GL_ERROR("glGenQueries");
}
void glDeleteQueries(GLsizei n, const GLuint *ids) {
  _glDeleteQueries(n, ids);
  PROTO3D_CHECK_GL_ERROR("glDeleteQueries");
}
GLboolean glIsQuery(GLuint id) {
  GLboolean ret = _glIsQuery(id);
  PROTO3D_CHECK_GL_ERROR("glIsQuery");
  return ret;
}
void glBeginQuery(GLenum target, GLuint id) {
  _glBeginQuery(target, id);
  PROTO3D_CHECK_GL_ERROR("glBeginQuery");
}
void glEndQuery(GLenum target) {
  _glEndQuery(target);
  PROTO3D_CHECK_GL_ERROR("glEndQuery");
}
void glGetQueryiv(GLenum target, GLenum pname, GLint *params) {
  _glGetQueryiv(target, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetQueryiv");
}
void glGetQueryObjectiv(GLuint id, GLenum pname, GLint *params) {
  _glGetQueryObjectiv(id, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetQueryObjectiv");
}
void glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint *params) {
  _glGetQueryObjectuiv(id, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetQueryObjectuiv");
}
void glBindBuffer(GLenum target, GLuint buffer) {
  _glBindBuffer(target, buffer);
  PROTO3D_CHECK_GL_ERROR("glBindBuffer");
}
void glDeleteBuffers(GLsizei n, const GLuint *buffers) {
  _glDeleteBuffers(n, buffers);
  PROTO3D_CHECK_GL_ERROR("glDeleteBuffers");
}
void glGenBuffers(GLsizei n, GLuint *buffers) {
  _glGenBuffers(n, buffers);
  PROTO3D_CHECK_GL_ERROR("glGenBuffers");
}
GLboolean glIsBuffer(GLuint buffer) {
  GLboolean ret = _glIsBuffer(buffer);
  PROTO3D_CHECK_GL_ERROR("glIsBuffer");
  return ret;
}
void glBufferData(GLenum target, GLsizeiptr size, const void *data, GLenum usage) {
  _glBufferData(target, size, data, usage);
  PROTO3D_CHECK_GL_ERROR("glBufferData");
}
void glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const void *data) {
  _glBufferSubData(target, offset, size, data);
  PROTO3D_CHECK_GL_ERROR("glBufferSubData");
}
void glGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, void *data) {
  _glGetBufferSubData(target, offset, size, data);
  PROTO3D_CHECK_GL_ERROR("glGetBufferSubData");
}
void *glMapBuffer(GLenum target, GLenum access) {
  void *ret = _glMapBuffer(target, access);
  PROTO3D_CHECK_GL_ERROR("glMapBuffer");
  return ret;
}
GLboolean glUnmapBuffer(GLenum target) {
  GLboolean ret = _glUnmapBuffer(target);
  PROTO3D_CHECK_GL_ERROR("glUnmapBuffer");
  return ret;
}
void glGetBufferParameteriv(GLenum target, GLenum pname, GLint *params) {
  _glGetBufferParameteriv(target, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetBufferParameteriv");
}
void glGetBufferPointerv(GLenum target, GLenum pname, void **params) {
  _glGetBufferPointerv(target, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetBufferPointerv");
}
void glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha) {
  _glBlendEquationSeparate(modeRGB, modeAlpha);
  PROTO3D_CHECK_GL_ERROR("glBlendEquationSeparate");
}
void glDrawBuffers(GLsizei n, const GLenum *bufs) {
  _glDrawBuffers(n, bufs);
  PROTO3D_CHECK_GL_ERROR("glDrawBuffers");
}
void glStencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass) {
  _glStencilOpSeparate(face, sfail, dpfail, dppass);
  PROTO3D_CHECK_GL_ERROR("glStencilOpSeparate");
}
void glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask) {
  _glStencilFuncSeparate(face, func, ref, mask);
  PROTO3D_CHECK_GL_ERROR("glStencilFuncSeparate");
}
void glStencilMaskSeparate(GLenum face, GLuint mask) {
  _glStencilMaskSeparate(face, mask);
  PROTO3D_CHECK_GL_ERROR("glStencilMaskSeparate");
}
void glAttachShader(GLuint program, GLuint shader) {
  _glAttachShader(program, shader);
  PROTO3D_CHECK_GL_ERROR("glAttachShader");
}
void glBindAttribLocation(GLuint program, GLuint index, const GLchar *name) {
  _glBindAttribLocation(program, index, name);
  PROTO3D_CHECK_GL_ERROR("glBindAttribLocation");
}
void glCompileShader(GLuint shader) {
  _glCompileShader(shader);
  PROTO3D_CHECK_GL_ERROR("glCompileShader");
}
GLuint glCreateProgram(void) {
  GLuint ret = _glCreateProgram();
  PROTO3D_CHECK_GL_ERROR("glCreateProgram");
  return ret;
}
GLuint glCreateShader(GLenum type) {
  GLuint ret = _glCreateShader(type);
  PROTO3D_CHECK_GL_ERROR("glCreateShader");
  return ret;
}
void glDeleteProgram(GLuint program) {
  _glDeleteProgram(program);
  PROTO3D_CHECK_GL_ERROR("glDeleteProgram");
}
void glDeleteShader(GLuint shader) {
  _glDeleteShader(shader);
  PROTO3D_CHECK_GL_ERROR("glDeleteShader");
}
void glDetachShader(GLuint program, GLuint shader) {
  _glDetachShader(program, shader);
  PROTO3D_CHECK_GL_ERROR("glDetachShader");
}
void glDisableVertexAttribArray(GLuint index) {
  _glDisableVertexAttribArray(index);
  PROTO3D_CHECK_GL_ERROR("glDisableVertexAttribArray");
}
void glEnableVertexAttribArray(GLuint index) {
  _glEnableVertexAttribArray(index);
  PROTO3D_CHECK_GL_ERROR("glEnableVertexAttribArray");
}
void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name) {
  _glGetActiveAttrib(program, index, bufSize, length, size, type, name);
  PROTO3D_CHECK_GL_ERROR("glGetActiveAttrib");
}
void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name) {
  _glGetActiveUniform(program, index, bufSize, length, size, type, name);
  PROTO3D_CHECK_GL_ERROR("glGetActiveUniform");
}
void glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders) {
  _glGetAttachedShaders(program, maxCount, count, shaders);
  PROTO3D_CHECK_GL_ERROR("glGetAttachedShaders");
}
GLint glGetAttribLocation(GLuint program, const GLchar *name) {
  GLint ret = _glGetAttribLocation(program, name);
  PROTO3D_CHECK_GL_ERROR("glGetAttribLocation");
  return ret;
}
void glGetProgramiv(GLuint program, GLenum pname, GLint *params) {
  _glGetProgramiv(program, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetProgramiv");
}
void glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog) {
  _glGetProgramInfoLog(program, bufSize, length, infoLog);
  PROTO3D_CHECK_GL_ERROR("glGetProgramInfoLog");
}
void glGetShaderiv(GLuint shader, GLenum pname, GLint *params) {
  _glGetShaderiv(shader, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetShaderiv");
}
void glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog) {
  _glGetShaderInfoLog(shader, bufSize, length, infoLog);
  PROTO3D_CHECK_GL_ERROR("glGetShaderInfoLog");
}
void glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source) {
  _glGetShaderSource(shader, bufSize, length, source);
  PROTO3D_CHECK_GL_ERROR("glGetShaderSource");
}
GLint glGetUniformLocation(GLuint program, const GLchar *name) {
  GLint ret = _glGetUniformLocation(program, name);
  PROTO3D_CHECK_GL_ERROR("glGetUniformLocation");
  return ret;
}
void glGetUniformfv(GLuint program, GLint location, GLfloat *params) {
  _glGetUniformfv(program, location, params);
  PROTO3D_CHECK_GL_ERROR("glGetUniformfv");
}
void glGetUniformiv(GLuint program, GLint location, GLint *params) {
  _glGetUniformiv(program, location, params);
  PROTO3D_CHECK_GL_ERROR("glGetUniformiv");
}
void glGetVertexAttribdv(GLuint index, GLenum pname, GLdouble *params) {
  _glGetVertexAttribdv(index, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetVertexAttribdv");
}
void glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat *params) {
  _glGetVertexAttribfv(index, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetVertexAttribfv");
}
void glGetVertexAttribiv(GLuint index, GLenum pname, GLint *params) {
  _glGetVertexAttribiv(index, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetVertexAttribiv");
}
void glGetVertexAttribPointerv(GLuint index, GLenum pname, void **pointer) {
  _glGetVertexAttribPointerv(index, pname, pointer);
  PROTO3D_CHECK_GL_ERROR("glGetVertexAttribPointerv");
}
GLboolean glIsProgram(GLuint program) {
  GLboolean ret = _glIsProgram(program);
  PROTO3D_CHECK_GL_ERROR("glIsProgram");
  return ret;
}
GLboolean glIsShader(GLuint shader) {
  GLboolean ret = _glIsShader(shader);
  PROTO3D_CHECK_GL_ERROR("glIsShader");
  return ret;
}
void glLinkProgram(GLuint program) {
  _glLinkProgram(program);
  PROTO3D_CHECK_GL_ERROR("glLinkProgram");
}
void glShaderSource(GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length) {
  _glShaderSource(shader, count, string, length);
  PROTO3D_CHECK_GL_ERROR("glShaderSource");
}
void glUseProgram(GLuint program) {
  _glUseProgram(program);
  PROTO3D_CHECK_GL_ERROR("glUseProgram");
}
void glUniform1f(GLint location, GLfloat v0) {
  _glUniform1f(location, v0);
  PROTO3D_CHECK_GL_ERROR("glUniform1f");
}
void glUniform2f(GLint location, GLfloat v0, GLfloat v1) {
  _glUniform2f(location, v0, v1);
  PROTO3D_CHECK_GL_ERROR("glUniform2f");
}
void glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2) {
  _glUniform3f(location, v0, v1, v2);
  PROTO3D_CHECK_GL_ERROR("glUniform3f");
}
void glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) {
  _glUniform4f(location, v0, v1, v2, v3);
  PROTO3D_CHECK_GL_ERROR("glUniform4f");
}
void glUniform1i(GLint location, GLint v0) {
  _glUniform1i(location, v0);
  PROTO3D_CHECK_GL_ERROR("glUniform1i");
}
void glUniform2i(GLint location, GLint v0, GLint v1) {
  _glUniform2i(location, v0, v1);
  PROTO3D_CHECK_GL_ERROR("glUniform2i");
}
void glUniform3i(GLint location, GLint v0, GLint v1, GLint v2) {
  _glUniform3i(location, v0, v1, v2);
  PROTO3D_CHECK_GL_ERROR("glUniform3i");
}
void glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3) {
  _glUniform4i(location, v0, v1, v2, v3);
  PROTO3D_CHECK_GL_ERROR("glUniform4i");
}
void glUniform1fv(GLint location, GLsizei count, const GLfloat *value) {
  _glUniform1fv(location, count, value);
  PROTO3D_CHECK_GL_ERROR("glUniform1fv");
}
void glUniform2fv(GLint location, GLsizei count, const GLfloat *value) {
  _glUniform2fv(location, count, value);
  PROTO3D_CHECK_GL_ERROR("glUniform2fv");
}
void glUniform3fv(GLint location, GLsizei count, const GLfloat *value) {
  _glUniform3fv(location, count, value);
  PROTO3D_CHECK_GL_ERROR("glUniform3fv");
}
void glUniform4fv(GLint location, GLsizei count, const GLfloat *value) {
  _glUniform4fv(location, count, value);
  PROTO3D_CHECK_GL_ERROR("glUniform4fv");
}
void glUniform1iv(GLint location, GLsizei count, const GLint *value) {
  _glUniform1iv(location, count, value);
  PROTO3D_CHECK_GL_ERROR("glUniform1iv");
}
void glUniform2iv(GLint location, GLsizei count, const GLint *value) {
  _glUniform2iv(location, count, value);
  PROTO3D_CHECK_GL_ERROR("glUniform2iv");
}
void glUniform3iv(GLint location, GLsizei count, const GLint *value) {
  _glUniform3iv(location, count, value);
  PROTO3D_CHECK_GL_ERROR("glUniform3iv");
}
void glUniform4iv(GLint location, GLsizei count, const GLint *value) {
  _glUniform4iv(location, count, value);
  PROTO3D_CHECK_GL_ERROR("glUniform4iv");
}
void glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  _glUniformMatrix2fv(location, count, transpose, value);
  PROTO3D_CHECK_GL_ERROR("glUniformMatrix2fv");
}
void glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  _glUniformMatrix3fv(location, count, transpose, value);
  PROTO3D_CHECK_GL_ERROR("glUniformMatrix3fv");
}
void glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  _glUniformMatrix4fv(location, count, transpose, value);
  PROTO3D_CHECK_GL_ERROR("glUniformMatrix4fv");
}
void glValidateProgram(GLuint program) {
  _glValidateProgram(program);
  PROTO3D_CHECK_GL_ERROR("glValidateProgram");
}
void glVertexAttrib1d(GLuint index, GLdouble x) {
  _glVertexAttrib1d(index, x);
  PROTO3D_CHECK_GL_ERROR("glVertexAttrib1d");
}
void glVertexAttrib1dv(GLuint index, const GLdouble *v) {
  _glVertexAttrib1dv(index, v);
  PROTO3D_CHECK_GL_ERROR("glVertexAttrib1dv");
}
void glVertexAttrib1f(GLuint index, GLfloat x) {
  _glVertexAttrib1f(index, x);
  PROTO3D_CHECK_GL_ERROR("glVertexAttrib1f");
}
void glVertexAttrib1fv(GLuint index, const GLfloat *v) {
  _glVertexAttrib1fv(index, v);
  PROTO3D_CHECK_GL_ERROR("glVertexAttrib1fv");
}
void glVertexAttrib1s(GLuint index, GLshort x) {
  _glVertexAttrib1s(index, x);
  PROTO3D_CHECK_GL_ERROR("glVertexAttrib1s");
}
void glVertexAttrib1sv(GLuint index, const GLshort *v) {
  _glVertexAttrib1sv(index, v);
  PROTO3D_CHECK_GL_ERROR("glVertexAttrib1sv");
}
void glVertexAttrib2d(GLuint index, GLdouble x, GLdouble y) {
  _glVertexAttrib2d(index, x, y);
  PROTO3D_CHECK_GL_ERROR("glVertexAttrib2d");
}
void glVertexAttrib2dv(GLuint index, const GLdouble *v) {
  _glVertexAttrib2dv(index, v);
  PROTO3D_CHECK_GL_ERROR("glVertexAttrib2dv");
}
void glVertexAttrib2f(GLuint index, GLfloat x, GLfloat y) {
  _glVertexAttrib2f(index, x, y);
  PROTO3D_CHECK_GL_ERROR("glVertexAttrib2f");
}
void glVertexAttrib2fv(GLuint index, const GLfloat *v) {
  _glVertexAttrib2fv(index, v);
  PROTO3D_CHECK_GL_ERROR("glVertexAttrib2fv");
}
void glVertexAttrib2s(GLuint index, GLshort x, GLshort y) {
  _glVertexAttrib2s(index, x, y);
  PROTO3D_CHECK_GL_ERROR("glVertexAttrib2s");
}
void glVertexAttrib2sv(GLuint index, const GLshort *v) {
  _glVertexAttrib2sv(index, v);
  PROTO3D_CHECK_GL_ERROR("glVertexAttrib2sv");
}
void glVertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z) {
  _glVertexAttrib3d(index, x, y, z);
  PROTO3D_CHECK_GL_ERROR("glVertexAttrib3d");
}
void glVertexAttrib3dv(GLuint index, const GLdouble *v) {
  _glVertexAttrib3dv(index, v);
  PROTO3D_CHECK_GL_ERROR("glVertexAttrib3dv");
}
void glVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z) {
  _glVertexAttrib3f(index, x, y, z);
  PROTO3D_CHECK_GL_ERROR("glVertexAttrib3f");
}
void glVertexAttrib3fv(GLuint index, const GLfloat *v) {
  _glVertexAttrib3fv(index, v);
  PROTO3D_CHECK_GL_ERROR("glVertexAttrib3fv");
}
void glVertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z) {
  _glVertexAttrib3s(index, x, y, z);
  PROTO3D_CHECK_GL_ERROR("glVertexAttrib3s");
}
void glVertexAttrib3sv(GLuint index, const GLshort *v) {
  _glVertexAttrib3sv(index, v);
  PROTO3D_CHECK_GL_ERROR("glVertexAttrib3sv");
}
void glVertexAttrib4Nbv(GLuint index, const GLbyte *v) {
  _glVertexAttrib4Nbv(index, v);
  PROTO3D_CHECK_GL_ERROR("glVertexAttrib4Nbv");
}
void glVertexAttrib4Niv(GLuint index, const GLint *v) {
  _glVertexAttrib4Niv(index, v);
  PROTO3D_CHECK_GL_ERROR("glVertexAttrib4Niv");
}
void glVertexAttrib4Nsv(GLuint index, const GLshort *v) {
  _glVertexAttrib4Nsv(index, v);
  PROTO3D_CHECK_GL_ERROR("glVertexAttrib4Nsv");
}
void glVertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) {
  _glVertexAttrib4Nub(index, x, y, z, w);
  PROTO3D_CHECK_GL_ERROR("glVertexAttrib4Nub");
}
void glVertexAttrib4Nubv(GLuint index, const GLubyte *v) {
  _glVertexAttrib4Nubv(index, v);
  PROTO3D_CHECK_GL_ERROR("glVertexAttrib4Nubv");
}
void glVertexAttrib4Nuiv(GLuint index, const GLuint *v) {
  _glVertexAttrib4Nuiv(index, v);
  PROTO3D_CHECK_GL_ERROR("glVertexAttrib4Nuiv");
}
void glVertexAttrib4Nusv(GLuint index, const GLushort *v) {
  _glVertexAttrib4Nusv(index, v);
  PROTO3D_CHECK_GL_ERROR("glVertexAttrib4Nusv");
}
void glVertexAttrib4bv(GLuint index, const GLbyte *v) {
  _glVertexAttrib4bv(index, v);
  PROTO3D_CHECK_GL_ERROR("glVertexAttrib4bv");
}
void glVertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  _glVertexAttrib4d(index, x, y, z, w);
  PROTO3D_CHECK_GL_ERROR("glVertexAttrib4d");
}
void glVertexAttrib4dv(GLuint index, const GLdouble *v) {
  _glVertexAttrib4dv(index, v);
  PROTO3D_CHECK_GL_ERROR("glVertexAttrib4dv");
}
void glVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  _glVertexAttrib4f(index, x, y, z, w);
  PROTO3D_CHECK_GL_ERROR("glVertexAttrib4f");
}
void glVertexAttrib4fv(GLuint index, const GLfloat *v) {
  _glVertexAttrib4fv(index, v);
  PROTO3D_CHECK_GL_ERROR("glVertexAttrib4fv");
}
void glVertexAttrib4iv(GLuint index, const GLint *v) {
  _glVertexAttrib4iv(index, v);
  PROTO3D_CHECK_GL_ERROR("glVertexAttrib4iv");
}
void glVertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) {
  _glVertexAttrib4s(index, x, y, z, w);
  PROTO3D_CHECK_GL_ERROR("glVertexAttrib4s");
}
void glVertexAttrib4sv(GLuint index, const GLshort *v) {
  _glVertexAttrib4sv(index, v);
  PROTO3D_CHECK_GL_ERROR("glVertexAttrib4sv");
}
void glVertexAttrib4ubv(GLuint index, const GLubyte *v) {
  _glVertexAttrib4ubv(index, v);
  PROTO3D_CHECK_GL_ERROR("glVertexAttrib4ubv");
}
void glVertexAttrib4uiv(GLuint index, const GLuint *v) {
  _glVertexAttrib4uiv(index, v);
  PROTO3D_CHECK_GL_ERROR("glVertexAttrib4uiv");
}
void glVertexAttrib4usv(GLuint index, const GLushort *v) {
  _glVertexAttrib4usv(index, v);
  PROTO3D_CHECK_GL_ERROR("glVertexAttrib4usv");
}
void glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer) {
  _glVertexAttribPointer(index, size, type, normalized, stride, pointer);
  PROTO3D_CHECK_GL_ERROR("glVertexAttribPointer");
}
void glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  _glUniformMatrix2x3fv(location, count, transpose, value);
  PROTO3D_CHECK_GL_ERROR("glUniformMatrix2x3fv");
}
void glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  _glUniformMatrix3x2fv(location, count, transpose, value);
  PROTO3D_CHECK_GL_ERROR("glUniformMatrix3x2fv");
}
void glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  _glUniformMatrix2x4fv(location, count, transpose, value);
  PROTO3D_CHECK_GL_ERROR("glUniformMatrix2x4fv");
}
void glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  _glUniformMatrix4x2fv(location, count, transpose, value);
  PROTO3D_CHECK_GL_ERROR("glUniformMatrix4x2fv");
}
void glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  _glUniformMatrix3x4fv(location, count, transpose, value);
  PROTO3D_CHECK_GL_ERROR("glUniformMatrix3x4fv");
}
void glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  _glUniformMatrix4x3fv(location, count, transpose, value);
  PROTO3D_CHECK_GL_ERROR("glUniformMatrix4x3fv");
}
void glColorMaski(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) {
  _glColorMaski(index, r, g, b, a);
  PROTO3D_CHECK_GL_ERROR("glColorMaski");
}
void glGetBooleani_v(GLenum target, GLuint index, GLboolean *data) {
  _glGetBooleani_v(target, index, data);
  PROTO3D_CHECK_GL_ERROR("glGetBooleani_v");
}
void glGetIntegeri_v(GLenum target, GLuint index, GLint *data) {
  _glGetIntegeri_v(target, index, data);
  PROTO3D_CHECK_GL_ERROR("glGetIntegeri_v");
}
void glEnablei(GLenum target, GLuint index) {
  _glEnablei(target, index);
  PROTO3D_CHECK_GL_ERROR("glEnablei");
}
void glDisablei(GLenum target, GLuint index) {
  _glDisablei(target, index);
  PROTO3D_CHECK_GL_ERROR("glDisablei");
}
GLboolean glIsEnabledi(GLenum target, GLuint index) {
  GLboolean ret = _glIsEnabledi(target, index);
  PROTO3D_CHECK_GL_ERROR("glIsEnabledi");
  return ret;
}
void glBeginTransformFeedback(GLenum primitiveMode) {
  _glBeginTransformFeedback(primitiveMode);
  PROTO3D_CHECK_GL_ERROR("glBeginTransformFeedback");
}
void glEndTransformFeedback(void) {
  _glEndTransformFeedback();
  PROTO3D_CHECK_GL_ERROR("glEndTransformFeedback");
}
void glBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) {
  _glBindBufferRange(target, index, buffer, offset, size);
  PROTO3D_CHECK_GL_ERROR("glBindBufferRange");
}
void glBindBufferBase(GLenum target, GLuint index, GLuint buffer) {
  _glBindBufferBase(target, index, buffer);
  PROTO3D_CHECK_GL_ERROR("glBindBufferBase");
}
void glTransformFeedbackVaryings(GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode) {
  _glTransformFeedbackVaryings(program, count, varyings, bufferMode);
  PROTO3D_CHECK_GL_ERROR("glTransformFeedbackVaryings");
}
void glGetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name) {
  _glGetTransformFeedbackVarying(program, index, bufSize, length, size, type, name);
  PROTO3D_CHECK_GL_ERROR("glGetTransformFeedbackVarying");
}
void glClampColor(GLenum target, GLenum clamp) {
  _glClampColor(target, clamp);
  PROTO3D_CHECK_GL_ERROR("glClampColor");
}
void glBeginConditionalRender(GLuint id, GLenum mode) {
  _glBeginConditionalRender(id, mode);
  PROTO3D_CHECK_GL_ERROR("glBeginConditionalRender");
}
void glEndConditionalRender(void) {
  _glEndConditionalRender();
  PROTO3D_CHECK_GL_ERROR("glEndConditionalRender");
}
void glVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer) {
  _glVertexAttribIPointer(index, size, type, stride, pointer);
  PROTO3D_CHECK_GL_ERROR("glVertexAttribIPointer");
}
void glGetVertexAttribIiv(GLuint index, GLenum pname, GLint *params) {
  _glGetVertexAttribIiv(index, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetVertexAttribIiv");
}
void glGetVertexAttribIuiv(GLuint index, GLenum pname, GLuint *params) {
  _glGetVertexAttribIuiv(index, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetVertexAttribIuiv");
}
void glVertexAttribI1i(GLuint index, GLint x) {
  _glVertexAttribI1i(index, x);
  PROTO3D_CHECK_GL_ERROR("glVertexAttribI1i");
}
void glVertexAttribI2i(GLuint index, GLint x, GLint y) {
  _glVertexAttribI2i(index, x, y);
  PROTO3D_CHECK_GL_ERROR("glVertexAttribI2i");
}
void glVertexAttribI3i(GLuint index, GLint x, GLint y, GLint z) {
  _glVertexAttribI3i(index, x, y, z);
  PROTO3D_CHECK_GL_ERROR("glVertexAttribI3i");
}
void glVertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w) {
  _glVertexAttribI4i(index, x, y, z, w);
  PROTO3D_CHECK_GL_ERROR("glVertexAttribI4i");
}
void glVertexAttribI1ui(GLuint index, GLuint x) {
  _glVertexAttribI1ui(index, x);
  PROTO3D_CHECK_GL_ERROR("glVertexAttribI1ui");
}
void glVertexAttribI2ui(GLuint index, GLuint x, GLuint y) {
  _glVertexAttribI2ui(index, x, y);
  PROTO3D_CHECK_GL_ERROR("glVertexAttribI2ui");
}
void glVertexAttribI3ui(GLuint index, GLuint x, GLuint y, GLuint z) {
  _glVertexAttribI3ui(index, x, y, z);
  PROTO3D_CHECK_GL_ERROR("glVertexAttribI3ui");
}
void glVertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) {
  _glVertexAttribI4ui(index, x, y, z, w);
  PROTO3D_CHECK_GL_ERROR("glVertexAttribI4ui");
}
void glVertexAttribI1iv(GLuint index, const GLint *v) {
  _glVertexAttribI1iv(index, v);
  PROTO3D_CHECK_GL_ERROR("glVertexAttribI1iv");
}
void glVertexAttribI2iv(GLuint index, const GLint *v) {
  _glVertexAttribI2iv(index, v);
  PROTO3D_CHECK_GL_ERROR("glVertexAttribI2iv");
}
void glVertexAttribI3iv(GLuint index, const GLint *v) {
  _glVertexAttribI3iv(index, v);
  PROTO3D_CHECK_GL_ERROR("glVertexAttribI3iv");
}
void glVertexAttribI4iv(GLuint index, const GLint *v) {
  _glVertexAttribI4iv(index, v);
  PROTO3D_CHECK_GL_ERROR("glVertexAttribI4iv");
}
void glVertexAttribI1uiv(GLuint index, const GLuint *v) {
  _glVertexAttribI1uiv(index, v);
  PROTO3D_CHECK_GL_ERROR("glVertexAttribI1uiv");
}
void glVertexAttribI2uiv(GLuint index, const GLuint *v) {
  _glVertexAttribI2uiv(index, v);
  PROTO3D_CHECK_GL_ERROR("glVertexAttribI2uiv");
}
void glVertexAttribI3uiv(GLuint index, const GLuint *v) {
  _glVertexAttribI3uiv(index, v);
  PROTO3D_CHECK_GL_ERROR("glVertexAttribI3uiv");
}
void glVertexAttribI4uiv(GLuint index, const GLuint *v) {
  _glVertexAttribI4uiv(index, v);
  PROTO3D_CHECK_GL_ERROR("glVertexAttribI4uiv");
}
void glVertexAttribI4bv(GLuint index, const GLbyte *v) {
  _glVertexAttribI4bv(index, v);
  PROTO3D_CHECK_GL_ERROR("glVertexAttribI4bv");
}
void glVertexAttribI4sv(GLuint index, const GLshort *v) {
  _glVertexAttribI4sv(index, v);
  PROTO3D_CHECK_GL_ERROR("glVertexAttribI4sv");
}
void glVertexAttribI4ubv(GLuint index, const GLubyte *v) {
  _glVertexAttribI4ubv(index, v);
  PROTO3D_CHECK_GL_ERROR("glVertexAttribI4ubv");
}
void glVertexAttribI4usv(GLuint index, const GLushort *v) {
  _glVertexAttribI4usv(index, v);
  PROTO3D_CHECK_GL_ERROR("glVertexAttribI4usv");
}
void glGetUniformuiv(GLuint program, GLint location, GLuint *params) {
  _glGetUniformuiv(program, location, params);
  PROTO3D_CHECK_GL_ERROR("glGetUniformuiv");
}
void glBindFragDataLocation(GLuint program, GLuint color, const GLchar *name) {
  _glBindFragDataLocation(program, color, name);
  PROTO3D_CHECK_GL_ERROR("glBindFragDataLocation");
}
GLint glGetFragDataLocation(GLuint program, const GLchar *name) {
  GLint ret = _glGetFragDataLocation(program, name);
  PROTO3D_CHECK_GL_ERROR("glGetFragDataLocation");
  return ret;
}
void glUniform1ui(GLint location, GLuint v0) {
  _glUniform1ui(location, v0);
  PROTO3D_CHECK_GL_ERROR("glUniform1ui");
}
void glUniform2ui(GLint location, GLuint v0, GLuint v1) {
  _glUniform2ui(location, v0, v1);
  PROTO3D_CHECK_GL_ERROR("glUniform2ui");
}
void glUniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2) {
  _glUniform3ui(location, v0, v1, v2);
  PROTO3D_CHECK_GL_ERROR("glUniform3ui");
}
void glUniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) {
  _glUniform4ui(location, v0, v1, v2, v3);
  PROTO3D_CHECK_GL_ERROR("glUniform4ui");
}
void glUniform1uiv(GLint location, GLsizei count, const GLuint *value) {
  _glUniform1uiv(location, count, value);
  PROTO3D_CHECK_GL_ERROR("glUniform1uiv");
}
void glUniform2uiv(GLint location, GLsizei count, const GLuint *value) {
  _glUniform2uiv(location, count, value);
  PROTO3D_CHECK_GL_ERROR("glUniform2uiv");
}
void glUniform3uiv(GLint location, GLsizei count, const GLuint *value) {
  _glUniform3uiv(location, count, value);
  PROTO3D_CHECK_GL_ERROR("glUniform3uiv");
}
void glUniform4uiv(GLint location, GLsizei count, const GLuint *value) {
  _glUniform4uiv(location, count, value);
  PROTO3D_CHECK_GL_ERROR("glUniform4uiv");
}
void glTexParameterIiv(GLenum target, GLenum pname, const GLint *params) {
  _glTexParameterIiv(target, pname, params);
  PROTO3D_CHECK_GL_ERROR("glTexParameterIiv");
}
void glTexParameterIuiv(GLenum target, GLenum pname, const GLuint *params) {
  _glTexParameterIuiv(target, pname, params);
  PROTO3D_CHECK_GL_ERROR("glTexParameterIuiv");
}
void glGetTexParameterIiv(GLenum target, GLenum pname, GLint *params) {
  _glGetTexParameterIiv(target, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetTexParameterIiv");
}
void glGetTexParameterIuiv(GLenum target, GLenum pname, GLuint *params) {
  _glGetTexParameterIuiv(target, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetTexParameterIuiv");
}
void glClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint *value) {
  _glClearBufferiv(buffer, drawbuffer, value);
  PROTO3D_CHECK_GL_ERROR("glClearBufferiv");
}
void glClearBufferuiv(GLenum buffer, GLint drawbuffer, const GLuint *value) {
  _glClearBufferuiv(buffer, drawbuffer, value);
  PROTO3D_CHECK_GL_ERROR("glClearBufferuiv");
}
void glClearBufferfv(GLenum buffer, GLint drawbuffer, const GLfloat *value) {
  _glClearBufferfv(buffer, drawbuffer, value);
  PROTO3D_CHECK_GL_ERROR("glClearBufferfv");
}
void glClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil) {
  _glClearBufferfi(buffer, drawbuffer, depth, stencil);
  PROTO3D_CHECK_GL_ERROR("glClearBufferfi");
}
const GLubyte *glGetStringi(GLenum name, GLuint index) {
  const GLubyte *ret = _glGetStringi(name, index);
  PROTO3D_CHECK_GL_ERROR("glGetStringi");
  return ret;
}
GLboolean glIsRenderbuffer(GLuint renderbuffer) {
  GLboolean ret = _glIsRenderbuffer(renderbuffer);
  PROTO3D_CHECK_GL_ERROR("glIsRenderbuffer");
  return ret;
}
void glBindRenderbuffer(GLenum target, GLuint renderbuffer) {
  _glBindRenderbuffer(target, renderbuffer);
  PROTO3D_CHECK_GL_ERROR("glBindRenderbuffer");
}
void glDeleteRenderbuffers(GLsizei n, const GLuint *renderbuffers) {
  _glDeleteRenderbuffers(n, renderbuffers);
  PROTO3D_CHECK_GL_ERROR("glDeleteRenderbuffers");
}
void glGenRenderbuffers(GLsizei n, GLuint *renderbuffers) {
  _glGenRenderbuffers(n, renderbuffers);
  PROTO3D_CHECK_GL_ERROR("glGenRenderbuffers");
}
void glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height) {
  _glRenderbufferStorage(target, internalformat, width, height);
  PROTO3D_CHECK_GL_ERROR("glRenderbufferStorage");
}
void glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint *params) {
  _glGetRenderbufferParameteriv(target, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetRenderbufferParameteriv");
}
GLboolean glIsFramebuffer(GLuint framebuffer) {
  GLboolean ret = _glIsFramebuffer(framebuffer);
  PROTO3D_CHECK_GL_ERROR("glIsFramebuffer");
  return ret;
}
void glBindFramebuffer(GLenum target, GLuint framebuffer) {
  _glBindFramebuffer(target, framebuffer);
  PROTO3D_CHECK_GL_ERROR("glBindFramebuffer");
}
void glDeleteFramebuffers(GLsizei n, const GLuint *framebuffers) {
  _glDeleteFramebuffers(n, framebuffers);
  PROTO3D_CHECK_GL_ERROR("glDeleteFramebuffers");
}
void glGenFramebuffers(GLsizei n, GLuint *framebuffers) {
  _glGenFramebuffers(n, framebuffers);
  PROTO3D_CHECK_GL_ERROR("glGenFramebuffers");
}
GLenum glCheckFramebufferStatus(GLenum target) {
  GLenum ret = _glCheckFramebufferStatus(target);
  PROTO3D_CHECK_GL_ERROR("glCheckFramebufferStatus");
  return ret;
}
void glFramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {
  _glFramebufferTexture1D(target, attachment, textarget, texture, level);
  PROTO3D_CHECK_GL_ERROR("glFramebufferTexture1D");
}
void glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {
  _glFramebufferTexture2D(target, attachment, textarget, texture, level);
  PROTO3D_CHECK_GL_ERROR("glFramebufferTexture2D");
}
void glFramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) {
  _glFramebufferTexture3D(target, attachment, textarget, texture, level, zoffset);
  PROTO3D_CHECK_GL_ERROR("glFramebufferTexture3D");
}
void glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) {
  _glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer);
  PROTO3D_CHECK_GL_ERROR("glFramebufferRenderbuffer");
}
void glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint *params) {
  _glGetFramebufferAttachmentParameteriv(target, attachment, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetFramebufferAttachmentParameteriv");
}
void glGenerateMipmap(GLenum target) {
  _glGenerateMipmap(target);
  PROTO3D_CHECK_GL_ERROR("glGenerateMipmap");
}
void glBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) {
  _glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
  PROTO3D_CHECK_GL_ERROR("glBlitFramebuffer");
}
void glRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) {
  _glRenderbufferStorageMultisample(target, samples, internalformat, width, height);
  PROTO3D_CHECK_GL_ERROR("glRenderbufferStorageMultisample");
}
void glFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) {
  _glFramebufferTextureLayer(target, attachment, texture, level, layer);
  PROTO3D_CHECK_GL_ERROR("glFramebufferTextureLayer");
}
void *glMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access) {
  void *ret = _glMapBufferRange(target, offset, length, access);
  PROTO3D_CHECK_GL_ERROR("glMapBufferRange");
  return ret;
}
void glFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length) {
  _glFlushMappedBufferRange(target, offset, length);
  PROTO3D_CHECK_GL_ERROR("glFlushMappedBufferRange");
}
void glBindVertexArray(GLuint array) {
  _glBindVertexArray(array);
  PROTO3D_CHECK_GL_ERROR("glBindVertexArray");
}
void glDeleteVertexArrays(GLsizei n, const GLuint *arrays) {
  _glDeleteVertexArrays(n, arrays);
  PROTO3D_CHECK_GL_ERROR("glDeleteVertexArrays");
}
void glGenVertexArrays(GLsizei n, GLuint *arrays) {
  _glGenVertexArrays(n, arrays);
  PROTO3D_CHECK_GL_ERROR("glGenVertexArrays");
}
GLboolean glIsVertexArray(GLuint array) {
  GLboolean ret = _glIsVertexArray(array);
  PROTO3D_CHECK_GL_ERROR("glIsVertexArray");
  return ret;
}
void glDrawArraysInstanced(GLenum mode, GLint first, GLsizei count, GLsizei instancecount) {
  _glDrawArraysInstanced(mode, first, count, instancecount);
  PROTO3D_CHECK_GL_ERROR("glDrawArraysInstanced");
}
void glDrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount) {
  _glDrawElementsInstanced(mode, count, type, indices, instancecount);
  PROTO3D_CHECK_GL_ERROR("glDrawElementsInstanced");
}
void glTexBuffer(GLenum target, GLenum internalformat, GLuint buffer) {
  _glTexBuffer(target, internalformat, buffer);
  PROTO3D_CHECK_GL_ERROR("glTexBuffer");
}
void glPrimitiveRestartIndex(GLuint index) {
  _glPrimitiveRestartIndex(index);
  PROTO3D_CHECK_GL_ERROR("glPrimitiveRestartIndex");
}
void glCopyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) {
  _glCopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size);
  PROTO3D_CHECK_GL_ERROR("glCopyBufferSubData");
}
void glGetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices) {
  _glGetUniformIndices(program, uniformCount, uniformNames, uniformIndices);
  PROTO3D_CHECK_GL_ERROR("glGetUniformIndices");
}
void glGetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params) {
  _glGetActiveUniformsiv(program, uniformCount, uniformIndices, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetActiveUniformsiv");
}
void glGetActiveUniformName(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName) {
  _glGetActiveUniformName(program, uniformIndex, bufSize, length, uniformName);
  PROTO3D_CHECK_GL_ERROR("glGetActiveUniformName");
}
GLuint glGetUniformBlockIndex(GLuint program, const GLchar *uniformBlockName) {
  GLuint ret = _glGetUniformBlockIndex(program, uniformBlockName);
  PROTO3D_CHECK_GL_ERROR("glGetUniformBlockIndex");
  return ret;
}
void glGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params) {
  _glGetActiveUniformBlockiv(program, uniformBlockIndex, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetActiveUniformBlockiv");
}
void glGetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName) {
  _glGetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName);
  PROTO3D_CHECK_GL_ERROR("glGetActiveUniformBlockName");
}
void glUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding) {
  _glUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding);
  PROTO3D_CHECK_GL_ERROR("glUniformBlockBinding");
}
void glDrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex) {
  _glDrawElementsBaseVertex(mode, count, type, indices, basevertex);
  PROTO3D_CHECK_GL_ERROR("glDrawElementsBaseVertex");
}
void glDrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex) {
  _glDrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex);
  PROTO3D_CHECK_GL_ERROR("glDrawRangeElementsBaseVertex");
}
void glDrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex) {
  _glDrawElementsInstancedBaseVertex(mode, count, type, indices, instancecount, basevertex);
  PROTO3D_CHECK_GL_ERROR("glDrawElementsInstancedBaseVertex");
}
void glMultiDrawElementsBaseVertex(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex) {
  _glMultiDrawElementsBaseVertex(mode, count, type, indices, drawcount, basevertex);
  PROTO3D_CHECK_GL_ERROR("glMultiDrawElementsBaseVertex");
}
void glProvokingVertex(GLenum mode) {
  _glProvokingVertex(mode);
  PROTO3D_CHECK_GL_ERROR("glProvokingVertex");
}
GLsync glFenceSync(GLenum condition, GLbitfield flags) {
  GLsync ret = _glFenceSync(condition, flags);
  PROTO3D_CHECK_GL_ERROR("glFenceSync");
  return ret;
}
GLboolean glIsSync(GLsync sync) {
  GLboolean ret = _glIsSync(sync);
  PROTO3D_CHECK_GL_ERROR("glIsSync");
  return ret;
}
void glDeleteSync(GLsync sync) {
  _glDeleteSync(sync);
  PROTO3D_CHECK_GL_ERROR("glDeleteSync");
}
GLenum glClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout) {
  GLenum ret = _glClientWaitSync(sync, flags, timeout);
  PROTO3D_CHECK_GL_ERROR("glClientWaitSync");
  return ret;
}
void glWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout) {
  _glWaitSync(sync, flags, timeout);
  PROTO3D_CHECK_GL_ERROR("glWaitSync");
}
void glGetInteger64v(GLenum pname, GLint64 *data) {
  _glGetInteger64v(pname, data);
  PROTO3D_CHECK_GL_ERROR("glGetInteger64v");
}
void glGetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values) {
  _glGetSynciv(sync, pname, bufSize, length, values);
  PROTO3D_CHECK_GL_ERROR("glGetSynciv");
}
void glGetInteger64i_v(GLenum target, GLuint index, GLint64 *data) {
  _glGetInteger64i_v(target, index, data);
  PROTO3D_CHECK_GL_ERROR("glGetInteger64i_v");
}
void glGetBufferParameteri64v(GLenum target, GLenum pname, GLint64 *params) {
  _glGetBufferParameteri64v(target, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetBufferParameteri64v");
}
void glFramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level) {
  _glFramebufferTexture(target, attachment, texture, level);
  PROTO3D_CHECK_GL_ERROR("glFramebufferTexture");
}
void glTexImage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) {
  _glTexImage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations);
  PROTO3D_CHECK_GL_ERROR("glTexImage2DMultisample");
}
void glTexImage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) {
  _glTexImage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations);
  PROTO3D_CHECK_GL_ERROR("glTexImage3DMultisample");
}
void glGetMultisamplefv(GLenum pname, GLuint index, GLfloat *val) {
  _glGetMultisamplefv(pname, index, val);
  PROTO3D_CHECK_GL_ERROR("glGetMultisamplefv");
}
void glSampleMaski(GLuint maskNumber, GLbitfield mask) {
  _glSampleMaski(maskNumber, mask);
  PROTO3D_CHECK_GL_ERROR("glSampleMaski");
}
void glBindFragDataLocationIndexed(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name) {
  _glBindFragDataLocationIndexed(program, colorNumber, index, name);
  PROTO3D_CHECK_GL_ERROR("glBindFragDataLocationIndexed");
}
GLint glGetFragDataIndex(GLuint program, const GLchar *name) {
  GLint ret = _glGetFragDataIndex(program, name);
  PROTO3D_CHECK_GL_ERROR("glGetFragDataIndex");
  return ret;
}
void glGenSamplers(GLsizei count, GLuint *samplers) {
  _glGenSamplers(count, samplers);
  PROTO3D_CHECK_GL_ERROR("glGenSamplers");
}
void glDeleteSamplers(GLsizei count, const GLuint *samplers) {
  _glDeleteSamplers(count, samplers);
  PROTO3D_CHECK_GL_ERROR("glDeleteSamplers");
}
GLboolean glIsSampler(GLuint sampler) {
  GLboolean ret = _glIsSampler(sampler);
  PROTO3D_CHECK_GL_ERROR("glIsSampler");
  return ret;
}
void glBindSampler(GLuint unit, GLuint sampler) {
  _glBindSampler(unit, sampler);
  PROTO3D_CHECK_GL_ERROR("glBindSampler");
}
void glSamplerParameteri(GLuint sampler, GLenum pname, GLint param) {
  _glSamplerParameteri(sampler, pname, param);
  PROTO3D_CHECK_GL_ERROR("glSamplerParameteri");
}
void glSamplerParameteriv(GLuint sampler, GLenum pname, const GLint *param) {
  _glSamplerParameteriv(sampler, pname, param);
  PROTO3D_CHECK_GL_ERROR("glSamplerParameteriv");
}
void glSamplerParameterf(GLuint sampler, GLenum pname, GLfloat param) {
  _glSamplerParameterf(sampler, pname, param);
  PROTO3D_CHECK_GL_ERROR("glSamplerParameterf");
}
void glSamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat *param) {
  _glSamplerParameterfv(sampler, pname, param);
  PROTO3D_CHECK_GL_ERROR("glSamplerParameterfv");
}
void glSamplerParameterIiv(GLuint sampler, GLenum pname, const GLint *param) {
  _glSamplerParameterIiv(sampler, pname, param);
  PROTO3D_CHECK_GL_ERROR("glSamplerParameterIiv");
}
void glSamplerParameterIuiv(GLuint sampler, GLenum pname, const GLuint *param) {
  _glSamplerParameterIuiv(sampler, pname, param);
  PROTO3D_CHECK_GL_ERROR("glSamplerParameterIuiv");
}
void glGetSamplerParameteriv(GLuint sampler, GLenum pname, GLint *params) {
  _glGetSamplerParameteriv(sampler, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetSamplerParameteriv");
}
void glGetSamplerParameterIiv(GLuint sampler, GLenum pname, GLint *params) {
  _glGetSamplerParameterIiv(sampler, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetSamplerParameterIiv");
}
void glGetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat *params) {
  _glGetSamplerParameterfv(sampler, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetSamplerParameterfv");
}
void glGetSamplerParameterIuiv(GLuint sampler, GLenum pname, GLuint *params) {
  _glGetSamplerParameterIuiv(sampler, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetSamplerParameterIuiv");
}
void glQueryCounter(GLuint id, GLenum target) {
  _glQueryCounter(id, target);
  PROTO3D_CHECK_GL_ERROR("glQueryCounter");
}
void glGetQueryObjecti64v(GLuint id, GLenum pname, GLint64 *params) {
  _glGetQueryObjecti64v(id, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetQueryObjecti64v");
}
void glGetQueryObjectui64v(GLuint id, GLenum pname, GLuint64 *params) {
  _glGetQueryObjectui64v(id, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetQueryObjectui64v");
}
void glVertexAttribDivisor(GLuint index, GLuint divisor) {
  _glVertexAttribDivisor(index, divisor);
  PROTO3D_CHECK_GL_ERROR("glVertexAttribDivisor");
}
void glVertexAttribP1ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) {
  _glVertexAttribP1ui(index, type, normalized, value);
  PROTO3D_CHECK_GL_ERROR("glVertexAttribP1ui");
}
void glVertexAttribP1uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value) {
  _glVertexAttribP1uiv(index, type, normalized, value);
  PROTO3D_CHECK_GL_ERROR("glVertexAttribP1uiv");
}
void glVertexAttribP2ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) {
  _glVertexAttribP2ui(index, type, normalized, value);
  PROTO3D_CHECK_GL_ERROR("glVertexAttribP2ui");
}
void glVertexAttribP2uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value) {
  _glVertexAttribP2uiv(index, type, normalized, value);
  PROTO3D_CHECK_GL_ERROR("glVertexAttribP2uiv");
}
void glVertexAttribP3ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) {
  _glVertexAttribP3ui(index, type, normalized, value);
  PROTO3D_CHECK_GL_ERROR("glVertexAttribP3ui");
}
void glVertexAttribP3uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value) {
  _glVertexAttribP3uiv(index, type, normalized, value);
  PROTO3D_CHECK_GL_ERROR("glVertexAttribP3uiv");
}
void glVertexAttribP4ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) {
  _glVertexAttribP4ui(index, type, normalized, value);
  PROTO3D_CHECK_GL_ERROR("glVertexAttribP4ui");
}
void glVertexAttribP4uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value) {
  _glVertexAttribP4uiv(index, type, normalized, value);
  PROTO3D_CHECK_GL_ERROR("glVertexAttribP4uiv");
}
void glMinSampleShading(GLfloat value) {
  _glMinSampleShading(value);
  PROTO3D_CHECK_GL_ERROR("glMinSampleShading");
}
void glBlendEquationi(GLuint buf, GLenum mode) {
  _glBlendEquationi(buf, mode);
  PROTO3D_CHECK_GL_ERROR("glBlendEquationi");
}
void glBlendEquationSeparatei(GLuint buf, GLenum modeRGB, GLenum modeAlpha) {
  _glBlendEquationSeparatei(buf, modeRGB, modeAlpha);
  PROTO3D_CHECK_GL_ERROR("glBlendEquationSeparatei");
}
void glBlendFunci(GLuint buf, GLenum src, GLenum dst) {
  _glBlendFunci(buf, src, dst);
  PROTO3D_CHECK_GL_ERROR("glBlendFunci");
}
void glBlendFuncSeparatei(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) {
  _glBlendFuncSeparatei(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
  PROTO3D_CHECK_GL_ERROR("glBlendFuncSeparatei");
}
void glDrawArraysIndirect(GLenum mode, const void *indirect) {
  _glDrawArraysIndirect(mode, indirect);
  PROTO3D_CHECK_GL_ERROR("glDrawArraysIndirect");
}
void glDrawElementsIndirect(GLenum mode, GLenum type, const void *indirect) {
  _glDrawElementsIndirect(mode, type, indirect);
  PROTO3D_CHECK_GL_ERROR("glDrawElementsIndirect");
}
void glUniform1d(GLint location, GLdouble x) {
  _glUniform1d(location, x);
  PROTO3D_CHECK_GL_ERROR("glUniform1d");
}
void glUniform2d(GLint location, GLdouble x, GLdouble y) {
  _glUniform2d(location, x, y);
  PROTO3D_CHECK_GL_ERROR("glUniform2d");
}
void glUniform3d(GLint location, GLdouble x, GLdouble y, GLdouble z) {
  _glUniform3d(location, x, y, z);
  PROTO3D_CHECK_GL_ERROR("glUniform3d");
}
void glUniform4d(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  _glUniform4d(location, x, y, z, w);
  PROTO3D_CHECK_GL_ERROR("glUniform4d");
}
void glUniform1dv(GLint location, GLsizei count, const GLdouble *value) {
  _glUniform1dv(location, count, value);
  PROTO3D_CHECK_GL_ERROR("glUniform1dv");
}
void glUniform2dv(GLint location, GLsizei count, const GLdouble *value) {
  _glUniform2dv(location, count, value);
  PROTO3D_CHECK_GL_ERROR("glUniform2dv");
}
void glUniform3dv(GLint location, GLsizei count, const GLdouble *value) {
  _glUniform3dv(location, count, value);
  PROTO3D_CHECK_GL_ERROR("glUniform3dv");
}
void glUniform4dv(GLint location, GLsizei count, const GLdouble *value) {
  _glUniform4dv(location, count, value);
  PROTO3D_CHECK_GL_ERROR("glUniform4dv");
}
void glUniformMatrix2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  _glUniformMatrix2dv(location, count, transpose, value);
  PROTO3D_CHECK_GL_ERROR("glUniformMatrix2dv");
}
void glUniformMatrix3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  _glUniformMatrix3dv(location, count, transpose, value);
  PROTO3D_CHECK_GL_ERROR("glUniformMatrix3dv");
}
void glUniformMatrix4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  _glUniformMatrix4dv(location, count, transpose, value);
  PROTO3D_CHECK_GL_ERROR("glUniformMatrix4dv");
}
void glUniformMatrix2x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  _glUniformMatrix2x3dv(location, count, transpose, value);
  PROTO3D_CHECK_GL_ERROR("glUniformMatrix2x3dv");
}
void glUniformMatrix2x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  _glUniformMatrix2x4dv(location, count, transpose, value);
  PROTO3D_CHECK_GL_ERROR("glUniformMatrix2x4dv");
}
void glUniformMatrix3x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  _glUniformMatrix3x2dv(location, count, transpose, value);
  PROTO3D_CHECK_GL_ERROR("glUniformMatrix3x2dv");
}
void glUniformMatrix3x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  _glUniformMatrix3x4dv(location, count, transpose, value);
  PROTO3D_CHECK_GL_ERROR("glUniformMatrix3x4dv");
}
void glUniformMatrix4x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  _glUniformMatrix4x2dv(location, count, transpose, value);
  PROTO3D_CHECK_GL_ERROR("glUniformMatrix4x2dv");
}
void glUniformMatrix4x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  _glUniformMatrix4x3dv(location, count, transpose, value);
  PROTO3D_CHECK_GL_ERROR("glUniformMatrix4x3dv");
}
void glGetUniformdv(GLuint program, GLint location, GLdouble *params) {
  _glGetUniformdv(program, location, params);
  PROTO3D_CHECK_GL_ERROR("glGetUniformdv");
}
GLint glGetSubroutineUniformLocation(GLuint program, GLenum shadertype, const GLchar *name) {
  GLint ret = _glGetSubroutineUniformLocation(program, shadertype, name);
  PROTO3D_CHECK_GL_ERROR("glGetSubroutineUniformLocation");
  return ret;
}
GLuint glGetSubroutineIndex(GLuint program, GLenum shadertype, const GLchar *name) {
  GLuint ret = _glGetSubroutineIndex(program, shadertype, name);
  PROTO3D_CHECK_GL_ERROR("glGetSubroutineIndex");
  return ret;
}
void glGetActiveSubroutineUniformiv(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values) {
  _glGetActiveSubroutineUniformiv(program, shadertype, index, pname, values);
  PROTO3D_CHECK_GL_ERROR("glGetActiveSubroutineUniformiv");
}
void glGetActiveSubroutineUniformName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name) {
  _glGetActiveSubroutineUniformName(program, shadertype, index, bufsize, length, name);
  PROTO3D_CHECK_GL_ERROR("glGetActiveSubroutineUniformName");
}
void glGetActiveSubroutineName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name) {
  _glGetActiveSubroutineName(program, shadertype, index, bufsize, length, name);
  PROTO3D_CHECK_GL_ERROR("glGetActiveSubroutineName");
}
void glUniformSubroutinesuiv(GLenum shadertype, GLsizei count, const GLuint *indices) {
  _glUniformSubroutinesuiv(shadertype, count, indices);
  PROTO3D_CHECK_GL_ERROR("glUniformSubroutinesuiv");
}
void glGetUniformSubroutineuiv(GLenum shadertype, GLint location, GLuint *params) {
  _glGetUniformSubroutineuiv(shadertype, location, params);
  PROTO3D_CHECK_GL_ERROR("glGetUniformSubroutineuiv");
}
void glGetProgramStageiv(GLuint program, GLenum shadertype, GLenum pname, GLint *values) {
  _glGetProgramStageiv(program, shadertype, pname, values);
  PROTO3D_CHECK_GL_ERROR("glGetProgramStageiv");
}
void glPatchParameteri(GLenum pname, GLint value) {
  _glPatchParameteri(pname, value);
  PROTO3D_CHECK_GL_ERROR("glPatchParameteri");
}
void glPatchParameterfv(GLenum pname, const GLfloat *values) {
  _glPatchParameterfv(pname, values);
  PROTO3D_CHECK_GL_ERROR("glPatchParameterfv");
}
void glBindTransformFeedback(GLenum target, GLuint id) {
  _glBindTransformFeedback(target, id);
  PROTO3D_CHECK_GL_ERROR("glBindTransformFeedback");
}
void glDeleteTransformFeedbacks(GLsizei n, const GLuint *ids) {
  _glDeleteTransformFeedbacks(n, ids);
  PROTO3D_CHECK_GL_ERROR("glDeleteTransformFeedbacks");
}
void glGenTransformFeedbacks(GLsizei n, GLuint *ids) {
  _glGenTransformFeedbacks(n, ids);
  PROTO3D_CHECK_GL_ERROR("glGenTransformFeedbacks");
}
GLboolean glIsTransformFeedback(GLuint id) {
  GLboolean ret = _glIsTransformFeedback(id);
  PROTO3D_CHECK_GL_ERROR("glIsTransformFeedback");
  return ret;
}
void glPauseTransformFeedback(void) {
  _glPauseTransformFeedback();
  PROTO3D_CHECK_GL_ERROR("glPauseTransformFeedback");
}
void glResumeTransformFeedback(void) {
  _glResumeTransformFeedback();
  PROTO3D_CHECK_GL_ERROR("glResumeTransformFeedback");
}
void glDrawTransformFeedback(GLenum mode, GLuint id) {
  _glDrawTransformFeedback(mode, id);
  PROTO3D_CHECK_GL_ERROR("glDrawTransformFeedback");
}
void glDrawTransformFeedbackStream(GLenum mode, GLuint id, GLuint stream) {
  _glDrawTransformFeedbackStream(mode, id, stream);
  PROTO3D_CHECK_GL_ERROR("glDrawTransformFeedbackStream");
}
void glBeginQueryIndexed(GLenum target, GLuint index, GLuint id) {
  _glBeginQueryIndexed(target, index, id);
  PROTO3D_CHECK_GL_ERROR("glBeginQueryIndexed");
}
void glEndQueryIndexed(GLenum target, GLuint index) {
  _glEndQueryIndexed(target, index);
  PROTO3D_CHECK_GL_ERROR("glEndQueryIndexed");
}
void glGetQueryIndexediv(GLenum target, GLuint index, GLenum pname, GLint *params) {
  _glGetQueryIndexediv(target, index, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetQueryIndexediv");
}
void glReleaseShaderCompiler(void) {
  _glReleaseShaderCompiler();
  PROTO3D_CHECK_GL_ERROR("glReleaseShaderCompiler");
}
void glShaderBinary(GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length) {
  _glShaderBinary(count, shaders, binaryformat, binary, length);
  PROTO3D_CHECK_GL_ERROR("glShaderBinary");
}
void glGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision) {
  _glGetShaderPrecisionFormat(shadertype, precisiontype, range, precision);
  PROTO3D_CHECK_GL_ERROR("glGetShaderPrecisionFormat");
}
void glDepthRangef(GLfloat n, GLfloat f) {
  _glDepthRangef(n, f);
  PROTO3D_CHECK_GL_ERROR("glDepthRangef");
}
void glClearDepthf(GLfloat d) {
  _glClearDepthf(d);
  PROTO3D_CHECK_GL_ERROR("glClearDepthf");
}
void glGetProgramBinary(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary) {
  _glGetProgramBinary(program, bufSize, length, binaryFormat, binary);
  PROTO3D_CHECK_GL_ERROR("glGetProgramBinary");
}
void glProgramBinary(GLuint program, GLenum binaryFormat, const void *binary, GLsizei length) {
  _glProgramBinary(program, binaryFormat, binary, length);
  PROTO3D_CHECK_GL_ERROR("glProgramBinary");
}
void glProgramParameteri(GLuint program, GLenum pname, GLint value) {
  _glProgramParameteri(program, pname, value);
  PROTO3D_CHECK_GL_ERROR("glProgramParameteri");
}
void glUseProgramStages(GLuint pipeline, GLbitfield stages, GLuint program) {
  _glUseProgramStages(pipeline, stages, program);
  PROTO3D_CHECK_GL_ERROR("glUseProgramStages");
}
void glActiveShaderProgram(GLuint pipeline, GLuint program) {
  _glActiveShaderProgram(pipeline, program);
  PROTO3D_CHECK_GL_ERROR("glActiveShaderProgram");
}
GLuint glCreateShaderProgramv(GLenum type, GLsizei count, const GLchar *const*strings) {
  GLuint ret = _glCreateShaderProgramv(type, count, strings);
  PROTO3D_CHECK_GL_ERROR("glCreateShaderProgramv");
  return ret;
}
void glBindProgramPipeline(GLuint pipeline) {
  _glBindProgramPipeline(pipeline);
  PROTO3D_CHECK_GL_ERROR("glBindProgramPipeline");
}
void glDeleteProgramPipelines(GLsizei n, const GLuint *pipelines) {
  _glDeleteProgramPipelines(n, pipelines);
  PROTO3D_CHECK_GL_ERROR("glDeleteProgramPipelines");
}
void glGenProgramPipelines(GLsizei n, GLuint *pipelines) {
  _glGenProgramPipelines(n, pipelines);
  PROTO3D_CHECK_GL_ERROR("glGenProgramPipelines");
}
GLboolean glIsProgramPipeline(GLuint pipeline) {
  GLboolean ret = _glIsProgramPipeline(pipeline);
  PROTO3D_CHECK_GL_ERROR("glIsProgramPipeline");
  return ret;
}
void glGetProgramPipelineiv(GLuint pipeline, GLenum pname, GLint *params) {
  _glGetProgramPipelineiv(pipeline, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetProgramPipelineiv");
}
void glProgramUniform1i(GLuint program, GLint location, GLint v0) {
  _glProgramUniform1i(program, location, v0);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform1i");
}
void glProgramUniform1iv(GLuint program, GLint location, GLsizei count, const GLint *value) {
  _glProgramUniform1iv(program, location, count, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform1iv");
}
void glProgramUniform1f(GLuint program, GLint location, GLfloat v0) {
  _glProgramUniform1f(program, location, v0);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform1f");
}
void glProgramUniform1fv(GLuint program, GLint location, GLsizei count, const GLfloat *value) {
  _glProgramUniform1fv(program, location, count, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform1fv");
}
void glProgramUniform1d(GLuint program, GLint location, GLdouble v0) {
  _glProgramUniform1d(program, location, v0);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform1d");
}
void glProgramUniform1dv(GLuint program, GLint location, GLsizei count, const GLdouble *value) {
  _glProgramUniform1dv(program, location, count, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform1dv");
}
void glProgramUniform1ui(GLuint program, GLint location, GLuint v0) {
  _glProgramUniform1ui(program, location, v0);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform1ui");
}
void glProgramUniform1uiv(GLuint program, GLint location, GLsizei count, const GLuint *value) {
  _glProgramUniform1uiv(program, location, count, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform1uiv");
}
void glProgramUniform2i(GLuint program, GLint location, GLint v0, GLint v1) {
  _glProgramUniform2i(program, location, v0, v1);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform2i");
}
void glProgramUniform2iv(GLuint program, GLint location, GLsizei count, const GLint *value) {
  _glProgramUniform2iv(program, location, count, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform2iv");
}
void glProgramUniform2f(GLuint program, GLint location, GLfloat v0, GLfloat v1) {
  _glProgramUniform2f(program, location, v0, v1);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform2f");
}
void glProgramUniform2fv(GLuint program, GLint location, GLsizei count, const GLfloat *value) {
  _glProgramUniform2fv(program, location, count, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform2fv");
}
void glProgramUniform2d(GLuint program, GLint location, GLdouble v0, GLdouble v1) {
  _glProgramUniform2d(program, location, v0, v1);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform2d");
}
void glProgramUniform2dv(GLuint program, GLint location, GLsizei count, const GLdouble *value) {
  _glProgramUniform2dv(program, location, count, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform2dv");
}
void glProgramUniform2ui(GLuint program, GLint location, GLuint v0, GLuint v1) {
  _glProgramUniform2ui(program, location, v0, v1);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform2ui");
}
void glProgramUniform2uiv(GLuint program, GLint location, GLsizei count, const GLuint *value) {
  _glProgramUniform2uiv(program, location, count, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform2uiv");
}
void glProgramUniform3i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2) {
  _glProgramUniform3i(program, location, v0, v1, v2);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform3i");
}
void glProgramUniform3iv(GLuint program, GLint location, GLsizei count, const GLint *value) {
  _glProgramUniform3iv(program, location, count, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform3iv");
}
void glProgramUniform3f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2) {
  _glProgramUniform3f(program, location, v0, v1, v2);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform3f");
}
void glProgramUniform3fv(GLuint program, GLint location, GLsizei count, const GLfloat *value) {
  _glProgramUniform3fv(program, location, count, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform3fv");
}
void glProgramUniform3d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2) {
  _glProgramUniform3d(program, location, v0, v1, v2);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform3d");
}
void glProgramUniform3dv(GLuint program, GLint location, GLsizei count, const GLdouble *value) {
  _glProgramUniform3dv(program, location, count, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform3dv");
}
void glProgramUniform3ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2) {
  _glProgramUniform3ui(program, location, v0, v1, v2);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform3ui");
}
void glProgramUniform3uiv(GLuint program, GLint location, GLsizei count, const GLuint *value) {
  _glProgramUniform3uiv(program, location, count, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform3uiv");
}
void glProgramUniform4i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3) {
  _glProgramUniform4i(program, location, v0, v1, v2, v3);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform4i");
}
void glProgramUniform4iv(GLuint program, GLint location, GLsizei count, const GLint *value) {
  _glProgramUniform4iv(program, location, count, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform4iv");
}
void glProgramUniform4f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) {
  _glProgramUniform4f(program, location, v0, v1, v2, v3);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform4f");
}
void glProgramUniform4fv(GLuint program, GLint location, GLsizei count, const GLfloat *value) {
  _glProgramUniform4fv(program, location, count, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform4fv");
}
void glProgramUniform4d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3) {
  _glProgramUniform4d(program, location, v0, v1, v2, v3);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform4d");
}
void glProgramUniform4dv(GLuint program, GLint location, GLsizei count, const GLdouble *value) {
  _glProgramUniform4dv(program, location, count, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform4dv");
}
void glProgramUniform4ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) {
  _glProgramUniform4ui(program, location, v0, v1, v2, v3);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform4ui");
}
void glProgramUniform4uiv(GLuint program, GLint location, GLsizei count, const GLuint *value) {
  _glProgramUniform4uiv(program, location, count, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform4uiv");
}
void glProgramUniformMatrix2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  _glProgramUniformMatrix2fv(program, location, count, transpose, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniformMatrix2fv");
}
void glProgramUniformMatrix3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  _glProgramUniformMatrix3fv(program, location, count, transpose, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniformMatrix3fv");
}
void glProgramUniformMatrix4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  _glProgramUniformMatrix4fv(program, location, count, transpose, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniformMatrix4fv");
}
void glProgramUniformMatrix2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  _glProgramUniformMatrix2dv(program, location, count, transpose, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniformMatrix2dv");
}
void glProgramUniformMatrix3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  _glProgramUniformMatrix3dv(program, location, count, transpose, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniformMatrix3dv");
}
void glProgramUniformMatrix4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  _glProgramUniformMatrix4dv(program, location, count, transpose, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniformMatrix4dv");
}
void glProgramUniformMatrix2x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  _glProgramUniformMatrix2x3fv(program, location, count, transpose, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniformMatrix2x3fv");
}
void glProgramUniformMatrix3x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  _glProgramUniformMatrix3x2fv(program, location, count, transpose, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniformMatrix3x2fv");
}
void glProgramUniformMatrix2x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  _glProgramUniformMatrix2x4fv(program, location, count, transpose, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniformMatrix2x4fv");
}
void glProgramUniformMatrix4x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  _glProgramUniformMatrix4x2fv(program, location, count, transpose, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniformMatrix4x2fv");
}
void glProgramUniformMatrix3x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  _glProgramUniformMatrix3x4fv(program, location, count, transpose, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniformMatrix3x4fv");
}
void glProgramUniformMatrix4x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  _glProgramUniformMatrix4x3fv(program, location, count, transpose, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniformMatrix4x3fv");
}
void glProgramUniformMatrix2x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  _glProgramUniformMatrix2x3dv(program, location, count, transpose, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniformMatrix2x3dv");
}
void glProgramUniformMatrix3x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  _glProgramUniformMatrix3x2dv(program, location, count, transpose, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniformMatrix3x2dv");
}
void glProgramUniformMatrix2x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  _glProgramUniformMatrix2x4dv(program, location, count, transpose, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniformMatrix2x4dv");
}
void glProgramUniformMatrix4x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  _glProgramUniformMatrix4x2dv(program, location, count, transpose, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniformMatrix4x2dv");
}
void glProgramUniformMatrix3x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  _glProgramUniformMatrix3x4dv(program, location, count, transpose, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniformMatrix3x4dv");
}
void glProgramUniformMatrix4x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  _glProgramUniformMatrix4x3dv(program, location, count, transpose, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniformMatrix4x3dv");
}
void glValidateProgramPipeline(GLuint pipeline) {
  _glValidateProgramPipeline(pipeline);
  PROTO3D_CHECK_GL_ERROR("glValidateProgramPipeline");
}
void glGetProgramPipelineInfoLog(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog) {
  _glGetProgramPipelineInfoLog(pipeline, bufSize, length, infoLog);
  PROTO3D_CHECK_GL_ERROR("glGetProgramPipelineInfoLog");
}
void glVertexAttribL1d(GLuint index, GLdouble x) {
  _glVertexAttribL1d(index, x);
  PROTO3D_CHECK_GL_ERROR("glVertexAttribL1d");
}
void glVertexAttribL2d(GLuint index, GLdouble x, GLdouble y) {
  _glVertexAttribL2d(index, x, y);
  PROTO3D_CHECK_GL_ERROR("glVertexAttribL2d");
}
void glVertexAttribL3d(GLuint index, GLdouble x, GLdouble y, GLdouble z) {
  _glVertexAttribL3d(index, x, y, z);
  PROTO3D_CHECK_GL_ERROR("glVertexAttribL3d");
}
void glVertexAttribL4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  _glVertexAttribL4d(index, x, y, z, w);
  PROTO3D_CHECK_GL_ERROR("glVertexAttribL4d");
}
void glVertexAttribL1dv(GLuint index, const GLdouble *v) {
  _glVertexAttribL1dv(index, v);
  PROTO3D_CHECK_GL_ERROR("glVertexAttribL1dv");
}
void glVertexAttribL2dv(GLuint index, const GLdouble *v) {
  _glVertexAttribL2dv(index, v);
  PROTO3D_CHECK_GL_ERROR("glVertexAttribL2dv");
}
void glVertexAttribL3dv(GLuint index, const GLdouble *v) {
  _glVertexAttribL3dv(index, v);
  PROTO3D_CHECK_GL_ERROR("glVertexAttribL3dv");
}
void glVertexAttribL4dv(GLuint index, const GLdouble *v) {
  _glVertexAttribL4dv(index, v);
  PROTO3D_CHECK_GL_ERROR("glVertexAttribL4dv");
}
void glVertexAttribLPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer) {
  _glVertexAttribLPointer(index, size, type, stride, pointer);
  PROTO3D_CHECK_GL_ERROR("glVertexAttribLPointer");
}
void glGetVertexAttribLdv(GLuint index, GLenum pname, GLdouble *params) {
  _glGetVertexAttribLdv(index, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetVertexAttribLdv");
}
void glViewportArrayv(GLuint first, GLsizei count, const GLfloat *v) {
  _glViewportArrayv(first, count, v);
  PROTO3D_CHECK_GL_ERROR("glViewportArrayv");
}
void glViewportIndexedf(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h) {
  _glViewportIndexedf(index, x, y, w, h);
  PROTO3D_CHECK_GL_ERROR("glViewportIndexedf");
}
void glViewportIndexedfv(GLuint index, const GLfloat *v) {
  _glViewportIndexedfv(index, v);
  PROTO3D_CHECK_GL_ERROR("glViewportIndexedfv");
}
void glScissorArrayv(GLuint first, GLsizei count, const GLint *v) {
  _glScissorArrayv(first, count, v);
  PROTO3D_CHECK_GL_ERROR("glScissorArrayv");
}
void glScissorIndexed(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height) {
  _glScissorIndexed(index, left, bottom, width, height);
  PROTO3D_CHECK_GL_ERROR("glScissorIndexed");
}
void glScissorIndexedv(GLuint index, const GLint *v) {
  _glScissorIndexedv(index, v);
  PROTO3D_CHECK_GL_ERROR("glScissorIndexedv");
}
void glDepthRangeArrayv(GLuint first, GLsizei count, const GLdouble *v) {
  _glDepthRangeArrayv(first, count, v);
  PROTO3D_CHECK_GL_ERROR("glDepthRangeArrayv");
}
void glDepthRangeIndexed(GLuint index, GLdouble n, GLdouble f) {
  _glDepthRangeIndexed(index, n, f);
  PROTO3D_CHECK_GL_ERROR("glDepthRangeIndexed");
}
void glGetFloati_v(GLenum target, GLuint index, GLfloat *data) {
  _glGetFloati_v(target, index, data);
  PROTO3D_CHECK_GL_ERROR("glGetFloati_v");
}
void glGetDoublei_v(GLenum target, GLuint index, GLdouble *data) {
  _glGetDoublei_v(target, index, data);
  PROTO3D_CHECK_GL_ERROR("glGetDoublei_v");
}
void glDrawArraysInstancedBaseInstance(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance) {
  _glDrawArraysInstancedBaseInstance(mode, first, count, instancecount, baseinstance);
  PROTO3D_CHECK_GL_ERROR("glDrawArraysInstancedBaseInstance");
}
void glDrawElementsInstancedBaseInstance(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance) {
  _glDrawElementsInstancedBaseInstance(mode, count, type, indices, instancecount, baseinstance);
  PROTO3D_CHECK_GL_ERROR("glDrawElementsInstancedBaseInstance");
}
void glDrawElementsInstancedBaseVertexBaseInstance(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance) {
  _glDrawElementsInstancedBaseVertexBaseInstance(mode, count, type, indices, instancecount, basevertex, baseinstance);
  PROTO3D_CHECK_GL_ERROR("glDrawElementsInstancedBaseVertexBaseInstance");
}
void glGetInternalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params) {
  _glGetInternalformativ(target, internalformat, pname, bufSize, params);
  PROTO3D_CHECK_GL_ERROR("glGetInternalformativ");
}
void glGetActiveAtomicCounterBufferiv(GLuint program, GLuint bufferIndex, GLenum pname, GLint *params) {
  _glGetActiveAtomicCounterBufferiv(program, bufferIndex, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetActiveAtomicCounterBufferiv");
}
void glBindImageTexture(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format) {
  _glBindImageTexture(unit, texture, level, layered, layer, access, format);
  PROTO3D_CHECK_GL_ERROR("glBindImageTexture");
}
void glMemoryBarrier(GLbitfield barriers) {
  _glMemoryBarrier(barriers);
  PROTO3D_CHECK_GL_ERROR("glMemoryBarrier");
}
void glTexStorage1D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width) {
  _glTexStorage1D(target, levels, internalformat, width);
  PROTO3D_CHECK_GL_ERROR("glTexStorage1D");
}
void glTexStorage2D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) {
  _glTexStorage2D(target, levels, internalformat, width, height);
  PROTO3D_CHECK_GL_ERROR("glTexStorage2D");
}
void glTexStorage3D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) {
  _glTexStorage3D(target, levels, internalformat, width, height, depth);
  PROTO3D_CHECK_GL_ERROR("glTexStorage3D");
}
void glDrawTransformFeedbackInstanced(GLenum mode, GLuint id, GLsizei instancecount) {
  _glDrawTransformFeedbackInstanced(mode, id, instancecount);
  PROTO3D_CHECK_GL_ERROR("glDrawTransformFeedbackInstanced");
}
void glDrawTransformFeedbackStreamInstanced(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount) {
  _glDrawTransformFeedbackStreamInstanced(mode, id, stream, instancecount);
  PROTO3D_CHECK_GL_ERROR("glDrawTransformFeedbackStreamInstanced");
}
void glClearBufferData(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data) {
  _glClearBufferData(target, internalformat, format, type, data);
  PROTO3D_CHECK_GL_ERROR("glClearBufferData");
}
void glClearBufferSubData(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data) {
  _glClearBufferSubData(target, internalformat, offset, size, format, type, data);
  PROTO3D_CHECK_GL_ERROR("glClearBufferSubData");
}
void glDispatchCompute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z) {
  _glDispatchCompute(num_groups_x, num_groups_y, num_groups_z);
  PROTO3D_CHECK_GL_ERROR("glDispatchCompute");
}
void glDispatchComputeIndirect(GLintptr indirect) {
  _glDispatchComputeIndirect(indirect);
  PROTO3D_CHECK_GL_ERROR("glDispatchComputeIndirect");
}
void glCopyImageSubData(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth) {
  _glCopyImageSubData(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
  PROTO3D_CHECK_GL_ERROR("glCopyImageSubData");
}
void glFramebufferParameteri(GLenum target, GLenum pname, GLint param) {
  _glFramebufferParameteri(target, pname, param);
  PROTO3D_CHECK_GL_ERROR("glFramebufferParameteri");
}
void glGetFramebufferParameteriv(GLenum target, GLenum pname, GLint *params) {
  _glGetFramebufferParameteriv(target, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetFramebufferParameteriv");
}
void glGetInternalformati64v(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params) {
  _glGetInternalformati64v(target, internalformat, pname, bufSize, params);
  PROTO3D_CHECK_GL_ERROR("glGetInternalformati64v");
}
void glInvalidateTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth) {
  _glInvalidateTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth);
  PROTO3D_CHECK_GL_ERROR("glInvalidateTexSubImage");
}
void glInvalidateTexImage(GLuint texture, GLint level) {
  _glInvalidateTexImage(texture, level);
  PROTO3D_CHECK_GL_ERROR("glInvalidateTexImage");
}
void glInvalidateBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr length) {
  _glInvalidateBufferSubData(buffer, offset, length);
  PROTO3D_CHECK_GL_ERROR("glInvalidateBufferSubData");
}
void glInvalidateBufferData(GLuint buffer) {
  _glInvalidateBufferData(buffer);
  PROTO3D_CHECK_GL_ERROR("glInvalidateBufferData");
}
void glInvalidateFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments) {
  _glInvalidateFramebuffer(target, numAttachments, attachments);
  PROTO3D_CHECK_GL_ERROR("glInvalidateFramebuffer");
}
void glInvalidateSubFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height) {
  _glInvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height);
  PROTO3D_CHECK_GL_ERROR("glInvalidateSubFramebuffer");
}
void glMultiDrawArraysIndirect(GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride) {
  _glMultiDrawArraysIndirect(mode, indirect, drawcount, stride);
  PROTO3D_CHECK_GL_ERROR("glMultiDrawArraysIndirect");
}
void glMultiDrawElementsIndirect(GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride) {
  _glMultiDrawElementsIndirect(mode, type, indirect, drawcount, stride);
  PROTO3D_CHECK_GL_ERROR("glMultiDrawElementsIndirect");
}
void glGetProgramInterfaceiv(GLuint program, GLenum programInterface, GLenum pname, GLint *params) {
  _glGetProgramInterfaceiv(program, programInterface, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetProgramInterfaceiv");
}
GLuint glGetProgramResourceIndex(GLuint program, GLenum programInterface, const GLchar *name) {
  GLuint ret = _glGetProgramResourceIndex(program, programInterface, name);
  PROTO3D_CHECK_GL_ERROR("glGetProgramResourceIndex");
  return ret;
}
void glGetProgramResourceName(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name) {
  _glGetProgramResourceName(program, programInterface, index, bufSize, length, name);
  PROTO3D_CHECK_GL_ERROR("glGetProgramResourceName");
}
void glGetProgramResourceiv(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params) {
  _glGetProgramResourceiv(program, programInterface, index, propCount, props, bufSize, length, params);
  PROTO3D_CHECK_GL_ERROR("glGetProgramResourceiv");
}
GLint glGetProgramResourceLocation(GLuint program, GLenum programInterface, const GLchar *name) {
  GLint ret = _glGetProgramResourceLocation(program, programInterface, name);
  PROTO3D_CHECK_GL_ERROR("glGetProgramResourceLocation");
  return ret;
}
GLint glGetProgramResourceLocationIndex(GLuint program, GLenum programInterface, const GLchar *name) {
  GLint ret = _glGetProgramResourceLocationIndex(program, programInterface, name);
  PROTO3D_CHECK_GL_ERROR("glGetProgramResourceLocationIndex");
  return ret;
}
void glShaderStorageBlockBinding(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding) {
  _glShaderStorageBlockBinding(program, storageBlockIndex, storageBlockBinding);
  PROTO3D_CHECK_GL_ERROR("glShaderStorageBlockBinding");
}
void glTexBufferRange(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) {
  _glTexBufferRange(target, internalformat, buffer, offset, size);
  PROTO3D_CHECK_GL_ERROR("glTexBufferRange");
}
void glTexStorage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) {
  _glTexStorage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations);
  PROTO3D_CHECK_GL_ERROR("glTexStorage2DMultisample");
}
void glTexStorage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) {
  _glTexStorage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations);
  PROTO3D_CHECK_GL_ERROR("glTexStorage3DMultisample");
}
void glTextureView(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers) {
  _glTextureView(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
  PROTO3D_CHECK_GL_ERROR("glTextureView");
}
void glBindVertexBuffer(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) {
  _glBindVertexBuffer(bindingindex, buffer, offset, stride);
  PROTO3D_CHECK_GL_ERROR("glBindVertexBuffer");
}
void glVertexAttribFormat(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) {
  _glVertexAttribFormat(attribindex, size, type, normalized, relativeoffset);
  PROTO3D_CHECK_GL_ERROR("glVertexAttribFormat");
}
void glVertexAttribIFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) {
  _glVertexAttribIFormat(attribindex, size, type, relativeoffset);
  PROTO3D_CHECK_GL_ERROR("glVertexAttribIFormat");
}
void glVertexAttribLFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) {
  _glVertexAttribLFormat(attribindex, size, type, relativeoffset);
  PROTO3D_CHECK_GL_ERROR("glVertexAttribLFormat");
}
void glVertexAttribBinding(GLuint attribindex, GLuint bindingindex) {
  _glVertexAttribBinding(attribindex, bindingindex);
  PROTO3D_CHECK_GL_ERROR("glVertexAttribBinding");
}
void glVertexBindingDivisor(GLuint bindingindex, GLuint divisor) {
  _glVertexBindingDivisor(bindingindex, divisor);
  PROTO3D_CHECK_GL_ERROR("glVertexBindingDivisor");
}
void glDebugMessageControl(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled) {
  _glDebugMessageControl(source, type, severity, count, ids, enabled);
  PROTO3D_CHECK_GL_ERROR("glDebugMessageControl");
}
void glDebugMessageInsert(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf) {
  _glDebugMessageInsert(source, type, id, severity, length, buf);
  PROTO3D_CHECK_GL_ERROR("glDebugMessageInsert");
}
void glDebugMessageCallback(GLDEBUGPROC callback, const void *userParam) {
  _glDebugMessageCallback(callback, userParam);
  PROTO3D_CHECK_GL_ERROR("glDebugMessageCallback");
}
GLuint glGetDebugMessageLog(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog) {
  GLuint ret = _glGetDebugMessageLog(count, bufSize, sources, types, ids, severities, lengths, messageLog);
  PROTO3D_CHECK_GL_ERROR("glGetDebugMessageLog");
  return ret;
}
void glPushDebugGroup(GLenum source, GLuint id, GLsizei length, const GLchar *message) {
  _glPushDebugGroup(source, id, length, message);
  PROTO3D_CHECK_GL_ERROR("glPushDebugGroup");
}
void glPopDebugGroup(void) {
  _glPopDebugGroup();
  PROTO3D_CHECK_GL_ERROR("glPopDebugGroup");
}
void glObjectLabel(GLenum identifier, GLuint name, GLsizei length, const GLchar *label) {
  _glObjectLabel(identifier, name, length, label);
  PROTO3D_CHECK_GL_ERROR("glObjectLabel");
}
void glGetObjectLabel(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label) {
  _glGetObjectLabel(identifier, name, bufSize, length, label);
  PROTO3D_CHECK_GL_ERROR("glGetObjectLabel");
}
void glObjectPtrLabel(const void *ptr, GLsizei length, const GLchar *label) {
  _glObjectPtrLabel(ptr, length, label);
  PROTO3D_CHECK_GL_ERROR("glObjectPtrLabel");
}
void glGetObjectPtrLabel(const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label) {
  _glGetObjectPtrLabel(ptr, bufSize, length, label);
  PROTO3D_CHECK_GL_ERROR("glGetObjectPtrLabel");
}
void glBufferStorage(GLenum target, GLsizeiptr size, const void *data, GLbitfield flags) {
  _glBufferStorage(target, size, data, flags);
  PROTO3D_CHECK_GL_ERROR("glBufferStorage");
}
void glClearTexImage(GLuint texture, GLint level, GLenum format, GLenum type, const void *data) {
  _glClearTexImage(texture, level, format, type, data);
  PROTO3D_CHECK_GL_ERROR("glClearTexImage");
}
void glClearTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data) {
  _glClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);
  PROTO3D_CHECK_GL_ERROR("glClearTexSubImage");
}
void glBindBuffersBase(GLenum target, GLuint first, GLsizei count, const GLuint *buffers) {
  _glBindBuffersBase(target, first, count, buffers);
  PROTO3D_CHECK_GL_ERROR("glBindBuffersBase");
}
void glBindBuffersRange(GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes) {
  _glBindBuffersRange(target, first, count, buffers, offsets, sizes);
  PROTO3D_CHECK_GL_ERROR("glBindBuffersRange");
}
void glBindTextures(GLuint first, GLsizei count, const GLuint *textures) {
  _glBindTextures(first, count, textures);
  PROTO3D_CHECK_GL_ERROR("glBindTextures");
}
void glBindSamplers(GLuint first, GLsizei count, const GLuint *samplers) {
  _glBindSamplers(first, count, samplers);
  PROTO3D_CHECK_GL_ERROR("glBindSamplers");
}
void glBindImageTextures(GLuint first, GLsizei count, const GLuint *textures) {
  _glBindImageTextures(first, count, textures);
  PROTO3D_CHECK_GL_ERROR("glBindImageTextures");
}
void glBindVertexBuffers(GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides) {
  _glBindVertexBuffers(first, count, buffers, offsets, strides);
  PROTO3D_CHECK_GL_ERROR("glBindVertexBuffers");
}
void glClipControl(GLenum origin, GLenum depth) {
  _glClipControl(origin, depth);
  PROTO3D_CHECK_GL_ERROR("glClipControl");
}
void glCreateTransformFeedbacks(GLsizei n, GLuint *ids) {
  _glCreateTransformFeedbacks(n, ids);
  PROTO3D_CHECK_GL_ERROR("glCreateTransformFeedbacks");
}
void glTransformFeedbackBufferBase(GLuint xfb, GLuint index, GLuint buffer) {
  _glTransformFeedbackBufferBase(xfb, index, buffer);
  PROTO3D_CHECK_GL_ERROR("glTransformFeedbackBufferBase");
}
void glTransformFeedbackBufferRange(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) {
  _glTransformFeedbackBufferRange(xfb, index, buffer, offset, size);
  PROTO3D_CHECK_GL_ERROR("glTransformFeedbackBufferRange");
}
void glGetTransformFeedbackiv(GLuint xfb, GLenum pname, GLint *param) {
  _glGetTransformFeedbackiv(xfb, pname, param);
  PROTO3D_CHECK_GL_ERROR("glGetTransformFeedbackiv");
}
void glGetTransformFeedbacki_v(GLuint xfb, GLenum pname, GLuint index, GLint *param) {
  _glGetTransformFeedbacki_v(xfb, pname, index, param);
  PROTO3D_CHECK_GL_ERROR("glGetTransformFeedbacki_v");
}
void glGetTransformFeedbacki64_v(GLuint xfb, GLenum pname, GLuint index, GLint64 *param) {
  _glGetTransformFeedbacki64_v(xfb, pname, index, param);
  PROTO3D_CHECK_GL_ERROR("glGetTransformFeedbacki64_v");
}
void glCreateBuffers(GLsizei n, GLuint *buffers) {
  _glCreateBuffers(n, buffers);
  PROTO3D_CHECK_GL_ERROR("glCreateBuffers");
}
void glNamedBufferStorage(GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags) {
  _glNamedBufferStorage(buffer, size, data, flags);
  PROTO3D_CHECK_GL_ERROR("glNamedBufferStorage");
}
void glNamedBufferData(GLuint buffer, GLsizeiptr size, const void *data, GLenum usage) {
  _glNamedBufferData(buffer, size, data, usage);
  PROTO3D_CHECK_GL_ERROR("glNamedBufferData");
}
void glNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data) {
  _glNamedBufferSubData(buffer, offset, size, data);
  PROTO3D_CHECK_GL_ERROR("glNamedBufferSubData");
}
void glCopyNamedBufferSubData(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) {
  _glCopyNamedBufferSubData(readBuffer, writeBuffer, readOffset, writeOffset, size);
  PROTO3D_CHECK_GL_ERROR("glCopyNamedBufferSubData");
}
void glClearNamedBufferData(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data) {
  _glClearNamedBufferData(buffer, internalformat, format, type, data);
  PROTO3D_CHECK_GL_ERROR("glClearNamedBufferData");
}
void glClearNamedBufferSubData(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data) {
  _glClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data);
  PROTO3D_CHECK_GL_ERROR("glClearNamedBufferSubData");
}
void *glMapNamedBuffer(GLuint buffer, GLenum access) {
  void *ret = _glMapNamedBuffer(buffer, access);
  PROTO3D_CHECK_GL_ERROR("glMapNamedBuffer");
  return ret;
}
void *glMapNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access) {
  void *ret = _glMapNamedBufferRange(buffer, offset, length, access);
  PROTO3D_CHECK_GL_ERROR("glMapNamedBufferRange");
  return ret;
}
GLboolean glUnmapNamedBuffer(GLuint buffer) {
  GLboolean ret = _glUnmapNamedBuffer(buffer);
  PROTO3D_CHECK_GL_ERROR("glUnmapNamedBuffer");
  return ret;
}
void glFlushMappedNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length) {
  _glFlushMappedNamedBufferRange(buffer, offset, length);
  PROTO3D_CHECK_GL_ERROR("glFlushMappedNamedBufferRange");
}
void glGetNamedBufferParameteriv(GLuint buffer, GLenum pname, GLint *params) {
  _glGetNamedBufferParameteriv(buffer, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetNamedBufferParameteriv");
}
void glGetNamedBufferParameteri64v(GLuint buffer, GLenum pname, GLint64 *params) {
  _glGetNamedBufferParameteri64v(buffer, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetNamedBufferParameteri64v");
}
void glGetNamedBufferPointerv(GLuint buffer, GLenum pname, void **params) {
  _glGetNamedBufferPointerv(buffer, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetNamedBufferPointerv");
}
void glGetNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, void *data) {
  _glGetNamedBufferSubData(buffer, offset, size, data);
  PROTO3D_CHECK_GL_ERROR("glGetNamedBufferSubData");
}
void glCreateFramebuffers(GLsizei n, GLuint *framebuffers) {
  _glCreateFramebuffers(n, framebuffers);
  PROTO3D_CHECK_GL_ERROR("glCreateFramebuffers");
}
void glNamedFramebufferRenderbuffer(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) {
  _glNamedFramebufferRenderbuffer(framebuffer, attachment, renderbuffertarget, renderbuffer);
  PROTO3D_CHECK_GL_ERROR("glNamedFramebufferRenderbuffer");
}
void glNamedFramebufferParameteri(GLuint framebuffer, GLenum pname, GLint param) {
  _glNamedFramebufferParameteri(framebuffer, pname, param);
  PROTO3D_CHECK_GL_ERROR("glNamedFramebufferParameteri");
}
void glNamedFramebufferTexture(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level) {
  _glNamedFramebufferTexture(framebuffer, attachment, texture, level);
  PROTO3D_CHECK_GL_ERROR("glNamedFramebufferTexture");
}
void glNamedFramebufferTextureLayer(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer) {
  _glNamedFramebufferTextureLayer(framebuffer, attachment, texture, level, layer);
  PROTO3D_CHECK_GL_ERROR("glNamedFramebufferTextureLayer");
}
void glNamedFramebufferDrawBuffer(GLuint framebuffer, GLenum buf) {
  _glNamedFramebufferDrawBuffer(framebuffer, buf);
  PROTO3D_CHECK_GL_ERROR("glNamedFramebufferDrawBuffer");
}
void glNamedFramebufferDrawBuffers(GLuint framebuffer, GLsizei n, const GLenum *bufs) {
  _glNamedFramebufferDrawBuffers(framebuffer, n, bufs);
  PROTO3D_CHECK_GL_ERROR("glNamedFramebufferDrawBuffers");
}
void glNamedFramebufferReadBuffer(GLuint framebuffer, GLenum src) {
  _glNamedFramebufferReadBuffer(framebuffer, src);
  PROTO3D_CHECK_GL_ERROR("glNamedFramebufferReadBuffer");
}
void glInvalidateNamedFramebufferData(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments) {
  _glInvalidateNamedFramebufferData(framebuffer, numAttachments, attachments);
  PROTO3D_CHECK_GL_ERROR("glInvalidateNamedFramebufferData");
}
void glInvalidateNamedFramebufferSubData(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height) {
  _glInvalidateNamedFramebufferSubData(framebuffer, numAttachments, attachments, x, y, width, height);
  PROTO3D_CHECK_GL_ERROR("glInvalidateNamedFramebufferSubData");
}
void glClearNamedFramebufferiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint *value) {
  _glClearNamedFramebufferiv(framebuffer, buffer, drawbuffer, value);
  PROTO3D_CHECK_GL_ERROR("glClearNamedFramebufferiv");
}
void glClearNamedFramebufferuiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint *value) {
  _glClearNamedFramebufferuiv(framebuffer, buffer, drawbuffer, value);
  PROTO3D_CHECK_GL_ERROR("glClearNamedFramebufferuiv");
}
void glClearNamedFramebufferfv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat *value) {
  _glClearNamedFramebufferfv(framebuffer, buffer, drawbuffer, value);
  PROTO3D_CHECK_GL_ERROR("glClearNamedFramebufferfv");
}
void glClearNamedFramebufferfi(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil) {
  _glClearNamedFramebufferfi(framebuffer, buffer, drawbuffer, depth, stencil);
  PROTO3D_CHECK_GL_ERROR("glClearNamedFramebufferfi");
}
void glBlitNamedFramebuffer(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) {
  _glBlitNamedFramebuffer(readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
  PROTO3D_CHECK_GL_ERROR("glBlitNamedFramebuffer");
}
GLenum glCheckNamedFramebufferStatus(GLuint framebuffer, GLenum target) {
  GLenum ret = _glCheckNamedFramebufferStatus(framebuffer, target);
  PROTO3D_CHECK_GL_ERROR("glCheckNamedFramebufferStatus");
  return ret;
}
void glGetNamedFramebufferParameteriv(GLuint framebuffer, GLenum pname, GLint *param) {
  _glGetNamedFramebufferParameteriv(framebuffer, pname, param);
  PROTO3D_CHECK_GL_ERROR("glGetNamedFramebufferParameteriv");
}
void glGetNamedFramebufferAttachmentParameteriv(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params) {
  _glGetNamedFramebufferAttachmentParameteriv(framebuffer, attachment, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetNamedFramebufferAttachmentParameteriv");
}
void glCreateRenderbuffers(GLsizei n, GLuint *renderbuffers) {
  _glCreateRenderbuffers(n, renderbuffers);
  PROTO3D_CHECK_GL_ERROR("glCreateRenderbuffers");
}
void glNamedRenderbufferStorage(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height) {
  _glNamedRenderbufferStorage(renderbuffer, internalformat, width, height);
  PROTO3D_CHECK_GL_ERROR("glNamedRenderbufferStorage");
}
void glNamedRenderbufferStorageMultisample(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) {
  _glNamedRenderbufferStorageMultisample(renderbuffer, samples, internalformat, width, height);
  PROTO3D_CHECK_GL_ERROR("glNamedRenderbufferStorageMultisample");
}
void glGetNamedRenderbufferParameteriv(GLuint renderbuffer, GLenum pname, GLint *params) {
  _glGetNamedRenderbufferParameteriv(renderbuffer, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetNamedRenderbufferParameteriv");
}
void glCreateTextures(GLenum target, GLsizei n, GLuint *textures) {
  _glCreateTextures(target, n, textures);
  PROTO3D_CHECK_GL_ERROR("glCreateTextures");
}
void glTextureBuffer(GLuint texture, GLenum internalformat, GLuint buffer) {
  _glTextureBuffer(texture, internalformat, buffer);
  PROTO3D_CHECK_GL_ERROR("glTextureBuffer");
}
void glTextureBufferRange(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) {
  _glTextureBufferRange(texture, internalformat, buffer, offset, size);
  PROTO3D_CHECK_GL_ERROR("glTextureBufferRange");
}
void glTextureStorage1D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width) {
  _glTextureStorage1D(texture, levels, internalformat, width);
  PROTO3D_CHECK_GL_ERROR("glTextureStorage1D");
}
void glTextureStorage2D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) {
  _glTextureStorage2D(texture, levels, internalformat, width, height);
  PROTO3D_CHECK_GL_ERROR("glTextureStorage2D");
}
void glTextureStorage3D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) {
  _glTextureStorage3D(texture, levels, internalformat, width, height, depth);
  PROTO3D_CHECK_GL_ERROR("glTextureStorage3D");
}
void glTextureStorage2DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) {
  _glTextureStorage2DMultisample(texture, samples, internalformat, width, height, fixedsamplelocations);
  PROTO3D_CHECK_GL_ERROR("glTextureStorage2DMultisample");
}
void glTextureStorage3DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) {
  _glTextureStorage3DMultisample(texture, samples, internalformat, width, height, depth, fixedsamplelocations);
  PROTO3D_CHECK_GL_ERROR("glTextureStorage3DMultisample");
}
void glTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels) {
  _glTextureSubImage1D(texture, level, xoffset, width, format, type, pixels);
  PROTO3D_CHECK_GL_ERROR("glTextureSubImage1D");
}
void glTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels) {
  _glTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, type, pixels);
  PROTO3D_CHECK_GL_ERROR("glTextureSubImage2D");
}
void glTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels) {
  _glTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
  PROTO3D_CHECK_GL_ERROR("glTextureSubImage3D");
}
void glCompressedTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data) {
  _glCompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data);
  PROTO3D_CHECK_GL_ERROR("glCompressedTextureSubImage1D");
}
void glCompressedTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data) {
  _glCompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data);
  PROTO3D_CHECK_GL_ERROR("glCompressedTextureSubImage2D");
}
void glCompressedTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data) {
  _glCompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
  PROTO3D_CHECK_GL_ERROR("glCompressedTextureSubImage3D");
}
void glCopyTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) {
  _glCopyTextureSubImage1D(texture, level, xoffset, x, y, width);
  PROTO3D_CHECK_GL_ERROR("glCopyTextureSubImage1D");
}
void glCopyTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
  _glCopyTextureSubImage2D(texture, level, xoffset, yoffset, x, y, width, height);
  PROTO3D_CHECK_GL_ERROR("glCopyTextureSubImage2D");
}
void glCopyTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
  _glCopyTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, x, y, width, height);
  PROTO3D_CHECK_GL_ERROR("glCopyTextureSubImage3D");
}
void glTextureParameterf(GLuint texture, GLenum pname, GLfloat param) {
  _glTextureParameterf(texture, pname, param);
  PROTO3D_CHECK_GL_ERROR("glTextureParameterf");
}
void glTextureParameterfv(GLuint texture, GLenum pname, const GLfloat *param) {
  _glTextureParameterfv(texture, pname, param);
  PROTO3D_CHECK_GL_ERROR("glTextureParameterfv");
}
void glTextureParameteri(GLuint texture, GLenum pname, GLint param) {
  _glTextureParameteri(texture, pname, param);
  PROTO3D_CHECK_GL_ERROR("glTextureParameteri");
}
void glTextureParameterIiv(GLuint texture, GLenum pname, const GLint *params) {
  _glTextureParameterIiv(texture, pname, params);
  PROTO3D_CHECK_GL_ERROR("glTextureParameterIiv");
}
void glTextureParameterIuiv(GLuint texture, GLenum pname, const GLuint *params) {
  _glTextureParameterIuiv(texture, pname, params);
  PROTO3D_CHECK_GL_ERROR("glTextureParameterIuiv");
}
void glTextureParameteriv(GLuint texture, GLenum pname, const GLint *param) {
  _glTextureParameteriv(texture, pname, param);
  PROTO3D_CHECK_GL_ERROR("glTextureParameteriv");
}
void glGenerateTextureMipmap(GLuint texture) {
  _glGenerateTextureMipmap(texture);
  PROTO3D_CHECK_GL_ERROR("glGenerateTextureMipmap");
}
void glBindTextureUnit(GLuint unit, GLuint texture) {
  _glBindTextureUnit(unit, texture);
  PROTO3D_CHECK_GL_ERROR("glBindTextureUnit");
}
void glGetTextureImage(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels) {
  _glGetTextureImage(texture, level, format, type, bufSize, pixels);
  PROTO3D_CHECK_GL_ERROR("glGetTextureImage");
}
void glGetCompressedTextureImage(GLuint texture, GLint level, GLsizei bufSize, void *pixels) {
  _glGetCompressedTextureImage(texture, level, bufSize, pixels);
  PROTO3D_CHECK_GL_ERROR("glGetCompressedTextureImage");
}
void glGetTextureLevelParameterfv(GLuint texture, GLint level, GLenum pname, GLfloat *params) {
  _glGetTextureLevelParameterfv(texture, level, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetTextureLevelParameterfv");
}
void glGetTextureLevelParameteriv(GLuint texture, GLint level, GLenum pname, GLint *params) {
  _glGetTextureLevelParameteriv(texture, level, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetTextureLevelParameteriv");
}
void glGetTextureParameterfv(GLuint texture, GLenum pname, GLfloat *params) {
  _glGetTextureParameterfv(texture, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetTextureParameterfv");
}
void glGetTextureParameterIiv(GLuint texture, GLenum pname, GLint *params) {
  _glGetTextureParameterIiv(texture, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetTextureParameterIiv");
}
void glGetTextureParameterIuiv(GLuint texture, GLenum pname, GLuint *params) {
  _glGetTextureParameterIuiv(texture, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetTextureParameterIuiv");
}
void glGetTextureParameteriv(GLuint texture, GLenum pname, GLint *params) {
  _glGetTextureParameteriv(texture, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetTextureParameteriv");
}
void glCreateVertexArrays(GLsizei n, GLuint *arrays) {
  _glCreateVertexArrays(n, arrays);
  PROTO3D_CHECK_GL_ERROR("glCreateVertexArrays");
}
void glDisableVertexArrayAttrib(GLuint vaobj, GLuint index) {
  _glDisableVertexArrayAttrib(vaobj, index);
  PROTO3D_CHECK_GL_ERROR("glDisableVertexArrayAttrib");
}
void glEnableVertexArrayAttrib(GLuint vaobj, GLuint index) {
  _glEnableVertexArrayAttrib(vaobj, index);
  PROTO3D_CHECK_GL_ERROR("glEnableVertexArrayAttrib");
}
void glVertexArrayElementBuffer(GLuint vaobj, GLuint buffer) {
  _glVertexArrayElementBuffer(vaobj, buffer);
  PROTO3D_CHECK_GL_ERROR("glVertexArrayElementBuffer");
}
void glVertexArrayVertexBuffer(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) {
  _glVertexArrayVertexBuffer(vaobj, bindingindex, buffer, offset, stride);
  PROTO3D_CHECK_GL_ERROR("glVertexArrayVertexBuffer");
}
void glVertexArrayVertexBuffers(GLuint vaobj, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides) {
  _glVertexArrayVertexBuffers(vaobj, first, count, buffers, offsets, strides);
  PROTO3D_CHECK_GL_ERROR("glVertexArrayVertexBuffers");
}
void glVertexArrayAttribBinding(GLuint vaobj, GLuint attribindex, GLuint bindingindex) {
  _glVertexArrayAttribBinding(vaobj, attribindex, bindingindex);
  PROTO3D_CHECK_GL_ERROR("glVertexArrayAttribBinding");
}
void glVertexArrayAttribFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) {
  _glVertexArrayAttribFormat(vaobj, attribindex, size, type, normalized, relativeoffset);
  PROTO3D_CHECK_GL_ERROR("glVertexArrayAttribFormat");
}
void glVertexArrayAttribIFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) {
  _glVertexArrayAttribIFormat(vaobj, attribindex, size, type, relativeoffset);
  PROTO3D_CHECK_GL_ERROR("glVertexArrayAttribIFormat");
}
void glVertexArrayAttribLFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) {
  _glVertexArrayAttribLFormat(vaobj, attribindex, size, type, relativeoffset);
  PROTO3D_CHECK_GL_ERROR("glVertexArrayAttribLFormat");
}
void glVertexArrayBindingDivisor(GLuint vaobj, GLuint bindingindex, GLuint divisor) {
  _glVertexArrayBindingDivisor(vaobj, bindingindex, divisor);
  PROTO3D_CHECK_GL_ERROR("glVertexArrayBindingDivisor");
}
void glGetVertexArrayiv(GLuint vaobj, GLenum pname, GLint *param) {
  _glGetVertexArrayiv(vaobj, pname, param);
  PROTO3D_CHECK_GL_ERROR("glGetVertexArrayiv");
}
void glGetVertexArrayIndexediv(GLuint vaobj, GLuint index, GLenum pname, GLint *param) {
  _glGetVertexArrayIndexediv(vaobj, index, pname, param);
  PROTO3D_CHECK_GL_ERROR("glGetVertexArrayIndexediv");
}
void glGetVertexArrayIndexed64iv(GLuint vaobj, GLuint index, GLenum pname, GLint64 *param) {
  _glGetVertexArrayIndexed64iv(vaobj, index, pname, param);
  PROTO3D_CHECK_GL_ERROR("glGetVertexArrayIndexed64iv");
}
void glCreateSamplers(GLsizei n, GLuint *samplers) {
  _glCreateSamplers(n, samplers);
  PROTO3D_CHECK_GL_ERROR("glCreateSamplers");
}
void glCreateProgramPipelines(GLsizei n, GLuint *pipelines) {
  _glCreateProgramPipelines(n, pipelines);
  PROTO3D_CHECK_GL_ERROR("glCreateProgramPipelines");
}
void glCreateQueries(GLenum target, GLsizei n, GLuint *ids) {
  _glCreateQueries(target, n, ids);
  PROTO3D_CHECK_GL_ERROR("glCreateQueries");
}
void glGetQueryBufferObjecti64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) {
  _glGetQueryBufferObjecti64v(id, buffer, pname, offset);
  PROTO3D_CHECK_GL_ERROR("glGetQueryBufferObjecti64v");
}
void glGetQueryBufferObjectiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) {
  _glGetQueryBufferObjectiv(id, buffer, pname, offset);
  PROTO3D_CHECK_GL_ERROR("glGetQueryBufferObjectiv");
}
void glGetQueryBufferObjectui64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) {
  _glGetQueryBufferObjectui64v(id, buffer, pname, offset);
  PROTO3D_CHECK_GL_ERROR("glGetQueryBufferObjectui64v");
}
void glGetQueryBufferObjectuiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) {
  _glGetQueryBufferObjectuiv(id, buffer, pname, offset);
  PROTO3D_CHECK_GL_ERROR("glGetQueryBufferObjectuiv");
}
void glMemoryBarrierByRegion(GLbitfield barriers) {
  _glMemoryBarrierByRegion(barriers);
  PROTO3D_CHECK_GL_ERROR("glMemoryBarrierByRegion");
}
void glGetTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels) {
  _glGetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels);
  PROTO3D_CHECK_GL_ERROR("glGetTextureSubImage");
}
void glGetCompressedTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels) {
  _glGetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels);
  PROTO3D_CHECK_GL_ERROR("glGetCompressedTextureSubImage");
}
GLenum glGetGraphicsResetStatus(void) {
  GLenum ret = _glGetGraphicsResetStatus();
  PROTO3D_CHECK_GL_ERROR("glGetGraphicsResetStatus");
  return ret;
}
void glGetnCompressedTexImage(GLenum target, GLint lod, GLsizei bufSize, void *pixels) {
  _glGetnCompressedTexImage(target, lod, bufSize, pixels);
  PROTO3D_CHECK_GL_ERROR("glGetnCompressedTexImage");
}
void glGetnTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels) {
  _glGetnTexImage(target, level, format, type, bufSize, pixels);
  PROTO3D_CHECK_GL_ERROR("glGetnTexImage");
}
void glGetnUniformdv(GLuint program, GLint location, GLsizei bufSize, GLdouble *params) {
  _glGetnUniformdv(program, location, bufSize, params);
  PROTO3D_CHECK_GL_ERROR("glGetnUniformdv");
}
void glGetnUniformfv(GLuint program, GLint location, GLsizei bufSize, GLfloat *params) {
  _glGetnUniformfv(program, location, bufSize, params);
  PROTO3D_CHECK_GL_ERROR("glGetnUniformfv");
}
void glGetnUniformiv(GLuint program, GLint location, GLsizei bufSize, GLint *params) {
  _glGetnUniformiv(program, location, bufSize, params);
  PROTO3D_CHECK_GL_ERROR("glGetnUniformiv");
}
void glGetnUniformuiv(GLuint program, GLint location, GLsizei bufSize, GLuint *params) {
  _glGetnUniformuiv(program, location, bufSize, params);
  PROTO3D_CHECK_GL_ERROR("glGetnUniformuiv");
}
void glReadnPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data) {
  _glReadnPixels(x, y, width, height, format, type, bufSize, data);
  PROTO3D_CHECK_GL_ERROR("glReadnPixels");
}
void glTextureBarrier(void) {
  _glTextureBarrier();
  PROTO3D_CHECK_GL_ERROR("glTextureBarrier");
}
void glSpecializeShader(GLuint shader, const GLchar *pEntryPoint, GLuint numSpecializationConstants, const GLuint *pConstantIndex, const GLuint *pConstantValue) {
  _glSpecializeShader(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue);
  PROTO3D_CHECK_GL_ERROR("glSpecializeShader");
}
void glMultiDrawArraysIndirectCount(GLenum mode, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) {
  _glMultiDrawArraysIndirectCount(mode, indirect, drawcount, maxdrawcount, stride);
  PROTO3D_CHECK_GL_ERROR("glMultiDrawArraysIndirectCount");
}
void glMultiDrawElementsIndirectCount(GLenum mode, GLenum type, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) {
  _glMultiDrawElementsIndirectCount(mode, type, indirect, drawcount, maxdrawcount, stride);
  PROTO3D_CHECK_GL_ERROR("glMultiDrawElementsIndirectCount");
}
void glPolygonOffsetClamp(GLfloat factor, GLfloat units, GLfloat clamp) {
  _glPolygonOffsetClamp(factor, units, clamp);
  PROTO3D_CHECK_GL_ERROR("glPolygonOffsetClamp");
}
void glPrimitiveBoundingBoxARB(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW) {
  _glPrimitiveBoundingBoxARB(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
  PROTO3D_CHECK_GL_ERROR("glPrimitiveBoundingBoxARB");
}
GLuint64 glGetTextureHandleARB(GLuint texture) {
  GLuint64 ret = _glGetTextureHandleARB(texture);
  PROTO3D_CHECK_GL_ERROR("glGetTextureHandleARB");
  return ret;
}
GLuint64 glGetTextureSamplerHandleARB(GLuint texture, GLuint sampler) {
  GLuint64 ret = _glGetTextureSamplerHandleARB(texture, sampler);
  PROTO3D_CHECK_GL_ERROR("glGetTextureSamplerHandleARB");
  return ret;
}
void glMakeTextureHandleResidentARB(GLuint64 handle) {
  _glMakeTextureHandleResidentARB(handle);
  PROTO3D_CHECK_GL_ERROR("glMakeTextureHandleResidentARB");
}
void glMakeTextureHandleNonResidentARB(GLuint64 handle) {
  _glMakeTextureHandleNonResidentARB(handle);
  PROTO3D_CHECK_GL_ERROR("glMakeTextureHandleNonResidentARB");
}
GLuint64 glGetImageHandleARB(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format) {
  GLuint64 ret = _glGetImageHandleARB(texture, level, layered, layer, format);
  PROTO3D_CHECK_GL_ERROR("glGetImageHandleARB");
  return ret;
}
void glMakeImageHandleResidentARB(GLuint64 handle, GLenum access) {
  _glMakeImageHandleResidentARB(handle, access);
  PROTO3D_CHECK_GL_ERROR("glMakeImageHandleResidentARB");
}
void glMakeImageHandleNonResidentARB(GLuint64 handle) {
  _glMakeImageHandleNonResidentARB(handle);
  PROTO3D_CHECK_GL_ERROR("glMakeImageHandleNonResidentARB");
}
void glUniformHandleui64ARB(GLint location, GLuint64 value) {
  _glUniformHandleui64ARB(location, value);
  PROTO3D_CHECK_GL_ERROR("glUniformHandleui64ARB");
}
void glUniformHandleui64vARB(GLint location, GLsizei count, const GLuint64 *value) {
  _glUniformHandleui64vARB(location, count, value);
  PROTO3D_CHECK_GL_ERROR("glUniformHandleui64vARB");
}
void glProgramUniformHandleui64ARB(GLuint program, GLint location, GLuint64 value) {
  _glProgramUniformHandleui64ARB(program, location, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniformHandleui64ARB");
}
void glProgramUniformHandleui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 *values) {
  _glProgramUniformHandleui64vARB(program, location, count, values);
  PROTO3D_CHECK_GL_ERROR("glProgramUniformHandleui64vARB");
}
GLboolean glIsTextureHandleResidentARB(GLuint64 handle) {
  GLboolean ret = _glIsTextureHandleResidentARB(handle);
  PROTO3D_CHECK_GL_ERROR("glIsTextureHandleResidentARB");
  return ret;
}
GLboolean glIsImageHandleResidentARB(GLuint64 handle) {
  GLboolean ret = _glIsImageHandleResidentARB(handle);
  PROTO3D_CHECK_GL_ERROR("glIsImageHandleResidentARB");
  return ret;
}
void glVertexAttribL1ui64ARB(GLuint index, GLuint64EXT x) {
  _glVertexAttribL1ui64ARB(index, x);
  PROTO3D_CHECK_GL_ERROR("glVertexAttribL1ui64ARB");
}
void glVertexAttribL1ui64vARB(GLuint index, const GLuint64EXT *v) {
  _glVertexAttribL1ui64vARB(index, v);
  PROTO3D_CHECK_GL_ERROR("glVertexAttribL1ui64vARB");
}
void glGetVertexAttribLui64vARB(GLuint index, GLenum pname, GLuint64EXT *params) {
  _glGetVertexAttribLui64vARB(index, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetVertexAttribLui64vARB");
}
GLsync glCreateSyncFromCLeventARB(struct _cl_context *context, struct _cl_event *event, GLbitfield flags) {
  GLsync ret = _glCreateSyncFromCLeventARB(context, event, flags);
  PROTO3D_CHECK_GL_ERROR("glCreateSyncFromCLeventARB");
  return ret;
}
void glDispatchComputeGroupSizeARB(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z) {
  _glDispatchComputeGroupSizeARB(num_groups_x, num_groups_y, num_groups_z, group_size_x, group_size_y, group_size_z);
  PROTO3D_CHECK_GL_ERROR("glDispatchComputeGroupSizeARB");
}
void glDebugMessageControlARB(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled) {
  _glDebugMessageControlARB(source, type, severity, count, ids, enabled);
  PROTO3D_CHECK_GL_ERROR("glDebugMessageControlARB");
}
void glDebugMessageInsertARB(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf) {
  _glDebugMessageInsertARB(source, type, id, severity, length, buf);
  PROTO3D_CHECK_GL_ERROR("glDebugMessageInsertARB");
}
void glDebugMessageCallbackARB(GLDEBUGPROCARB callback, const void *userParam) {
  _glDebugMessageCallbackARB(callback, userParam);
  PROTO3D_CHECK_GL_ERROR("glDebugMessageCallbackARB");
}
GLuint glGetDebugMessageLogARB(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog) {
  GLuint ret = _glGetDebugMessageLogARB(count, bufSize, sources, types, ids, severities, lengths, messageLog);
  PROTO3D_CHECK_GL_ERROR("glGetDebugMessageLogARB");
  return ret;
}
void glBlendEquationiARB(GLuint buf, GLenum mode) {
  _glBlendEquationiARB(buf, mode);
  PROTO3D_CHECK_GL_ERROR("glBlendEquationiARB");
}
void glBlendEquationSeparateiARB(GLuint buf, GLenum modeRGB, GLenum modeAlpha) {
  _glBlendEquationSeparateiARB(buf, modeRGB, modeAlpha);
  PROTO3D_CHECK_GL_ERROR("glBlendEquationSeparateiARB");
}
void glBlendFunciARB(GLuint buf, GLenum src, GLenum dst) {
  _glBlendFunciARB(buf, src, dst);
  PROTO3D_CHECK_GL_ERROR("glBlendFunciARB");
}
void glBlendFuncSeparateiARB(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) {
  _glBlendFuncSeparateiARB(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
  PROTO3D_CHECK_GL_ERROR("glBlendFuncSeparateiARB");
}
void glDrawArraysInstancedARB(GLenum mode, GLint first, GLsizei count, GLsizei primcount) {
  _glDrawArraysInstancedARB(mode, first, count, primcount);
  PROTO3D_CHECK_GL_ERROR("glDrawArraysInstancedARB");
}
void glDrawElementsInstancedARB(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount) {
  _glDrawElementsInstancedARB(mode, count, type, indices, primcount);
  PROTO3D_CHECK_GL_ERROR("glDrawElementsInstancedARB");
}
void glProgramParameteriARB(GLuint program, GLenum pname, GLint value) {
  _glProgramParameteriARB(program, pname, value);
  PROTO3D_CHECK_GL_ERROR("glProgramParameteriARB");
}
void glFramebufferTextureARB(GLenum target, GLenum attachment, GLuint texture, GLint level) {
  _glFramebufferTextureARB(target, attachment, texture, level);
  PROTO3D_CHECK_GL_ERROR("glFramebufferTextureARB");
}
void glFramebufferTextureLayerARB(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) {
  _glFramebufferTextureLayerARB(target, attachment, texture, level, layer);
  PROTO3D_CHECK_GL_ERROR("glFramebufferTextureLayerARB");
}
void glFramebufferTextureFaceARB(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face) {
  _glFramebufferTextureFaceARB(target, attachment, texture, level, face);
  PROTO3D_CHECK_GL_ERROR("glFramebufferTextureFaceARB");
}
void glSpecializeShaderARB(GLuint shader, const GLchar *pEntryPoint, GLuint numSpecializationConstants, const GLuint *pConstantIndex, const GLuint *pConstantValue) {
  _glSpecializeShaderARB(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue);
  PROTO3D_CHECK_GL_ERROR("glSpecializeShaderARB");
}
void glUniform1i64ARB(GLint location, GLint64 x) {
  _glUniform1i64ARB(location, x);
  PROTO3D_CHECK_GL_ERROR("glUniform1i64ARB");
}
void glUniform2i64ARB(GLint location, GLint64 x, GLint64 y) {
  _glUniform2i64ARB(location, x, y);
  PROTO3D_CHECK_GL_ERROR("glUniform2i64ARB");
}
void glUniform3i64ARB(GLint location, GLint64 x, GLint64 y, GLint64 z) {
  _glUniform3i64ARB(location, x, y, z);
  PROTO3D_CHECK_GL_ERROR("glUniform3i64ARB");
}
void glUniform4i64ARB(GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w) {
  _glUniform4i64ARB(location, x, y, z, w);
  PROTO3D_CHECK_GL_ERROR("glUniform4i64ARB");
}
void glUniform1i64vARB(GLint location, GLsizei count, const GLint64 *value) {
  _glUniform1i64vARB(location, count, value);
  PROTO3D_CHECK_GL_ERROR("glUniform1i64vARB");
}
void glUniform2i64vARB(GLint location, GLsizei count, const GLint64 *value) {
  _glUniform2i64vARB(location, count, value);
  PROTO3D_CHECK_GL_ERROR("glUniform2i64vARB");
}
void glUniform3i64vARB(GLint location, GLsizei count, const GLint64 *value) {
  _glUniform3i64vARB(location, count, value);
  PROTO3D_CHECK_GL_ERROR("glUniform3i64vARB");
}
void glUniform4i64vARB(GLint location, GLsizei count, const GLint64 *value) {
  _glUniform4i64vARB(location, count, value);
  PROTO3D_CHECK_GL_ERROR("glUniform4i64vARB");
}
void glUniform1ui64ARB(GLint location, GLuint64 x) {
  _glUniform1ui64ARB(location, x);
  PROTO3D_CHECK_GL_ERROR("glUniform1ui64ARB");
}
void glUniform2ui64ARB(GLint location, GLuint64 x, GLuint64 y) {
  _glUniform2ui64ARB(location, x, y);
  PROTO3D_CHECK_GL_ERROR("glUniform2ui64ARB");
}
void glUniform3ui64ARB(GLint location, GLuint64 x, GLuint64 y, GLuint64 z) {
  _glUniform3ui64ARB(location, x, y, z);
  PROTO3D_CHECK_GL_ERROR("glUniform3ui64ARB");
}
void glUniform4ui64ARB(GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w) {
  _glUniform4ui64ARB(location, x, y, z, w);
  PROTO3D_CHECK_GL_ERROR("glUniform4ui64ARB");
}
void glUniform1ui64vARB(GLint location, GLsizei count, const GLuint64 *value) {
  _glUniform1ui64vARB(location, count, value);
  PROTO3D_CHECK_GL_ERROR("glUniform1ui64vARB");
}
void glUniform2ui64vARB(GLint location, GLsizei count, const GLuint64 *value) {
  _glUniform2ui64vARB(location, count, value);
  PROTO3D_CHECK_GL_ERROR("glUniform2ui64vARB");
}
void glUniform3ui64vARB(GLint location, GLsizei count, const GLuint64 *value) {
  _glUniform3ui64vARB(location, count, value);
  PROTO3D_CHECK_GL_ERROR("glUniform3ui64vARB");
}
void glUniform4ui64vARB(GLint location, GLsizei count, const GLuint64 *value) {
  _glUniform4ui64vARB(location, count, value);
  PROTO3D_CHECK_GL_ERROR("glUniform4ui64vARB");
}
void glGetUniformi64vARB(GLuint program, GLint location, GLint64 *params) {
  _glGetUniformi64vARB(program, location, params);
  PROTO3D_CHECK_GL_ERROR("glGetUniformi64vARB");
}
void glGetUniformui64vARB(GLuint program, GLint location, GLuint64 *params) {
  _glGetUniformui64vARB(program, location, params);
  PROTO3D_CHECK_GL_ERROR("glGetUniformui64vARB");
}
void glGetnUniformi64vARB(GLuint program, GLint location, GLsizei bufSize, GLint64 *params) {
  _glGetnUniformi64vARB(program, location, bufSize, params);
  PROTO3D_CHECK_GL_ERROR("glGetnUniformi64vARB");
}
void glGetnUniformui64vARB(GLuint program, GLint location, GLsizei bufSize, GLuint64 *params) {
  _glGetnUniformui64vARB(program, location, bufSize, params);
  PROTO3D_CHECK_GL_ERROR("glGetnUniformui64vARB");
}
void glProgramUniform1i64ARB(GLuint program, GLint location, GLint64 x) {
  _glProgramUniform1i64ARB(program, location, x);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform1i64ARB");
}
void glProgramUniform2i64ARB(GLuint program, GLint location, GLint64 x, GLint64 y) {
  _glProgramUniform2i64ARB(program, location, x, y);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform2i64ARB");
}
void glProgramUniform3i64ARB(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z) {
  _glProgramUniform3i64ARB(program, location, x, y, z);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform3i64ARB");
}
void glProgramUniform4i64ARB(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w) {
  _glProgramUniform4i64ARB(program, location, x, y, z, w);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform4i64ARB");
}
void glProgramUniform1i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 *value) {
  _glProgramUniform1i64vARB(program, location, count, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform1i64vARB");
}
void glProgramUniform2i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 *value) {
  _glProgramUniform2i64vARB(program, location, count, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform2i64vARB");
}
void glProgramUniform3i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 *value) {
  _glProgramUniform3i64vARB(program, location, count, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform3i64vARB");
}
void glProgramUniform4i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 *value) {
  _glProgramUniform4i64vARB(program, location, count, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform4i64vARB");
}
void glProgramUniform1ui64ARB(GLuint program, GLint location, GLuint64 x) {
  _glProgramUniform1ui64ARB(program, location, x);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform1ui64ARB");
}
void glProgramUniform2ui64ARB(GLuint program, GLint location, GLuint64 x, GLuint64 y) {
  _glProgramUniform2ui64ARB(program, location, x, y);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform2ui64ARB");
}
void glProgramUniform3ui64ARB(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z) {
  _glProgramUniform3ui64ARB(program, location, x, y, z);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform3ui64ARB");
}
void glProgramUniform4ui64ARB(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w) {
  _glProgramUniform4ui64ARB(program, location, x, y, z, w);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform4ui64ARB");
}
void glProgramUniform1ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 *value) {
  _glProgramUniform1ui64vARB(program, location, count, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform1ui64vARB");
}
void glProgramUniform2ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 *value) {
  _glProgramUniform2ui64vARB(program, location, count, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform2ui64vARB");
}
void glProgramUniform3ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 *value) {
  _glProgramUniform3ui64vARB(program, location, count, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform3ui64vARB");
}
void glProgramUniform4ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 *value) {
  _glProgramUniform4ui64vARB(program, location, count, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform4ui64vARB");
}
void glMultiDrawArraysIndirectCountARB(GLenum mode, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) {
  _glMultiDrawArraysIndirectCountARB(mode, indirect, drawcount, maxdrawcount, stride);
  PROTO3D_CHECK_GL_ERROR("glMultiDrawArraysIndirectCountARB");
}
void glMultiDrawElementsIndirectCountARB(GLenum mode, GLenum type, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) {
  _glMultiDrawElementsIndirectCountARB(mode, type, indirect, drawcount, maxdrawcount, stride);
  PROTO3D_CHECK_GL_ERROR("glMultiDrawElementsIndirectCountARB");
}
void glVertexAttribDivisorARB(GLuint index, GLuint divisor) {
  _glVertexAttribDivisorARB(index, divisor);
  PROTO3D_CHECK_GL_ERROR("glVertexAttribDivisorARB");
}
void glMaxShaderCompilerThreadsARB(GLuint count) {
  _glMaxShaderCompilerThreadsARB(count);
  PROTO3D_CHECK_GL_ERROR("glMaxShaderCompilerThreadsARB");
}
GLenum glGetGraphicsResetStatusARB(void) {
  GLenum ret = _glGetGraphicsResetStatusARB();
  PROTO3D_CHECK_GL_ERROR("glGetGraphicsResetStatusARB");
  return ret;
}
void glGetnTexImageARB(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *img) {
  _glGetnTexImageARB(target, level, format, type, bufSize, img);
  PROTO3D_CHECK_GL_ERROR("glGetnTexImageARB");
}
void glReadnPixelsARB(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data) {
  _glReadnPixelsARB(x, y, width, height, format, type, bufSize, data);
  PROTO3D_CHECK_GL_ERROR("glReadnPixelsARB");
}
void glGetnCompressedTexImageARB(GLenum target, GLint lod, GLsizei bufSize, void *img) {
  _glGetnCompressedTexImageARB(target, lod, bufSize, img);
  PROTO3D_CHECK_GL_ERROR("glGetnCompressedTexImageARB");
}
void glGetnUniformfvARB(GLuint program, GLint location, GLsizei bufSize, GLfloat *params) {
  _glGetnUniformfvARB(program, location, bufSize, params);
  PROTO3D_CHECK_GL_ERROR("glGetnUniformfvARB");
}
void glGetnUniformivARB(GLuint program, GLint location, GLsizei bufSize, GLint *params) {
  _glGetnUniformivARB(program, location, bufSize, params);
  PROTO3D_CHECK_GL_ERROR("glGetnUniformivARB");
}
void glGetnUniformuivARB(GLuint program, GLint location, GLsizei bufSize, GLuint *params) {
  _glGetnUniformuivARB(program, location, bufSize, params);
  PROTO3D_CHECK_GL_ERROR("glGetnUniformuivARB");
}
void glGetnUniformdvARB(GLuint program, GLint location, GLsizei bufSize, GLdouble *params) {
  _glGetnUniformdvARB(program, location, bufSize, params);
  PROTO3D_CHECK_GL_ERROR("glGetnUniformdvARB");
}
void glFramebufferSampleLocationsfvARB(GLenum target, GLuint start, GLsizei count, const GLfloat *v) {
  _glFramebufferSampleLocationsfvARB(target, start, count, v);
  PROTO3D_CHECK_GL_ERROR("glFramebufferSampleLocationsfvARB");
}
void glNamedFramebufferSampleLocationsfvARB(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v) {
  _glNamedFramebufferSampleLocationsfvARB(framebuffer, start, count, v);
  PROTO3D_CHECK_GL_ERROR("glNamedFramebufferSampleLocationsfvARB");
}
void glEvaluateDepthValuesARB(void) {
  _glEvaluateDepthValuesARB();
  PROTO3D_CHECK_GL_ERROR("glEvaluateDepthValuesARB");
}
void glMinSampleShadingARB(GLfloat value) {
  _glMinSampleShadingARB(value);
  PROTO3D_CHECK_GL_ERROR("glMinSampleShadingARB");
}
void glNamedStringARB(GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string) {
  _glNamedStringARB(type, namelen, name, stringlen, string);
  PROTO3D_CHECK_GL_ERROR("glNamedStringARB");
}
void glDeleteNamedStringARB(GLint namelen, const GLchar *name) {
  _glDeleteNamedStringARB(namelen, name);
  PROTO3D_CHECK_GL_ERROR("glDeleteNamedStringARB");
}
void glCompileShaderIncludeARB(GLuint shader, GLsizei count, const GLchar *const*path, const GLint *length) {
  _glCompileShaderIncludeARB(shader, count, path, length);
  PROTO3D_CHECK_GL_ERROR("glCompileShaderIncludeARB");
}
GLboolean glIsNamedStringARB(GLint namelen, const GLchar *name) {
  GLboolean ret = _glIsNamedStringARB(namelen, name);
  PROTO3D_CHECK_GL_ERROR("glIsNamedStringARB");
  return ret;
}
void glGetNamedStringARB(GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string) {
  _glGetNamedStringARB(namelen, name, bufSize, stringlen, string);
  PROTO3D_CHECK_GL_ERROR("glGetNamedStringARB");
}
void glGetNamedStringivARB(GLint namelen, const GLchar *name, GLenum pname, GLint *params) {
  _glGetNamedStringivARB(namelen, name, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetNamedStringivARB");
}
void glBufferPageCommitmentARB(GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit) {
  _glBufferPageCommitmentARB(target, offset, size, commit);
  PROTO3D_CHECK_GL_ERROR("glBufferPageCommitmentARB");
}
void glNamedBufferPageCommitmentEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit) {
  _glNamedBufferPageCommitmentEXT(buffer, offset, size, commit);
  PROTO3D_CHECK_GL_ERROR("glNamedBufferPageCommitmentEXT");
}
void glNamedBufferPageCommitmentARB(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit) {
  _glNamedBufferPageCommitmentARB(buffer, offset, size, commit);
  PROTO3D_CHECK_GL_ERROR("glNamedBufferPageCommitmentARB");
}
void glTexPageCommitmentARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit) {
  _glTexPageCommitmentARB(target, level, xoffset, yoffset, zoffset, width, height, depth, commit);
  PROTO3D_CHECK_GL_ERROR("glTexPageCommitmentARB");
}
void glTexBufferARB(GLenum target, GLenum internalformat, GLuint buffer) {
  _glTexBufferARB(target, internalformat, buffer);
  PROTO3D_CHECK_GL_ERROR("glTexBufferARB");
}
void glBlendBarrierKHR(void) {
  _glBlendBarrierKHR();
  PROTO3D_CHECK_GL_ERROR("glBlendBarrierKHR");
}
void glMaxShaderCompilerThreadsKHR(GLuint count) {
  _glMaxShaderCompilerThreadsKHR(count);
  PROTO3D_CHECK_GL_ERROR("glMaxShaderCompilerThreadsKHR");
}
void glGetPerfMonitorGroupsAMD(GLint *numGroups, GLsizei groupsSize, GLuint *groups) {
  _glGetPerfMonitorGroupsAMD(numGroups, groupsSize, groups);
  PROTO3D_CHECK_GL_ERROR("glGetPerfMonitorGroupsAMD");
}
void glGetPerfMonitorCountersAMD(GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei counterSize, GLuint *counters) {
  _glGetPerfMonitorCountersAMD(group, numCounters, maxActiveCounters, counterSize, counters);
  PROTO3D_CHECK_GL_ERROR("glGetPerfMonitorCountersAMD");
}
void glGetPerfMonitorGroupStringAMD(GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString) {
  _glGetPerfMonitorGroupStringAMD(group, bufSize, length, groupString);
  PROTO3D_CHECK_GL_ERROR("glGetPerfMonitorGroupStringAMD");
}
void glGetPerfMonitorCounterStringAMD(GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString) {
  _glGetPerfMonitorCounterStringAMD(group, counter, bufSize, length, counterString);
  PROTO3D_CHECK_GL_ERROR("glGetPerfMonitorCounterStringAMD");
}
void glGetPerfMonitorCounterInfoAMD(GLuint group, GLuint counter, GLenum pname, void *data) {
  _glGetPerfMonitorCounterInfoAMD(group, counter, pname, data);
  PROTO3D_CHECK_GL_ERROR("glGetPerfMonitorCounterInfoAMD");
}
void glGenPerfMonitorsAMD(GLsizei n, GLuint *monitors) {
  _glGenPerfMonitorsAMD(n, monitors);
  PROTO3D_CHECK_GL_ERROR("glGenPerfMonitorsAMD");
}
void glDeletePerfMonitorsAMD(GLsizei n, GLuint *monitors) {
  _glDeletePerfMonitorsAMD(n, monitors);
  PROTO3D_CHECK_GL_ERROR("glDeletePerfMonitorsAMD");
}
void glSelectPerfMonitorCountersAMD(GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList) {
  _glSelectPerfMonitorCountersAMD(monitor, enable, group, numCounters, counterList);
  PROTO3D_CHECK_GL_ERROR("glSelectPerfMonitorCountersAMD");
}
void glBeginPerfMonitorAMD(GLuint monitor) {
  _glBeginPerfMonitorAMD(monitor);
  PROTO3D_CHECK_GL_ERROR("glBeginPerfMonitorAMD");
}
void glEndPerfMonitorAMD(GLuint monitor) {
  _glEndPerfMonitorAMD(monitor);
  PROTO3D_CHECK_GL_ERROR("glEndPerfMonitorAMD");
}
void glGetPerfMonitorCounterDataAMD(GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten) {
  _glGetPerfMonitorCounterDataAMD(monitor, pname, dataSize, data, bytesWritten);
  PROTO3D_CHECK_GL_ERROR("glGetPerfMonitorCounterDataAMD");
}
void glLabelObjectEXT(GLenum type, GLuint object, GLsizei length, const GLchar *label) {
  _glLabelObjectEXT(type, object, length, label);
  PROTO3D_CHECK_GL_ERROR("glLabelObjectEXT");
}
void glGetObjectLabelEXT(GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label) {
  _glGetObjectLabelEXT(type, object, bufSize, length, label);
  PROTO3D_CHECK_GL_ERROR("glGetObjectLabelEXT");
}
void glInsertEventMarkerEXT(GLsizei length, const GLchar *marker) {
  _glInsertEventMarkerEXT(length, marker);
  PROTO3D_CHECK_GL_ERROR("glInsertEventMarkerEXT");
}
void glPushGroupMarkerEXT(GLsizei length, const GLchar *marker) {
  _glPushGroupMarkerEXT(length, marker);
  PROTO3D_CHECK_GL_ERROR("glPushGroupMarkerEXT");
}
void glPopGroupMarkerEXT(void) {
  _glPopGroupMarkerEXT();
  PROTO3D_CHECK_GL_ERROR("glPopGroupMarkerEXT");
}
void glMatrixLoadfEXT(GLenum mode, const GLfloat *m) {
  _glMatrixLoadfEXT(mode, m);
  PROTO3D_CHECK_GL_ERROR("glMatrixLoadfEXT");
}
void glMatrixLoaddEXT(GLenum mode, const GLdouble *m) {
  _glMatrixLoaddEXT(mode, m);
  PROTO3D_CHECK_GL_ERROR("glMatrixLoaddEXT");
}
void glMatrixMultfEXT(GLenum mode, const GLfloat *m) {
  _glMatrixMultfEXT(mode, m);
  PROTO3D_CHECK_GL_ERROR("glMatrixMultfEXT");
}
void glMatrixMultdEXT(GLenum mode, const GLdouble *m) {
  _glMatrixMultdEXT(mode, m);
  PROTO3D_CHECK_GL_ERROR("glMatrixMultdEXT");
}
void glMatrixLoadIdentityEXT(GLenum mode) {
  _glMatrixLoadIdentityEXT(mode);
  PROTO3D_CHECK_GL_ERROR("glMatrixLoadIdentityEXT");
}
void glMatrixRotatefEXT(GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z) {
  _glMatrixRotatefEXT(mode, angle, x, y, z);
  PROTO3D_CHECK_GL_ERROR("glMatrixRotatefEXT");
}
void glMatrixRotatedEXT(GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z) {
  _glMatrixRotatedEXT(mode, angle, x, y, z);
  PROTO3D_CHECK_GL_ERROR("glMatrixRotatedEXT");
}
void glMatrixScalefEXT(GLenum mode, GLfloat x, GLfloat y, GLfloat z) {
  _glMatrixScalefEXT(mode, x, y, z);
  PROTO3D_CHECK_GL_ERROR("glMatrixScalefEXT");
}
void glMatrixScaledEXT(GLenum mode, GLdouble x, GLdouble y, GLdouble z) {
  _glMatrixScaledEXT(mode, x, y, z);
  PROTO3D_CHECK_GL_ERROR("glMatrixScaledEXT");
}
void glMatrixTranslatefEXT(GLenum mode, GLfloat x, GLfloat y, GLfloat z) {
  _glMatrixTranslatefEXT(mode, x, y, z);
  PROTO3D_CHECK_GL_ERROR("glMatrixTranslatefEXT");
}
void glMatrixTranslatedEXT(GLenum mode, GLdouble x, GLdouble y, GLdouble z) {
  _glMatrixTranslatedEXT(mode, x, y, z);
  PROTO3D_CHECK_GL_ERROR("glMatrixTranslatedEXT");
}
void glMatrixFrustumEXT(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) {
  _glMatrixFrustumEXT(mode, left, right, bottom, top, zNear, zFar);
  PROTO3D_CHECK_GL_ERROR("glMatrixFrustumEXT");
}
void glMatrixOrthoEXT(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) {
  _glMatrixOrthoEXT(mode, left, right, bottom, top, zNear, zFar);
  PROTO3D_CHECK_GL_ERROR("glMatrixOrthoEXT");
}
void glMatrixPopEXT(GLenum mode) {
  _glMatrixPopEXT(mode);
  PROTO3D_CHECK_GL_ERROR("glMatrixPopEXT");
}
void glMatrixPushEXT(GLenum mode) {
  _glMatrixPushEXT(mode);
  PROTO3D_CHECK_GL_ERROR("glMatrixPushEXT");
}
void glClientAttribDefaultEXT(GLbitfield mask) {
  _glClientAttribDefaultEXT(mask);
  PROTO3D_CHECK_GL_ERROR("glClientAttribDefaultEXT");
}
void glPushClientAttribDefaultEXT(GLbitfield mask) {
  _glPushClientAttribDefaultEXT(mask);
  PROTO3D_CHECK_GL_ERROR("glPushClientAttribDefaultEXT");
}
void glTextureParameterfEXT(GLuint texture, GLenum target, GLenum pname, GLfloat param) {
  _glTextureParameterfEXT(texture, target, pname, param);
  PROTO3D_CHECK_GL_ERROR("glTextureParameterfEXT");
}
void glTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, const GLfloat *params) {
  _glTextureParameterfvEXT(texture, target, pname, params);
  PROTO3D_CHECK_GL_ERROR("glTextureParameterfvEXT");
}
void glTextureParameteriEXT(GLuint texture, GLenum target, GLenum pname, GLint param) {
  _glTextureParameteriEXT(texture, target, pname, param);
  PROTO3D_CHECK_GL_ERROR("glTextureParameteriEXT");
}
void glTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, const GLint *params) {
  _glTextureParameterivEXT(texture, target, pname, params);
  PROTO3D_CHECK_GL_ERROR("glTextureParameterivEXT");
}
void glTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels) {
  _glTextureImage1DEXT(texture, target, level, internalformat, width, border, format, type, pixels);
  PROTO3D_CHECK_GL_ERROR("glTextureImage1DEXT");
}
void glTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels) {
  _glTextureImage2DEXT(texture, target, level, internalformat, width, height, border, format, type, pixels);
  PROTO3D_CHECK_GL_ERROR("glTextureImage2DEXT");
}
void glTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels) {
  _glTextureSubImage1DEXT(texture, target, level, xoffset, width, format, type, pixels);
  PROTO3D_CHECK_GL_ERROR("glTextureSubImage1DEXT");
}
void glTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels) {
  _glTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, type, pixels);
  PROTO3D_CHECK_GL_ERROR("glTextureSubImage2DEXT");
}
void glCopyTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) {
  _glCopyTextureImage1DEXT(texture, target, level, internalformat, x, y, width, border);
  PROTO3D_CHECK_GL_ERROR("glCopyTextureImage1DEXT");
}
void glCopyTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) {
  _glCopyTextureImage2DEXT(texture, target, level, internalformat, x, y, width, height, border);
  PROTO3D_CHECK_GL_ERROR("glCopyTextureImage2DEXT");
}
void glCopyTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) {
  _glCopyTextureSubImage1DEXT(texture, target, level, xoffset, x, y, width);
  PROTO3D_CHECK_GL_ERROR("glCopyTextureSubImage1DEXT");
}
void glCopyTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
  _glCopyTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, x, y, width, height);
  PROTO3D_CHECK_GL_ERROR("glCopyTextureSubImage2DEXT");
}
void glGetTextureImageEXT(GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, void *pixels) {
  _glGetTextureImageEXT(texture, target, level, format, type, pixels);
  PROTO3D_CHECK_GL_ERROR("glGetTextureImageEXT");
}
void glGetTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, GLfloat *params) {
  _glGetTextureParameterfvEXT(texture, target, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetTextureParameterfvEXT");
}
void glGetTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, GLint *params) {
  _glGetTextureParameterivEXT(texture, target, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetTextureParameterivEXT");
}
void glGetTextureLevelParameterfvEXT(GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat *params) {
  _glGetTextureLevelParameterfvEXT(texture, target, level, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetTextureLevelParameterfvEXT");
}
void glGetTextureLevelParameterivEXT(GLuint texture, GLenum target, GLint level, GLenum pname, GLint *params) {
  _glGetTextureLevelParameterivEXT(texture, target, level, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetTextureLevelParameterivEXT");
}
void glTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels) {
  _glTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, format, type, pixels);
  PROTO3D_CHECK_GL_ERROR("glTextureImage3DEXT");
}
void glTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels) {
  _glTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
  PROTO3D_CHECK_GL_ERROR("glTextureSubImage3DEXT");
}
void glCopyTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
  _glCopyTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, x, y, width, height);
  PROTO3D_CHECK_GL_ERROR("glCopyTextureSubImage3DEXT");
}
void glBindMultiTextureEXT(GLenum texunit, GLenum target, GLuint texture) {
  _glBindMultiTextureEXT(texunit, target, texture);
  PROTO3D_CHECK_GL_ERROR("glBindMultiTextureEXT");
}
void glMultiTexCoordPointerEXT(GLenum texunit, GLint size, GLenum type, GLsizei stride, const void *pointer) {
  _glMultiTexCoordPointerEXT(texunit, size, type, stride, pointer);
  PROTO3D_CHECK_GL_ERROR("glMultiTexCoordPointerEXT");
}
void glMultiTexEnvfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param) {
  _glMultiTexEnvfEXT(texunit, target, pname, param);
  PROTO3D_CHECK_GL_ERROR("glMultiTexEnvfEXT");
}
void glMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat *params) {
  _glMultiTexEnvfvEXT(texunit, target, pname, params);
  PROTO3D_CHECK_GL_ERROR("glMultiTexEnvfvEXT");
}
void glMultiTexEnviEXT(GLenum texunit, GLenum target, GLenum pname, GLint param) {
  _glMultiTexEnviEXT(texunit, target, pname, param);
  PROTO3D_CHECK_GL_ERROR("glMultiTexEnviEXT");
}
void glMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint *params) {
  _glMultiTexEnvivEXT(texunit, target, pname, params);
  PROTO3D_CHECK_GL_ERROR("glMultiTexEnvivEXT");
}
void glMultiTexGendEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble param) {
  _glMultiTexGendEXT(texunit, coord, pname, param);
  PROTO3D_CHECK_GL_ERROR("glMultiTexGendEXT");
}
void glMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, const GLdouble *params) {
  _glMultiTexGendvEXT(texunit, coord, pname, params);
  PROTO3D_CHECK_GL_ERROR("glMultiTexGendvEXT");
}
void glMultiTexGenfEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat param) {
  _glMultiTexGenfEXT(texunit, coord, pname, param);
  PROTO3D_CHECK_GL_ERROR("glMultiTexGenfEXT");
}
void glMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, const GLfloat *params) {
  _glMultiTexGenfvEXT(texunit, coord, pname, params);
  PROTO3D_CHECK_GL_ERROR("glMultiTexGenfvEXT");
}
void glMultiTexGeniEXT(GLenum texunit, GLenum coord, GLenum pname, GLint param) {
  _glMultiTexGeniEXT(texunit, coord, pname, param);
  PROTO3D_CHECK_GL_ERROR("glMultiTexGeniEXT");
}
void glMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, const GLint *params) {
  _glMultiTexGenivEXT(texunit, coord, pname, params);
  PROTO3D_CHECK_GL_ERROR("glMultiTexGenivEXT");
}
void glGetMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat *params) {
  _glGetMultiTexEnvfvEXT(texunit, target, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetMultiTexEnvfvEXT");
}
void glGetMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, GLint *params) {
  _glGetMultiTexEnvivEXT(texunit, target, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetMultiTexEnvivEXT");
}
void glGetMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble *params) {
  _glGetMultiTexGendvEXT(texunit, coord, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetMultiTexGendvEXT");
}
void glGetMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat *params) {
  _glGetMultiTexGenfvEXT(texunit, coord, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetMultiTexGenfvEXT");
}
void glGetMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, GLint *params) {
  _glGetMultiTexGenivEXT(texunit, coord, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetMultiTexGenivEXT");
}
void glMultiTexParameteriEXT(GLenum texunit, GLenum target, GLenum pname, GLint param) {
  _glMultiTexParameteriEXT(texunit, target, pname, param);
  PROTO3D_CHECK_GL_ERROR("glMultiTexParameteriEXT");
}
void glMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint *params) {
  _glMultiTexParameterivEXT(texunit, target, pname, params);
  PROTO3D_CHECK_GL_ERROR("glMultiTexParameterivEXT");
}
void glMultiTexParameterfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param) {
  _glMultiTexParameterfEXT(texunit, target, pname, param);
  PROTO3D_CHECK_GL_ERROR("glMultiTexParameterfEXT");
}
void glMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat *params) {
  _glMultiTexParameterfvEXT(texunit, target, pname, params);
  PROTO3D_CHECK_GL_ERROR("glMultiTexParameterfvEXT");
}
void glMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels) {
  _glMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, format, type, pixels);
  PROTO3D_CHECK_GL_ERROR("glMultiTexImage1DEXT");
}
void glMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels) {
  _glMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, format, type, pixels);
  PROTO3D_CHECK_GL_ERROR("glMultiTexImage2DEXT");
}
void glMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels) {
  _glMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, type, pixels);
  PROTO3D_CHECK_GL_ERROR("glMultiTexSubImage1DEXT");
}
void glMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels) {
  _glMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels);
  PROTO3D_CHECK_GL_ERROR("glMultiTexSubImage2DEXT");
}
void glCopyMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) {
  _glCopyMultiTexImage1DEXT(texunit, target, level, internalformat, x, y, width, border);
  PROTO3D_CHECK_GL_ERROR("glCopyMultiTexImage1DEXT");
}
void glCopyMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) {
  _glCopyMultiTexImage2DEXT(texunit, target, level, internalformat, x, y, width, height, border);
  PROTO3D_CHECK_GL_ERROR("glCopyMultiTexImage2DEXT");
}
void glCopyMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) {
  _glCopyMultiTexSubImage1DEXT(texunit, target, level, xoffset, x, y, width);
  PROTO3D_CHECK_GL_ERROR("glCopyMultiTexSubImage1DEXT");
}
void glCopyMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
  _glCopyMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, x, y, width, height);
  PROTO3D_CHECK_GL_ERROR("glCopyMultiTexSubImage2DEXT");
}
void glGetMultiTexImageEXT(GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, void *pixels) {
  _glGetMultiTexImageEXT(texunit, target, level, format, type, pixels);
  PROTO3D_CHECK_GL_ERROR("glGetMultiTexImageEXT");
}
void glGetMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat *params) {
  _glGetMultiTexParameterfvEXT(texunit, target, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetMultiTexParameterfvEXT");
}
void glGetMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, GLint *params) {
  _glGetMultiTexParameterivEXT(texunit, target, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetMultiTexParameterivEXT");
}
void glGetMultiTexLevelParameterfvEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat *params) {
  _glGetMultiTexLevelParameterfvEXT(texunit, target, level, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetMultiTexLevelParameterfvEXT");
}
void glGetMultiTexLevelParameterivEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, GLint *params) {
  _glGetMultiTexLevelParameterivEXT(texunit, target, level, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetMultiTexLevelParameterivEXT");
}
void glMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels) {
  _glMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels);
  PROTO3D_CHECK_GL_ERROR("glMultiTexImage3DEXT");
}
void glMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels) {
  _glMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
  PROTO3D_CHECK_GL_ERROR("glMultiTexSubImage3DEXT");
}
void glCopyMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
  _glCopyMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height);
  PROTO3D_CHECK_GL_ERROR("glCopyMultiTexSubImage3DEXT");
}
void glEnableClientStateIndexedEXT(GLenum array, GLuint index) {
  _glEnableClientStateIndexedEXT(array, index);
  PROTO3D_CHECK_GL_ERROR("glEnableClientStateIndexedEXT");
}
void glDisableClientStateIndexedEXT(GLenum array, GLuint index) {
  _glDisableClientStateIndexedEXT(array, index);
  PROTO3D_CHECK_GL_ERROR("glDisableClientStateIndexedEXT");
}
void glGetFloatIndexedvEXT(GLenum target, GLuint index, GLfloat *data) {
  _glGetFloatIndexedvEXT(target, index, data);
  PROTO3D_CHECK_GL_ERROR("glGetFloatIndexedvEXT");
}
void glGetDoubleIndexedvEXT(GLenum target, GLuint index, GLdouble *data) {
  _glGetDoubleIndexedvEXT(target, index, data);
  PROTO3D_CHECK_GL_ERROR("glGetDoubleIndexedvEXT");
}
void glGetPointerIndexedvEXT(GLenum target, GLuint index, void **data) {
  _glGetPointerIndexedvEXT(target, index, data);
  PROTO3D_CHECK_GL_ERROR("glGetPointerIndexedvEXT");
}
void glEnableIndexedEXT(GLenum target, GLuint index) {
  _glEnableIndexedEXT(target, index);
  PROTO3D_CHECK_GL_ERROR("glEnableIndexedEXT");
}
void glDisableIndexedEXT(GLenum target, GLuint index) {
  _glDisableIndexedEXT(target, index);
  PROTO3D_CHECK_GL_ERROR("glDisableIndexedEXT");
}
GLboolean glIsEnabledIndexedEXT(GLenum target, GLuint index) {
  GLboolean ret = _glIsEnabledIndexedEXT(target, index);
  PROTO3D_CHECK_GL_ERROR("glIsEnabledIndexedEXT");
  return ret;
}
void glGetIntegerIndexedvEXT(GLenum target, GLuint index, GLint *data) {
  _glGetIntegerIndexedvEXT(target, index, data);
  PROTO3D_CHECK_GL_ERROR("glGetIntegerIndexedvEXT");
}
void glGetBooleanIndexedvEXT(GLenum target, GLuint index, GLboolean *data) {
  _glGetBooleanIndexedvEXT(target, index, data);
  PROTO3D_CHECK_GL_ERROR("glGetBooleanIndexedvEXT");
}
void glCompressedTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits) {
  _glCompressedTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, imageSize, bits);
  PROTO3D_CHECK_GL_ERROR("glCompressedTextureImage3DEXT");
}
void glCompressedTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits) {
  _glCompressedTextureImage2DEXT(texture, target, level, internalformat, width, height, border, imageSize, bits);
  PROTO3D_CHECK_GL_ERROR("glCompressedTextureImage2DEXT");
}
void glCompressedTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits) {
  _glCompressedTextureImage1DEXT(texture, target, level, internalformat, width, border, imageSize, bits);
  PROTO3D_CHECK_GL_ERROR("glCompressedTextureImage1DEXT");
}
void glCompressedTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *bits) {
  _glCompressedTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);
  PROTO3D_CHECK_GL_ERROR("glCompressedTextureSubImage3DEXT");
}
void glCompressedTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *bits) {
  _glCompressedTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits);
  PROTO3D_CHECK_GL_ERROR("glCompressedTextureSubImage2DEXT");
}
void glCompressedTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *bits) {
  _glCompressedTextureSubImage1DEXT(texture, target, level, xoffset, width, format, imageSize, bits);
  PROTO3D_CHECK_GL_ERROR("glCompressedTextureSubImage1DEXT");
}
void glGetCompressedTextureImageEXT(GLuint texture, GLenum target, GLint lod, void *img) {
  _glGetCompressedTextureImageEXT(texture, target, lod, img);
  PROTO3D_CHECK_GL_ERROR("glGetCompressedTextureImageEXT");
}
void glCompressedMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits) {
  _glCompressedMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits);
  PROTO3D_CHECK_GL_ERROR("glCompressedMultiTexImage3DEXT");
}
void glCompressedMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits) {
  _glCompressedMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, imageSize, bits);
  PROTO3D_CHECK_GL_ERROR("glCompressedMultiTexImage2DEXT");
}
void glCompressedMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits) {
  _glCompressedMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, imageSize, bits);
  PROTO3D_CHECK_GL_ERROR("glCompressedMultiTexImage1DEXT");
}
void glCompressedMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *bits) {
  _glCompressedMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);
  PROTO3D_CHECK_GL_ERROR("glCompressedMultiTexSubImage3DEXT");
}
void glCompressedMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *bits) {
  _glCompressedMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits);
  PROTO3D_CHECK_GL_ERROR("glCompressedMultiTexSubImage2DEXT");
}
void glCompressedMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *bits) {
  _glCompressedMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, imageSize, bits);
  PROTO3D_CHECK_GL_ERROR("glCompressedMultiTexSubImage1DEXT");
}
void glGetCompressedMultiTexImageEXT(GLenum texunit, GLenum target, GLint lod, void *img) {
  _glGetCompressedMultiTexImageEXT(texunit, target, lod, img);
  PROTO3D_CHECK_GL_ERROR("glGetCompressedMultiTexImageEXT");
}
void glMatrixLoadTransposefEXT(GLenum mode, const GLfloat *m) {
  _glMatrixLoadTransposefEXT(mode, m);
  PROTO3D_CHECK_GL_ERROR("glMatrixLoadTransposefEXT");
}
void glMatrixLoadTransposedEXT(GLenum mode, const GLdouble *m) {
  _glMatrixLoadTransposedEXT(mode, m);
  PROTO3D_CHECK_GL_ERROR("glMatrixLoadTransposedEXT");
}
void glMatrixMultTransposefEXT(GLenum mode, const GLfloat *m) {
  _glMatrixMultTransposefEXT(mode, m);
  PROTO3D_CHECK_GL_ERROR("glMatrixMultTransposefEXT");
}
void glMatrixMultTransposedEXT(GLenum mode, const GLdouble *m) {
  _glMatrixMultTransposedEXT(mode, m);
  PROTO3D_CHECK_GL_ERROR("glMatrixMultTransposedEXT");
}
void glNamedBufferDataEXT(GLuint buffer, GLsizeiptr size, const void *data, GLenum usage) {
  _glNamedBufferDataEXT(buffer, size, data, usage);
  PROTO3D_CHECK_GL_ERROR("glNamedBufferDataEXT");
}
void glNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data) {
  _glNamedBufferSubDataEXT(buffer, offset, size, data);
  PROTO3D_CHECK_GL_ERROR("glNamedBufferSubDataEXT");
}
void *glMapNamedBufferEXT(GLuint buffer, GLenum access) {
  void *ret = _glMapNamedBufferEXT(buffer, access);
  PROTO3D_CHECK_GL_ERROR("glMapNamedBufferEXT");
  return ret;
}
GLboolean glUnmapNamedBufferEXT(GLuint buffer) {
  GLboolean ret = _glUnmapNamedBufferEXT(buffer);
  PROTO3D_CHECK_GL_ERROR("glUnmapNamedBufferEXT");
  return ret;
}
void glGetNamedBufferParameterivEXT(GLuint buffer, GLenum pname, GLint *params) {
  _glGetNamedBufferParameterivEXT(buffer, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetNamedBufferParameterivEXT");
}
void glGetNamedBufferPointervEXT(GLuint buffer, GLenum pname, void **params) {
  _glGetNamedBufferPointervEXT(buffer, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetNamedBufferPointervEXT");
}
void glGetNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, void *data) {
  _glGetNamedBufferSubDataEXT(buffer, offset, size, data);
  PROTO3D_CHECK_GL_ERROR("glGetNamedBufferSubDataEXT");
}
void glProgramUniform1fEXT(GLuint program, GLint location, GLfloat v0) {
  _glProgramUniform1fEXT(program, location, v0);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform1fEXT");
}
void glProgramUniform2fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1) {
  _glProgramUniform2fEXT(program, location, v0, v1);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform2fEXT");
}
void glProgramUniform3fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2) {
  _glProgramUniform3fEXT(program, location, v0, v1, v2);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform3fEXT");
}
void glProgramUniform4fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) {
  _glProgramUniform4fEXT(program, location, v0, v1, v2, v3);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform4fEXT");
}
void glProgramUniform1iEXT(GLuint program, GLint location, GLint v0) {
  _glProgramUniform1iEXT(program, location, v0);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform1iEXT");
}
void glProgramUniform2iEXT(GLuint program, GLint location, GLint v0, GLint v1) {
  _glProgramUniform2iEXT(program, location, v0, v1);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform2iEXT");
}
void glProgramUniform3iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2) {
  _glProgramUniform3iEXT(program, location, v0, v1, v2);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform3iEXT");
}
void glProgramUniform4iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3) {
  _glProgramUniform4iEXT(program, location, v0, v1, v2, v3);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform4iEXT");
}
void glProgramUniform1fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value) {
  _glProgramUniform1fvEXT(program, location, count, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform1fvEXT");
}
void glProgramUniform2fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value) {
  _glProgramUniform2fvEXT(program, location, count, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform2fvEXT");
}
void glProgramUniform3fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value) {
  _glProgramUniform3fvEXT(program, location, count, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform3fvEXT");
}
void glProgramUniform4fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value) {
  _glProgramUniform4fvEXT(program, location, count, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform4fvEXT");
}
void glProgramUniform1ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value) {
  _glProgramUniform1ivEXT(program, location, count, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform1ivEXT");
}
void glProgramUniform2ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value) {
  _glProgramUniform2ivEXT(program, location, count, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform2ivEXT");
}
void glProgramUniform3ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value) {
  _glProgramUniform3ivEXT(program, location, count, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform3ivEXT");
}
void glProgramUniform4ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value) {
  _glProgramUniform4ivEXT(program, location, count, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform4ivEXT");
}
void glProgramUniformMatrix2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  _glProgramUniformMatrix2fvEXT(program, location, count, transpose, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniformMatrix2fvEXT");
}
void glProgramUniformMatrix3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  _glProgramUniformMatrix3fvEXT(program, location, count, transpose, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniformMatrix3fvEXT");
}
void glProgramUniformMatrix4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  _glProgramUniformMatrix4fvEXT(program, location, count, transpose, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniformMatrix4fvEXT");
}
void glProgramUniformMatrix2x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  _glProgramUniformMatrix2x3fvEXT(program, location, count, transpose, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniformMatrix2x3fvEXT");
}
void glProgramUniformMatrix3x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  _glProgramUniformMatrix3x2fvEXT(program, location, count, transpose, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniformMatrix3x2fvEXT");
}
void glProgramUniformMatrix2x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  _glProgramUniformMatrix2x4fvEXT(program, location, count, transpose, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniformMatrix2x4fvEXT");
}
void glProgramUniformMatrix4x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  _glProgramUniformMatrix4x2fvEXT(program, location, count, transpose, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniformMatrix4x2fvEXT");
}
void glProgramUniformMatrix3x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  _glProgramUniformMatrix3x4fvEXT(program, location, count, transpose, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniformMatrix3x4fvEXT");
}
void glProgramUniformMatrix4x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  _glProgramUniformMatrix4x3fvEXT(program, location, count, transpose, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniformMatrix4x3fvEXT");
}
void glTextureBufferEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer) {
  _glTextureBufferEXT(texture, target, internalformat, buffer);
  PROTO3D_CHECK_GL_ERROR("glTextureBufferEXT");
}
void glMultiTexBufferEXT(GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer) {
  _glMultiTexBufferEXT(texunit, target, internalformat, buffer);
  PROTO3D_CHECK_GL_ERROR("glMultiTexBufferEXT");
}
void glTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, const GLint *params) {
  _glTextureParameterIivEXT(texture, target, pname, params);
  PROTO3D_CHECK_GL_ERROR("glTextureParameterIivEXT");
}
void glTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, const GLuint *params) {
  _glTextureParameterIuivEXT(texture, target, pname, params);
  PROTO3D_CHECK_GL_ERROR("glTextureParameterIuivEXT");
}
void glGetTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, GLint *params) {
  _glGetTextureParameterIivEXT(texture, target, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetTextureParameterIivEXT");
}
void glGetTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, GLuint *params) {
  _glGetTextureParameterIuivEXT(texture, target, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetTextureParameterIuivEXT");
}
void glMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint *params) {
  _glMultiTexParameterIivEXT(texunit, target, pname, params);
  PROTO3D_CHECK_GL_ERROR("glMultiTexParameterIivEXT");
}
void glMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, const GLuint *params) {
  _glMultiTexParameterIuivEXT(texunit, target, pname, params);
  PROTO3D_CHECK_GL_ERROR("glMultiTexParameterIuivEXT");
}
void glGetMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, GLint *params) {
  _glGetMultiTexParameterIivEXT(texunit, target, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetMultiTexParameterIivEXT");
}
void glGetMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, GLuint *params) {
  _glGetMultiTexParameterIuivEXT(texunit, target, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetMultiTexParameterIuivEXT");
}
void glProgramUniform1uiEXT(GLuint program, GLint location, GLuint v0) {
  _glProgramUniform1uiEXT(program, location, v0);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform1uiEXT");
}
void glProgramUniform2uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1) {
  _glProgramUniform2uiEXT(program, location, v0, v1);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform2uiEXT");
}
void glProgramUniform3uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2) {
  _glProgramUniform3uiEXT(program, location, v0, v1, v2);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform3uiEXT");
}
void glProgramUniform4uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) {
  _glProgramUniform4uiEXT(program, location, v0, v1, v2, v3);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform4uiEXT");
}
void glProgramUniform1uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value) {
  _glProgramUniform1uivEXT(program, location, count, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform1uivEXT");
}
void glProgramUniform2uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value) {
  _glProgramUniform2uivEXT(program, location, count, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform2uivEXT");
}
void glProgramUniform3uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value) {
  _glProgramUniform3uivEXT(program, location, count, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform3uivEXT");
}
void glProgramUniform4uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value) {
  _glProgramUniform4uivEXT(program, location, count, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform4uivEXT");
}
void glNamedProgramLocalParameters4fvEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat *params) {
  _glNamedProgramLocalParameters4fvEXT(program, target, index, count, params);
  PROTO3D_CHECK_GL_ERROR("glNamedProgramLocalParameters4fvEXT");
}
void glNamedProgramLocalParameterI4iEXT(GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w) {
  _glNamedProgramLocalParameterI4iEXT(program, target, index, x, y, z, w);
  PROTO3D_CHECK_GL_ERROR("glNamedProgramLocalParameterI4iEXT");
}
void glNamedProgramLocalParameterI4ivEXT(GLuint program, GLenum target, GLuint index, const GLint *params) {
  _glNamedProgramLocalParameterI4ivEXT(program, target, index, params);
  PROTO3D_CHECK_GL_ERROR("glNamedProgramLocalParameterI4ivEXT");
}
void glNamedProgramLocalParametersI4ivEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLint *params) {
  _glNamedProgramLocalParametersI4ivEXT(program, target, index, count, params);
  PROTO3D_CHECK_GL_ERROR("glNamedProgramLocalParametersI4ivEXT");
}
void glNamedProgramLocalParameterI4uiEXT(GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) {
  _glNamedProgramLocalParameterI4uiEXT(program, target, index, x, y, z, w);
  PROTO3D_CHECK_GL_ERROR("glNamedProgramLocalParameterI4uiEXT");
}
void glNamedProgramLocalParameterI4uivEXT(GLuint program, GLenum target, GLuint index, const GLuint *params) {
  _glNamedProgramLocalParameterI4uivEXT(program, target, index, params);
  PROTO3D_CHECK_GL_ERROR("glNamedProgramLocalParameterI4uivEXT");
}
void glNamedProgramLocalParametersI4uivEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint *params) {
  _glNamedProgramLocalParametersI4uivEXT(program, target, index, count, params);
  PROTO3D_CHECK_GL_ERROR("glNamedProgramLocalParametersI4uivEXT");
}
void glGetNamedProgramLocalParameterIivEXT(GLuint program, GLenum target, GLuint index, GLint *params) {
  _glGetNamedProgramLocalParameterIivEXT(program, target, index, params);
  PROTO3D_CHECK_GL_ERROR("glGetNamedProgramLocalParameterIivEXT");
}
void glGetNamedProgramLocalParameterIuivEXT(GLuint program, GLenum target, GLuint index, GLuint *params) {
  _glGetNamedProgramLocalParameterIuivEXT(program, target, index, params);
  PROTO3D_CHECK_GL_ERROR("glGetNamedProgramLocalParameterIuivEXT");
}
void glEnableClientStateiEXT(GLenum array, GLuint index) {
  _glEnableClientStateiEXT(array, index);
  PROTO3D_CHECK_GL_ERROR("glEnableClientStateiEXT");
}
void glDisableClientStateiEXT(GLenum array, GLuint index) {
  _glDisableClientStateiEXT(array, index);
  PROTO3D_CHECK_GL_ERROR("glDisableClientStateiEXT");
}
void glGetFloati_vEXT(GLenum pname, GLuint index, GLfloat *params) {
  _glGetFloati_vEXT(pname, index, params);
  PROTO3D_CHECK_GL_ERROR("glGetFloati_vEXT");
}
void glGetDoublei_vEXT(GLenum pname, GLuint index, GLdouble *params) {
  _glGetDoublei_vEXT(pname, index, params);
  PROTO3D_CHECK_GL_ERROR("glGetDoublei_vEXT");
}
void glGetPointeri_vEXT(GLenum pname, GLuint index, void **params) {
  _glGetPointeri_vEXT(pname, index, params);
  PROTO3D_CHECK_GL_ERROR("glGetPointeri_vEXT");
}
void glNamedProgramStringEXT(GLuint program, GLenum target, GLenum format, GLsizei len, const void *string) {
  _glNamedProgramStringEXT(program, target, format, len, string);
  PROTO3D_CHECK_GL_ERROR("glNamedProgramStringEXT");
}
void glNamedProgramLocalParameter4dEXT(GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  _glNamedProgramLocalParameter4dEXT(program, target, index, x, y, z, w);
  PROTO3D_CHECK_GL_ERROR("glNamedProgramLocalParameter4dEXT");
}
void glNamedProgramLocalParameter4dvEXT(GLuint program, GLenum target, GLuint index, const GLdouble *params) {
  _glNamedProgramLocalParameter4dvEXT(program, target, index, params);
  PROTO3D_CHECK_GL_ERROR("glNamedProgramLocalParameter4dvEXT");
}
void glNamedProgramLocalParameter4fEXT(GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  _glNamedProgramLocalParameter4fEXT(program, target, index, x, y, z, w);
  PROTO3D_CHECK_GL_ERROR("glNamedProgramLocalParameter4fEXT");
}
void glNamedProgramLocalParameter4fvEXT(GLuint program, GLenum target, GLuint index, const GLfloat *params) {
  _glNamedProgramLocalParameter4fvEXT(program, target, index, params);
  PROTO3D_CHECK_GL_ERROR("glNamedProgramLocalParameter4fvEXT");
}
void glGetNamedProgramLocalParameterdvEXT(GLuint program, GLenum target, GLuint index, GLdouble *params) {
  _glGetNamedProgramLocalParameterdvEXT(program, target, index, params);
  PROTO3D_CHECK_GL_ERROR("glGetNamedProgramLocalParameterdvEXT");
}
void glGetNamedProgramLocalParameterfvEXT(GLuint program, GLenum target, GLuint index, GLfloat *params) {
  _glGetNamedProgramLocalParameterfvEXT(program, target, index, params);
  PROTO3D_CHECK_GL_ERROR("glGetNamedProgramLocalParameterfvEXT");
}
void glGetNamedProgramivEXT(GLuint program, GLenum target, GLenum pname, GLint *params) {
  _glGetNamedProgramivEXT(program, target, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetNamedProgramivEXT");
}
void glGetNamedProgramStringEXT(GLuint program, GLenum target, GLenum pname, void *string) {
  _glGetNamedProgramStringEXT(program, target, pname, string);
  PROTO3D_CHECK_GL_ERROR("glGetNamedProgramStringEXT");
}
void glNamedRenderbufferStorageEXT(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height) {
  _glNamedRenderbufferStorageEXT(renderbuffer, internalformat, width, height);
  PROTO3D_CHECK_GL_ERROR("glNamedRenderbufferStorageEXT");
}
void glGetNamedRenderbufferParameterivEXT(GLuint renderbuffer, GLenum pname, GLint *params) {
  _glGetNamedRenderbufferParameterivEXT(renderbuffer, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetNamedRenderbufferParameterivEXT");
}
void glNamedRenderbufferStorageMultisampleEXT(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) {
  _glNamedRenderbufferStorageMultisampleEXT(renderbuffer, samples, internalformat, width, height);
  PROTO3D_CHECK_GL_ERROR("glNamedRenderbufferStorageMultisampleEXT");
}
void glNamedRenderbufferStorageMultisampleCoverageEXT(GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height) {
  _glNamedRenderbufferStorageMultisampleCoverageEXT(renderbuffer, coverageSamples, colorSamples, internalformat, width, height);
  PROTO3D_CHECK_GL_ERROR("glNamedRenderbufferStorageMultisampleCoverageEXT");
}
GLenum glCheckNamedFramebufferStatusEXT(GLuint framebuffer, GLenum target) {
  GLenum ret = _glCheckNamedFramebufferStatusEXT(framebuffer, target);
  PROTO3D_CHECK_GL_ERROR("glCheckNamedFramebufferStatusEXT");
  return ret;
}
void glNamedFramebufferTexture1DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {
  _glNamedFramebufferTexture1DEXT(framebuffer, attachment, textarget, texture, level);
  PROTO3D_CHECK_GL_ERROR("glNamedFramebufferTexture1DEXT");
}
void glNamedFramebufferTexture2DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {
  _glNamedFramebufferTexture2DEXT(framebuffer, attachment, textarget, texture, level);
  PROTO3D_CHECK_GL_ERROR("glNamedFramebufferTexture2DEXT");
}
void glNamedFramebufferTexture3DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) {
  _glNamedFramebufferTexture3DEXT(framebuffer, attachment, textarget, texture, level, zoffset);
  PROTO3D_CHECK_GL_ERROR("glNamedFramebufferTexture3DEXT");
}
void glNamedFramebufferRenderbufferEXT(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) {
  _glNamedFramebufferRenderbufferEXT(framebuffer, attachment, renderbuffertarget, renderbuffer);
  PROTO3D_CHECK_GL_ERROR("glNamedFramebufferRenderbufferEXT");
}
void glGetNamedFramebufferAttachmentParameterivEXT(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params) {
  _glGetNamedFramebufferAttachmentParameterivEXT(framebuffer, attachment, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetNamedFramebufferAttachmentParameterivEXT");
}
void glGenerateTextureMipmapEXT(GLuint texture, GLenum target) {
  _glGenerateTextureMipmapEXT(texture, target);
  PROTO3D_CHECK_GL_ERROR("glGenerateTextureMipmapEXT");
}
void glGenerateMultiTexMipmapEXT(GLenum texunit, GLenum target) {
  _glGenerateMultiTexMipmapEXT(texunit, target);
  PROTO3D_CHECK_GL_ERROR("glGenerateMultiTexMipmapEXT");
}
void glFramebufferDrawBufferEXT(GLuint framebuffer, GLenum mode) {
  _glFramebufferDrawBufferEXT(framebuffer, mode);
  PROTO3D_CHECK_GL_ERROR("glFramebufferDrawBufferEXT");
}
void glFramebufferDrawBuffersEXT(GLuint framebuffer, GLsizei n, const GLenum *bufs) {
  _glFramebufferDrawBuffersEXT(framebuffer, n, bufs);
  PROTO3D_CHECK_GL_ERROR("glFramebufferDrawBuffersEXT");
}
void glFramebufferReadBufferEXT(GLuint framebuffer, GLenum mode) {
  _glFramebufferReadBufferEXT(framebuffer, mode);
  PROTO3D_CHECK_GL_ERROR("glFramebufferReadBufferEXT");
}
void glGetFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, GLint *params) {
  _glGetFramebufferParameterivEXT(framebuffer, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetFramebufferParameterivEXT");
}
void glNamedCopyBufferSubDataEXT(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) {
  _glNamedCopyBufferSubDataEXT(readBuffer, writeBuffer, readOffset, writeOffset, size);
  PROTO3D_CHECK_GL_ERROR("glNamedCopyBufferSubDataEXT");
}
void glNamedFramebufferTextureEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level) {
  _glNamedFramebufferTextureEXT(framebuffer, attachment, texture, level);
  PROTO3D_CHECK_GL_ERROR("glNamedFramebufferTextureEXT");
}
void glNamedFramebufferTextureLayerEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer) {
  _glNamedFramebufferTextureLayerEXT(framebuffer, attachment, texture, level, layer);
  PROTO3D_CHECK_GL_ERROR("glNamedFramebufferTextureLayerEXT");
}
void glNamedFramebufferTextureFaceEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face) {
  _glNamedFramebufferTextureFaceEXT(framebuffer, attachment, texture, level, face);
  PROTO3D_CHECK_GL_ERROR("glNamedFramebufferTextureFaceEXT");
}
void glTextureRenderbufferEXT(GLuint texture, GLenum target, GLuint renderbuffer) {
  _glTextureRenderbufferEXT(texture, target, renderbuffer);
  PROTO3D_CHECK_GL_ERROR("glTextureRenderbufferEXT");
}
void glMultiTexRenderbufferEXT(GLenum texunit, GLenum target, GLuint renderbuffer) {
  _glMultiTexRenderbufferEXT(texunit, target, renderbuffer);
  PROTO3D_CHECK_GL_ERROR("glMultiTexRenderbufferEXT");
}
void glVertexArrayVertexOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) {
  _glVertexArrayVertexOffsetEXT(vaobj, buffer, size, type, stride, offset);
  PROTO3D_CHECK_GL_ERROR("glVertexArrayVertexOffsetEXT");
}
void glVertexArrayColorOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) {
  _glVertexArrayColorOffsetEXT(vaobj, buffer, size, type, stride, offset);
  PROTO3D_CHECK_GL_ERROR("glVertexArrayColorOffsetEXT");
}
void glVertexArrayEdgeFlagOffsetEXT(GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset) {
  _glVertexArrayEdgeFlagOffsetEXT(vaobj, buffer, stride, offset);
  PROTO3D_CHECK_GL_ERROR("glVertexArrayEdgeFlagOffsetEXT");
}
void glVertexArrayIndexOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset) {
  _glVertexArrayIndexOffsetEXT(vaobj, buffer, type, stride, offset);
  PROTO3D_CHECK_GL_ERROR("glVertexArrayIndexOffsetEXT");
}
void glVertexArrayNormalOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset) {
  _glVertexArrayNormalOffsetEXT(vaobj, buffer, type, stride, offset);
  PROTO3D_CHECK_GL_ERROR("glVertexArrayNormalOffsetEXT");
}
void glVertexArrayTexCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) {
  _glVertexArrayTexCoordOffsetEXT(vaobj, buffer, size, type, stride, offset);
  PROTO3D_CHECK_GL_ERROR("glVertexArrayTexCoordOffsetEXT");
}
void glVertexArrayMultiTexCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset) {
  _glVertexArrayMultiTexCoordOffsetEXT(vaobj, buffer, texunit, size, type, stride, offset);
  PROTO3D_CHECK_GL_ERROR("glVertexArrayMultiTexCoordOffsetEXT");
}
void glVertexArrayFogCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset) {
  _glVertexArrayFogCoordOffsetEXT(vaobj, buffer, type, stride, offset);
  PROTO3D_CHECK_GL_ERROR("glVertexArrayFogCoordOffsetEXT");
}
void glVertexArraySecondaryColorOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) {
  _glVertexArraySecondaryColorOffsetEXT(vaobj, buffer, size, type, stride, offset);
  PROTO3D_CHECK_GL_ERROR("glVertexArraySecondaryColorOffsetEXT");
}
void glVertexArrayVertexAttribOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset) {
  _glVertexArrayVertexAttribOffsetEXT(vaobj, buffer, index, size, type, normalized, stride, offset);
  PROTO3D_CHECK_GL_ERROR("glVertexArrayVertexAttribOffsetEXT");
}
void glVertexArrayVertexAttribIOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset) {
  _glVertexArrayVertexAttribIOffsetEXT(vaobj, buffer, index, size, type, stride, offset);
  PROTO3D_CHECK_GL_ERROR("glVertexArrayVertexAttribIOffsetEXT");
}
void glEnableVertexArrayEXT(GLuint vaobj, GLenum array) {
  _glEnableVertexArrayEXT(vaobj, array);
  PROTO3D_CHECK_GL_ERROR("glEnableVertexArrayEXT");
}
void glDisableVertexArrayEXT(GLuint vaobj, GLenum array) {
  _glDisableVertexArrayEXT(vaobj, array);
  PROTO3D_CHECK_GL_ERROR("glDisableVertexArrayEXT");
}
void glEnableVertexArrayAttribEXT(GLuint vaobj, GLuint index) {
  _glEnableVertexArrayAttribEXT(vaobj, index);
  PROTO3D_CHECK_GL_ERROR("glEnableVertexArrayAttribEXT");
}
void glDisableVertexArrayAttribEXT(GLuint vaobj, GLuint index) {
  _glDisableVertexArrayAttribEXT(vaobj, index);
  PROTO3D_CHECK_GL_ERROR("glDisableVertexArrayAttribEXT");
}
void glGetVertexArrayIntegervEXT(GLuint vaobj, GLenum pname, GLint *param) {
  _glGetVertexArrayIntegervEXT(vaobj, pname, param);
  PROTO3D_CHECK_GL_ERROR("glGetVertexArrayIntegervEXT");
}
void glGetVertexArrayPointervEXT(GLuint vaobj, GLenum pname, void **param) {
  _glGetVertexArrayPointervEXT(vaobj, pname, param);
  PROTO3D_CHECK_GL_ERROR("glGetVertexArrayPointervEXT");
}
void glGetVertexArrayIntegeri_vEXT(GLuint vaobj, GLuint index, GLenum pname, GLint *param) {
  _glGetVertexArrayIntegeri_vEXT(vaobj, index, pname, param);
  PROTO3D_CHECK_GL_ERROR("glGetVertexArrayIntegeri_vEXT");
}
void glGetVertexArrayPointeri_vEXT(GLuint vaobj, GLuint index, GLenum pname, void **param) {
  _glGetVertexArrayPointeri_vEXT(vaobj, index, pname, param);
  PROTO3D_CHECK_GL_ERROR("glGetVertexArrayPointeri_vEXT");
}
void *glMapNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access) {
  void *ret = _glMapNamedBufferRangeEXT(buffer, offset, length, access);
  PROTO3D_CHECK_GL_ERROR("glMapNamedBufferRangeEXT");
  return ret;
}
void glFlushMappedNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length) {
  _glFlushMappedNamedBufferRangeEXT(buffer, offset, length);
  PROTO3D_CHECK_GL_ERROR("glFlushMappedNamedBufferRangeEXT");
}
void glNamedBufferStorageEXT(GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags) {
  _glNamedBufferStorageEXT(buffer, size, data, flags);
  PROTO3D_CHECK_GL_ERROR("glNamedBufferStorageEXT");
}
void glClearNamedBufferDataEXT(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data) {
  _glClearNamedBufferDataEXT(buffer, internalformat, format, type, data);
  PROTO3D_CHECK_GL_ERROR("glClearNamedBufferDataEXT");
}
void glClearNamedBufferSubDataEXT(GLuint buffer, GLenum internalformat, GLsizeiptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data) {
  _glClearNamedBufferSubDataEXT(buffer, internalformat, offset, size, format, type, data);
  PROTO3D_CHECK_GL_ERROR("glClearNamedBufferSubDataEXT");
}
void glNamedFramebufferParameteriEXT(GLuint framebuffer, GLenum pname, GLint param) {
  _glNamedFramebufferParameteriEXT(framebuffer, pname, param);
  PROTO3D_CHECK_GL_ERROR("glNamedFramebufferParameteriEXT");
}
void glGetNamedFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, GLint *params) {
  _glGetNamedFramebufferParameterivEXT(framebuffer, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetNamedFramebufferParameterivEXT");
}
void glProgramUniform1dEXT(GLuint program, GLint location, GLdouble x) {
  _glProgramUniform1dEXT(program, location, x);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform1dEXT");
}
void glProgramUniform2dEXT(GLuint program, GLint location, GLdouble x, GLdouble y) {
  _glProgramUniform2dEXT(program, location, x, y);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform2dEXT");
}
void glProgramUniform3dEXT(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z) {
  _glProgramUniform3dEXT(program, location, x, y, z);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform3dEXT");
}
void glProgramUniform4dEXT(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  _glProgramUniform4dEXT(program, location, x, y, z, w);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform4dEXT");
}
void glProgramUniform1dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value) {
  _glProgramUniform1dvEXT(program, location, count, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform1dvEXT");
}
void glProgramUniform2dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value) {
  _glProgramUniform2dvEXT(program, location, count, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform2dvEXT");
}
void glProgramUniform3dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value) {
  _glProgramUniform3dvEXT(program, location, count, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform3dvEXT");
}
void glProgramUniform4dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value) {
  _glProgramUniform4dvEXT(program, location, count, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform4dvEXT");
}
void glProgramUniformMatrix2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  _glProgramUniformMatrix2dvEXT(program, location, count, transpose, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniformMatrix2dvEXT");
}
void glProgramUniformMatrix3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  _glProgramUniformMatrix3dvEXT(program, location, count, transpose, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniformMatrix3dvEXT");
}
void glProgramUniformMatrix4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  _glProgramUniformMatrix4dvEXT(program, location, count, transpose, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniformMatrix4dvEXT");
}
void glProgramUniformMatrix2x3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  _glProgramUniformMatrix2x3dvEXT(program, location, count, transpose, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniformMatrix2x3dvEXT");
}
void glProgramUniformMatrix2x4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  _glProgramUniformMatrix2x4dvEXT(program, location, count, transpose, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniformMatrix2x4dvEXT");
}
void glProgramUniformMatrix3x2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  _glProgramUniformMatrix3x2dvEXT(program, location, count, transpose, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniformMatrix3x2dvEXT");
}
void glProgramUniformMatrix3x4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  _glProgramUniformMatrix3x4dvEXT(program, location, count, transpose, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniformMatrix3x4dvEXT");
}
void glProgramUniformMatrix4x2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  _glProgramUniformMatrix4x2dvEXT(program, location, count, transpose, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniformMatrix4x2dvEXT");
}
void glProgramUniformMatrix4x3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  _glProgramUniformMatrix4x3dvEXT(program, location, count, transpose, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniformMatrix4x3dvEXT");
}
void glTextureBufferRangeEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) {
  _glTextureBufferRangeEXT(texture, target, internalformat, buffer, offset, size);
  PROTO3D_CHECK_GL_ERROR("glTextureBufferRangeEXT");
}
void glTextureStorage1DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width) {
  _glTextureStorage1DEXT(texture, target, levels, internalformat, width);
  PROTO3D_CHECK_GL_ERROR("glTextureStorage1DEXT");
}
void glTextureStorage2DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) {
  _glTextureStorage2DEXT(texture, target, levels, internalformat, width, height);
  PROTO3D_CHECK_GL_ERROR("glTextureStorage2DEXT");
}
void glTextureStorage3DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) {
  _glTextureStorage3DEXT(texture, target, levels, internalformat, width, height, depth);
  PROTO3D_CHECK_GL_ERROR("glTextureStorage3DEXT");
}
void glTextureStorage2DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) {
  _glTextureStorage2DMultisampleEXT(texture, target, samples, internalformat, width, height, fixedsamplelocations);
  PROTO3D_CHECK_GL_ERROR("glTextureStorage2DMultisampleEXT");
}
void glTextureStorage3DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) {
  _glTextureStorage3DMultisampleEXT(texture, target, samples, internalformat, width, height, depth, fixedsamplelocations);
  PROTO3D_CHECK_GL_ERROR("glTextureStorage3DMultisampleEXT");
}
void glVertexArrayBindVertexBufferEXT(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) {
  _glVertexArrayBindVertexBufferEXT(vaobj, bindingindex, buffer, offset, stride);
  PROTO3D_CHECK_GL_ERROR("glVertexArrayBindVertexBufferEXT");
}
void glVertexArrayVertexAttribFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) {
  _glVertexArrayVertexAttribFormatEXT(vaobj, attribindex, size, type, normalized, relativeoffset);
  PROTO3D_CHECK_GL_ERROR("glVertexArrayVertexAttribFormatEXT");
}
void glVertexArrayVertexAttribIFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) {
  _glVertexArrayVertexAttribIFormatEXT(vaobj, attribindex, size, type, relativeoffset);
  PROTO3D_CHECK_GL_ERROR("glVertexArrayVertexAttribIFormatEXT");
}
void glVertexArrayVertexAttribLFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) {
  _glVertexArrayVertexAttribLFormatEXT(vaobj, attribindex, size, type, relativeoffset);
  PROTO3D_CHECK_GL_ERROR("glVertexArrayVertexAttribLFormatEXT");
}
void glVertexArrayVertexAttribBindingEXT(GLuint vaobj, GLuint attribindex, GLuint bindingindex) {
  _glVertexArrayVertexAttribBindingEXT(vaobj, attribindex, bindingindex);
  PROTO3D_CHECK_GL_ERROR("glVertexArrayVertexAttribBindingEXT");
}
void glVertexArrayVertexBindingDivisorEXT(GLuint vaobj, GLuint bindingindex, GLuint divisor) {
  _glVertexArrayVertexBindingDivisorEXT(vaobj, bindingindex, divisor);
  PROTO3D_CHECK_GL_ERROR("glVertexArrayVertexBindingDivisorEXT");
}
void glVertexArrayVertexAttribLOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset) {
  _glVertexArrayVertexAttribLOffsetEXT(vaobj, buffer, index, size, type, stride, offset);
  PROTO3D_CHECK_GL_ERROR("glVertexArrayVertexAttribLOffsetEXT");
}
void glTexturePageCommitmentEXT(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit) {
  _glTexturePageCommitmentEXT(texture, level, xoffset, yoffset, zoffset, width, height, depth, commit);
  PROTO3D_CHECK_GL_ERROR("glTexturePageCommitmentEXT");
}
void glVertexArrayVertexAttribDivisorEXT(GLuint vaobj, GLuint index, GLuint divisor) {
  _glVertexArrayVertexAttribDivisorEXT(vaobj, index, divisor);
  PROTO3D_CHECK_GL_ERROR("glVertexArrayVertexAttribDivisorEXT");
}
void glDrawArraysInstancedEXT(GLenum mode, GLint start, GLsizei count, GLsizei primcount) {
  _glDrawArraysInstancedEXT(mode, start, count, primcount);
  PROTO3D_CHECK_GL_ERROR("glDrawArraysInstancedEXT");
}
void glDrawElementsInstancedEXT(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount) {
  _glDrawElementsInstancedEXT(mode, count, type, indices, primcount);
  PROTO3D_CHECK_GL_ERROR("glDrawElementsInstancedEXT");
}
void glPolygonOffsetClampEXT(GLfloat factor, GLfloat units, GLfloat clamp) {
  _glPolygonOffsetClampEXT(factor, units, clamp);
  PROTO3D_CHECK_GL_ERROR("glPolygonOffsetClampEXT");
}
void glRasterSamplesEXT(GLuint samples, GLboolean fixedsamplelocations) {
  _glRasterSamplesEXT(samples, fixedsamplelocations);
  PROTO3D_CHECK_GL_ERROR("glRasterSamplesEXT");
}
void glUseShaderProgramEXT(GLenum type, GLuint program) {
  _glUseShaderProgramEXT(type, program);
  PROTO3D_CHECK_GL_ERROR("glUseShaderProgramEXT");
}
void glActiveProgramEXT(GLuint program) {
  _glActiveProgramEXT(program);
  PROTO3D_CHECK_GL_ERROR("glActiveProgramEXT");
}
GLuint glCreateShaderProgramEXT(GLenum type, const GLchar *string) {
  GLuint ret = _glCreateShaderProgramEXT(type, string);
  PROTO3D_CHECK_GL_ERROR("glCreateShaderProgramEXT");
  return ret;
}
void glWindowRectanglesEXT(GLenum mode, GLsizei count, const GLint *box) {
  _glWindowRectanglesEXT(mode, count, box);
  PROTO3D_CHECK_GL_ERROR("glWindowRectanglesEXT");
}
void glApplyFramebufferAttachmentCMAAINTEL(void) {
  _glApplyFramebufferAttachmentCMAAINTEL();
  PROTO3D_CHECK_GL_ERROR("glApplyFramebufferAttachmentCMAAINTEL");
}
void glBeginPerfQueryINTEL(GLuint queryHandle) {
  _glBeginPerfQueryINTEL(queryHandle);
  PROTO3D_CHECK_GL_ERROR("glBeginPerfQueryINTEL");
}
void glCreatePerfQueryINTEL(GLuint queryId, GLuint *queryHandle) {
  _glCreatePerfQueryINTEL(queryId, queryHandle);
  PROTO3D_CHECK_GL_ERROR("glCreatePerfQueryINTEL");
}
void glDeletePerfQueryINTEL(GLuint queryHandle) {
  _glDeletePerfQueryINTEL(queryHandle);
  PROTO3D_CHECK_GL_ERROR("glDeletePerfQueryINTEL");
}
void glEndPerfQueryINTEL(GLuint queryHandle) {
  _glEndPerfQueryINTEL(queryHandle);
  PROTO3D_CHECK_GL_ERROR("glEndPerfQueryINTEL");
}
void glGetFirstPerfQueryIdINTEL(GLuint *queryId) {
  _glGetFirstPerfQueryIdINTEL(queryId);
  PROTO3D_CHECK_GL_ERROR("glGetFirstPerfQueryIdINTEL");
}
void glGetNextPerfQueryIdINTEL(GLuint queryId, GLuint *nextQueryId) {
  _glGetNextPerfQueryIdINTEL(queryId, nextQueryId);
  PROTO3D_CHECK_GL_ERROR("glGetNextPerfQueryIdINTEL");
}
void glGetPerfCounterInfoINTEL(GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar *counterName, GLuint counterDescLength, GLchar *counterDesc, GLuint *counterOffset, GLuint *counterDataSize, GLuint *counterTypeEnum, GLuint *counterDataTypeEnum, GLuint64 *rawCounterMaxValue) {
  _glGetPerfCounterInfoINTEL(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);
  PROTO3D_CHECK_GL_ERROR("glGetPerfCounterInfoINTEL");
}
void glGetPerfQueryDataINTEL(GLuint queryHandle, GLuint flags, GLsizei dataSize, GLvoid *data, GLuint *bytesWritten) {
  _glGetPerfQueryDataINTEL(queryHandle, flags, dataSize, data, bytesWritten);
  PROTO3D_CHECK_GL_ERROR("glGetPerfQueryDataINTEL");
}
void glGetPerfQueryIdByNameINTEL(GLchar *queryName, GLuint *queryId) {
  _glGetPerfQueryIdByNameINTEL(queryName, queryId);
  PROTO3D_CHECK_GL_ERROR("glGetPerfQueryIdByNameINTEL");
}
void glGetPerfQueryInfoINTEL(GLuint queryId, GLuint queryNameLength, GLchar *queryName, GLuint *dataSize, GLuint *noCounters, GLuint *noInstances, GLuint *capsMask) {
  _glGetPerfQueryInfoINTEL(queryId, queryNameLength, queryName, dataSize, noCounters, noInstances, capsMask);
  PROTO3D_CHECK_GL_ERROR("glGetPerfQueryInfoINTEL");
}
void glMultiDrawArraysIndirectBindlessNV(GLenum mode, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount) {
  _glMultiDrawArraysIndirectBindlessNV(mode, indirect, drawCount, stride, vertexBufferCount);
  PROTO3D_CHECK_GL_ERROR("glMultiDrawArraysIndirectBindlessNV");
}
void glMultiDrawElementsIndirectBindlessNV(GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount) {
  _glMultiDrawElementsIndirectBindlessNV(mode, type, indirect, drawCount, stride, vertexBufferCount);
  PROTO3D_CHECK_GL_ERROR("glMultiDrawElementsIndirectBindlessNV");
}
void glMultiDrawArraysIndirectBindlessCountNV(GLenum mode, const void *indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount) {
  _glMultiDrawArraysIndirectBindlessCountNV(mode, indirect, drawCount, maxDrawCount, stride, vertexBufferCount);
  PROTO3D_CHECK_GL_ERROR("glMultiDrawArraysIndirectBindlessCountNV");
}
void glMultiDrawElementsIndirectBindlessCountNV(GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount) {
  _glMultiDrawElementsIndirectBindlessCountNV(mode, type, indirect, drawCount, maxDrawCount, stride, vertexBufferCount);
  PROTO3D_CHECK_GL_ERROR("glMultiDrawElementsIndirectBindlessCountNV");
}
GLuint64 glGetTextureHandleNV(GLuint texture) {
  GLuint64 ret = _glGetTextureHandleNV(texture);
  PROTO3D_CHECK_GL_ERROR("glGetTextureHandleNV");
  return ret;
}
GLuint64 glGetTextureSamplerHandleNV(GLuint texture, GLuint sampler) {
  GLuint64 ret = _glGetTextureSamplerHandleNV(texture, sampler);
  PROTO3D_CHECK_GL_ERROR("glGetTextureSamplerHandleNV");
  return ret;
}
void glMakeTextureHandleResidentNV(GLuint64 handle) {
  _glMakeTextureHandleResidentNV(handle);
  PROTO3D_CHECK_GL_ERROR("glMakeTextureHandleResidentNV");
}
void glMakeTextureHandleNonResidentNV(GLuint64 handle) {
  _glMakeTextureHandleNonResidentNV(handle);
  PROTO3D_CHECK_GL_ERROR("glMakeTextureHandleNonResidentNV");
}
GLuint64 glGetImageHandleNV(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format) {
  GLuint64 ret = _glGetImageHandleNV(texture, level, layered, layer, format);
  PROTO3D_CHECK_GL_ERROR("glGetImageHandleNV");
  return ret;
}
void glMakeImageHandleResidentNV(GLuint64 handle, GLenum access) {
  _glMakeImageHandleResidentNV(handle, access);
  PROTO3D_CHECK_GL_ERROR("glMakeImageHandleResidentNV");
}
void glMakeImageHandleNonResidentNV(GLuint64 handle) {
  _glMakeImageHandleNonResidentNV(handle);
  PROTO3D_CHECK_GL_ERROR("glMakeImageHandleNonResidentNV");
}
void glUniformHandleui64NV(GLint location, GLuint64 value) {
  _glUniformHandleui64NV(location, value);
  PROTO3D_CHECK_GL_ERROR("glUniformHandleui64NV");
}
void glUniformHandleui64vNV(GLint location, GLsizei count, const GLuint64 *value) {
  _glUniformHandleui64vNV(location, count, value);
  PROTO3D_CHECK_GL_ERROR("glUniformHandleui64vNV");
}
void glProgramUniformHandleui64NV(GLuint program, GLint location, GLuint64 value) {
  _glProgramUniformHandleui64NV(program, location, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniformHandleui64NV");
}
void glProgramUniformHandleui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64 *values) {
  _glProgramUniformHandleui64vNV(program, location, count, values);
  PROTO3D_CHECK_GL_ERROR("glProgramUniformHandleui64vNV");
}
GLboolean glIsTextureHandleResidentNV(GLuint64 handle) {
  GLboolean ret = _glIsTextureHandleResidentNV(handle);
  PROTO3D_CHECK_GL_ERROR("glIsTextureHandleResidentNV");
  return ret;
}
GLboolean glIsImageHandleResidentNV(GLuint64 handle) {
  GLboolean ret = _glIsImageHandleResidentNV(handle);
  PROTO3D_CHECK_GL_ERROR("glIsImageHandleResidentNV");
  return ret;
}
void glBlendParameteriNV(GLenum pname, GLint value) {
  _glBlendParameteriNV(pname, value);
  PROTO3D_CHECK_GL_ERROR("glBlendParameteriNV");
}
void glBlendBarrierNV(void) {
  _glBlendBarrierNV();
  PROTO3D_CHECK_GL_ERROR("glBlendBarrierNV");
}
void glViewportPositionWScaleNV(GLuint index, GLfloat xcoeff, GLfloat ycoeff) {
  _glViewportPositionWScaleNV(index, xcoeff, ycoeff);
  PROTO3D_CHECK_GL_ERROR("glViewportPositionWScaleNV");
}
void glCreateStatesNV(GLsizei n, GLuint *states) {
  _glCreateStatesNV(n, states);
  PROTO3D_CHECK_GL_ERROR("glCreateStatesNV");
}
void glDeleteStatesNV(GLsizei n, const GLuint *states) {
  _glDeleteStatesNV(n, states);
  PROTO3D_CHECK_GL_ERROR("glDeleteStatesNV");
}
GLboolean glIsStateNV(GLuint state) {
  GLboolean ret = _glIsStateNV(state);
  PROTO3D_CHECK_GL_ERROR("glIsStateNV");
  return ret;
}
void glStateCaptureNV(GLuint state, GLenum mode) {
  _glStateCaptureNV(state, mode);
  PROTO3D_CHECK_GL_ERROR("glStateCaptureNV");
}
GLuint glGetCommandHeaderNV(GLenum tokenID, GLuint size) {
  GLuint ret = _glGetCommandHeaderNV(tokenID, size);
  PROTO3D_CHECK_GL_ERROR("glGetCommandHeaderNV");
  return ret;
}
GLushort glGetStageIndexNV(GLenum shadertype) {
  GLushort ret = _glGetStageIndexNV(shadertype);
  PROTO3D_CHECK_GL_ERROR("glGetStageIndexNV");
  return ret;
}
void glDrawCommandsNV(GLenum primitiveMode, GLuint buffer, const GLintptr *indirects, const GLsizei *sizes, GLuint count) {
  _glDrawCommandsNV(primitiveMode, buffer, indirects, sizes, count);
  PROTO3D_CHECK_GL_ERROR("glDrawCommandsNV");
}
void glDrawCommandsAddressNV(GLenum primitiveMode, const GLuint64 *indirects, const GLsizei *sizes, GLuint count) {
  _glDrawCommandsAddressNV(primitiveMode, indirects, sizes, count);
  PROTO3D_CHECK_GL_ERROR("glDrawCommandsAddressNV");
}
void glDrawCommandsStatesNV(GLuint buffer, const GLintptr *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count) {
  _glDrawCommandsStatesNV(buffer, indirects, sizes, states, fbos, count);
  PROTO3D_CHECK_GL_ERROR("glDrawCommandsStatesNV");
}
void glDrawCommandsStatesAddressNV(const GLuint64 *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count) {
  _glDrawCommandsStatesAddressNV(indirects, sizes, states, fbos, count);
  PROTO3D_CHECK_GL_ERROR("glDrawCommandsStatesAddressNV");
}
void glCreateCommandListsNV(GLsizei n, GLuint *lists) {
  _glCreateCommandListsNV(n, lists);
  PROTO3D_CHECK_GL_ERROR("glCreateCommandListsNV");
}
void glDeleteCommandListsNV(GLsizei n, const GLuint *lists) {
  _glDeleteCommandListsNV(n, lists);
  PROTO3D_CHECK_GL_ERROR("glDeleteCommandListsNV");
}
GLboolean glIsCommandListNV(GLuint list) {
  GLboolean ret = _glIsCommandListNV(list);
  PROTO3D_CHECK_GL_ERROR("glIsCommandListNV");
  return ret;
}
void glListDrawCommandsStatesClientNV(GLuint list, GLuint segment, const void **indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count) {
  _glListDrawCommandsStatesClientNV(list, segment, indirects, sizes, states, fbos, count);
  PROTO3D_CHECK_GL_ERROR("glListDrawCommandsStatesClientNV");
}
void glCommandListSegmentsNV(GLuint list, GLuint segments) {
  _glCommandListSegmentsNV(list, segments);
  PROTO3D_CHECK_GL_ERROR("glCommandListSegmentsNV");
}
void glCompileCommandListNV(GLuint list) {
  _glCompileCommandListNV(list);
  PROTO3D_CHECK_GL_ERROR("glCompileCommandListNV");
}
void glCallCommandListNV(GLuint list) {
  _glCallCommandListNV(list);
  PROTO3D_CHECK_GL_ERROR("glCallCommandListNV");
}
void glBeginConditionalRenderNV(GLuint id, GLenum mode) {
  _glBeginConditionalRenderNV(id, mode);
  PROTO3D_CHECK_GL_ERROR("glBeginConditionalRenderNV");
}
void glEndConditionalRenderNV(void) {
  _glEndConditionalRenderNV();
  PROTO3D_CHECK_GL_ERROR("glEndConditionalRenderNV");
}
void glSubpixelPrecisionBiasNV(GLuint xbits, GLuint ybits) {
  _glSubpixelPrecisionBiasNV(xbits, ybits);
  PROTO3D_CHECK_GL_ERROR("glSubpixelPrecisionBiasNV");
}
void glConservativeRasterParameterfNV(GLenum pname, GLfloat value) {
  _glConservativeRasterParameterfNV(pname, value);
  PROTO3D_CHECK_GL_ERROR("glConservativeRasterParameterfNV");
}
void glConservativeRasterParameteriNV(GLenum pname, GLint param) {
  _glConservativeRasterParameteriNV(pname, param);
  PROTO3D_CHECK_GL_ERROR("glConservativeRasterParameteriNV");
}
void glDrawVkImageNV(GLuint64 vkImage, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1) {
  _glDrawVkImageNV(vkImage, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1);
  PROTO3D_CHECK_GL_ERROR("glDrawVkImageNV");
}
GLVULKANPROCNV glGetVkProcAddrNV(const GLchar *name) {
  GLVULKANPROCNV ret = _glGetVkProcAddrNV(name);
  PROTO3D_CHECK_GL_ERROR("glGetVkProcAddrNV");
  return ret;
}
void glWaitVkSemaphoreNV(GLuint64 vkSemaphore) {
  _glWaitVkSemaphoreNV(vkSemaphore);
  PROTO3D_CHECK_GL_ERROR("glWaitVkSemaphoreNV");
}
void glSignalVkSemaphoreNV(GLuint64 vkSemaphore) {
  _glSignalVkSemaphoreNV(vkSemaphore);
  PROTO3D_CHECK_GL_ERROR("glSignalVkSemaphoreNV");
}
void glSignalVkFenceNV(GLuint64 vkFence) {
  _glSignalVkFenceNV(vkFence);
  PROTO3D_CHECK_GL_ERROR("glSignalVkFenceNV");
}
void glFragmentCoverageColorNV(GLuint color) {
  _glFragmentCoverageColorNV(color);
  PROTO3D_CHECK_GL_ERROR("glFragmentCoverageColorNV");
}
void glCoverageModulationTableNV(GLsizei n, const GLfloat *v) {
  _glCoverageModulationTableNV(n, v);
  PROTO3D_CHECK_GL_ERROR("glCoverageModulationTableNV");
}
void glGetCoverageModulationTableNV(GLsizei bufsize, GLfloat *v) {
  _glGetCoverageModulationTableNV(bufsize, v);
  PROTO3D_CHECK_GL_ERROR("glGetCoverageModulationTableNV");
}
void glCoverageModulationNV(GLenum components) {
  _glCoverageModulationNV(components);
  PROTO3D_CHECK_GL_ERROR("glCoverageModulationNV");
}
void glRenderbufferStorageMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height) {
  _glRenderbufferStorageMultisampleCoverageNV(target, coverageSamples, colorSamples, internalformat, width, height);
  PROTO3D_CHECK_GL_ERROR("glRenderbufferStorageMultisampleCoverageNV");
}
void glUniform1i64NV(GLint location, GLint64EXT x) {
  _glUniform1i64NV(location, x);
  PROTO3D_CHECK_GL_ERROR("glUniform1i64NV");
}
void glUniform2i64NV(GLint location, GLint64EXT x, GLint64EXT y) {
  _glUniform2i64NV(location, x, y);
  PROTO3D_CHECK_GL_ERROR("glUniform2i64NV");
}
void glUniform3i64NV(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z) {
  _glUniform3i64NV(location, x, y, z);
  PROTO3D_CHECK_GL_ERROR("glUniform3i64NV");
}
void glUniform4i64NV(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w) {
  _glUniform4i64NV(location, x, y, z, w);
  PROTO3D_CHECK_GL_ERROR("glUniform4i64NV");
}
void glUniform1i64vNV(GLint location, GLsizei count, const GLint64EXT *value) {
  _glUniform1i64vNV(location, count, value);
  PROTO3D_CHECK_GL_ERROR("glUniform1i64vNV");
}
void glUniform2i64vNV(GLint location, GLsizei count, const GLint64EXT *value) {
  _glUniform2i64vNV(location, count, value);
  PROTO3D_CHECK_GL_ERROR("glUniform2i64vNV");
}
void glUniform3i64vNV(GLint location, GLsizei count, const GLint64EXT *value) {
  _glUniform3i64vNV(location, count, value);
  PROTO3D_CHECK_GL_ERROR("glUniform3i64vNV");
}
void glUniform4i64vNV(GLint location, GLsizei count, const GLint64EXT *value) {
  _glUniform4i64vNV(location, count, value);
  PROTO3D_CHECK_GL_ERROR("glUniform4i64vNV");
}
void glUniform1ui64NV(GLint location, GLuint64EXT x) {
  _glUniform1ui64NV(location, x);
  PROTO3D_CHECK_GL_ERROR("glUniform1ui64NV");
}
void glUniform2ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y) {
  _glUniform2ui64NV(location, x, y);
  PROTO3D_CHECK_GL_ERROR("glUniform2ui64NV");
}
void glUniform3ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z) {
  _glUniform3ui64NV(location, x, y, z);
  PROTO3D_CHECK_GL_ERROR("glUniform3ui64NV");
}
void glUniform4ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w) {
  _glUniform4ui64NV(location, x, y, z, w);
  PROTO3D_CHECK_GL_ERROR("glUniform4ui64NV");
}
void glUniform1ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value) {
  _glUniform1ui64vNV(location, count, value);
  PROTO3D_CHECK_GL_ERROR("glUniform1ui64vNV");
}
void glUniform2ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value) {
  _glUniform2ui64vNV(location, count, value);
  PROTO3D_CHECK_GL_ERROR("glUniform2ui64vNV");
}
void glUniform3ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value) {
  _glUniform3ui64vNV(location, count, value);
  PROTO3D_CHECK_GL_ERROR("glUniform3ui64vNV");
}
void glUniform4ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value) {
  _glUniform4ui64vNV(location, count, value);
  PROTO3D_CHECK_GL_ERROR("glUniform4ui64vNV");
}
void glGetUniformi64vNV(GLuint program, GLint location, GLint64EXT *params) {
  _glGetUniformi64vNV(program, location, params);
  PROTO3D_CHECK_GL_ERROR("glGetUniformi64vNV");
}
void glProgramUniform1i64NV(GLuint program, GLint location, GLint64EXT x) {
  _glProgramUniform1i64NV(program, location, x);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform1i64NV");
}
void glProgramUniform2i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y) {
  _glProgramUniform2i64NV(program, location, x, y);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform2i64NV");
}
void glProgramUniform3i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z) {
  _glProgramUniform3i64NV(program, location, x, y, z);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform3i64NV");
}
void glProgramUniform4i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w) {
  _glProgramUniform4i64NV(program, location, x, y, z, w);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform4i64NV");
}
void glProgramUniform1i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value) {
  _glProgramUniform1i64vNV(program, location, count, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform1i64vNV");
}
void glProgramUniform2i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value) {
  _glProgramUniform2i64vNV(program, location, count, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform2i64vNV");
}
void glProgramUniform3i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value) {
  _glProgramUniform3i64vNV(program, location, count, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform3i64vNV");
}
void glProgramUniform4i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value) {
  _glProgramUniform4i64vNV(program, location, count, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform4i64vNV");
}
void glProgramUniform1ui64NV(GLuint program, GLint location, GLuint64EXT x) {
  _glProgramUniform1ui64NV(program, location, x);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform1ui64NV");
}
void glProgramUniform2ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y) {
  _glProgramUniform2ui64NV(program, location, x, y);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform2ui64NV");
}
void glProgramUniform3ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z) {
  _glProgramUniform3ui64NV(program, location, x, y, z);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform3ui64NV");
}
void glProgramUniform4ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w) {
  _glProgramUniform4ui64NV(program, location, x, y, z, w);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform4ui64NV");
}
void glProgramUniform1ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value) {
  _glProgramUniform1ui64vNV(program, location, count, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform1ui64vNV");
}
void glProgramUniform2ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value) {
  _glProgramUniform2ui64vNV(program, location, count, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform2ui64vNV");
}
void glProgramUniform3ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value) {
  _glProgramUniform3ui64vNV(program, location, count, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform3ui64vNV");
}
void glProgramUniform4ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value) {
  _glProgramUniform4ui64vNV(program, location, count, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniform4ui64vNV");
}
void glGetInternalformatSampleivNV(GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei bufSize, GLint *params) {
  _glGetInternalformatSampleivNV(target, internalformat, samples, pname, bufSize, params);
  PROTO3D_CHECK_GL_ERROR("glGetInternalformatSampleivNV");
}
GLuint glGenPathsNV(GLsizei range) {
  GLuint ret = _glGenPathsNV(range);
  PROTO3D_CHECK_GL_ERROR("glGenPathsNV");
  return ret;
}
void glDeletePathsNV(GLuint path, GLsizei range) {
  _glDeletePathsNV(path, range);
  PROTO3D_CHECK_GL_ERROR("glDeletePathsNV");
}
GLboolean glIsPathNV(GLuint path) {
  GLboolean ret = _glIsPathNV(path);
  PROTO3D_CHECK_GL_ERROR("glIsPathNV");
  return ret;
}
void glPathCommandsNV(GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords) {
  _glPathCommandsNV(path, numCommands, commands, numCoords, coordType, coords);
  PROTO3D_CHECK_GL_ERROR("glPathCommandsNV");
}
void glPathCoordsNV(GLuint path, GLsizei numCoords, GLenum coordType, const void *coords) {
  _glPathCoordsNV(path, numCoords, coordType, coords);
  PROTO3D_CHECK_GL_ERROR("glPathCoordsNV");
}
void glPathSubCommandsNV(GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords) {
  _glPathSubCommandsNV(path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords);
  PROTO3D_CHECK_GL_ERROR("glPathSubCommandsNV");
}
void glPathSubCoordsNV(GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void *coords) {
  _glPathSubCoordsNV(path, coordStart, numCoords, coordType, coords);
  PROTO3D_CHECK_GL_ERROR("glPathSubCoordsNV");
}
void glPathStringNV(GLuint path, GLenum format, GLsizei length, const void *pathString) {
  _glPathStringNV(path, format, length, pathString);
  PROTO3D_CHECK_GL_ERROR("glPathStringNV");
}
void glPathGlyphsNV(GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale) {
  _glPathGlyphsNV(firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale);
  PROTO3D_CHECK_GL_ERROR("glPathGlyphsNV");
}
void glPathGlyphRangeNV(GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale) {
  _glPathGlyphRangeNV(firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale);
  PROTO3D_CHECK_GL_ERROR("glPathGlyphRangeNV");
}
void glWeightPathsNV(GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights) {
  _glWeightPathsNV(resultPath, numPaths, paths, weights);
  PROTO3D_CHECK_GL_ERROR("glWeightPathsNV");
}
void glCopyPathNV(GLuint resultPath, GLuint srcPath) {
  _glCopyPathNV(resultPath, srcPath);
  PROTO3D_CHECK_GL_ERROR("glCopyPathNV");
}
void glInterpolatePathsNV(GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight) {
  _glInterpolatePathsNV(resultPath, pathA, pathB, weight);
  PROTO3D_CHECK_GL_ERROR("glInterpolatePathsNV");
}
void glTransformPathNV(GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues) {
  _glTransformPathNV(resultPath, srcPath, transformType, transformValues);
  PROTO3D_CHECK_GL_ERROR("glTransformPathNV");
}
void glPathParameterivNV(GLuint path, GLenum pname, const GLint *value) {
  _glPathParameterivNV(path, pname, value);
  PROTO3D_CHECK_GL_ERROR("glPathParameterivNV");
}
void glPathParameteriNV(GLuint path, GLenum pname, GLint value) {
  _glPathParameteriNV(path, pname, value);
  PROTO3D_CHECK_GL_ERROR("glPathParameteriNV");
}
void glPathParameterfvNV(GLuint path, GLenum pname, const GLfloat *value) {
  _glPathParameterfvNV(path, pname, value);
  PROTO3D_CHECK_GL_ERROR("glPathParameterfvNV");
}
void glPathParameterfNV(GLuint path, GLenum pname, GLfloat value) {
  _glPathParameterfNV(path, pname, value);
  PROTO3D_CHECK_GL_ERROR("glPathParameterfNV");
}
void glPathDashArrayNV(GLuint path, GLsizei dashCount, const GLfloat *dashArray) {
  _glPathDashArrayNV(path, dashCount, dashArray);
  PROTO3D_CHECK_GL_ERROR("glPathDashArrayNV");
}
void glPathStencilFuncNV(GLenum func, GLint ref, GLuint mask) {
  _glPathStencilFuncNV(func, ref, mask);
  PROTO3D_CHECK_GL_ERROR("glPathStencilFuncNV");
}
void glPathStencilDepthOffsetNV(GLfloat factor, GLfloat units) {
  _glPathStencilDepthOffsetNV(factor, units);
  PROTO3D_CHECK_GL_ERROR("glPathStencilDepthOffsetNV");
}
void glStencilFillPathNV(GLuint path, GLenum fillMode, GLuint mask) {
  _glStencilFillPathNV(path, fillMode, mask);
  PROTO3D_CHECK_GL_ERROR("glStencilFillPathNV");
}
void glStencilStrokePathNV(GLuint path, GLint reference, GLuint mask) {
  _glStencilStrokePathNV(path, reference, mask);
  PROTO3D_CHECK_GL_ERROR("glStencilStrokePathNV");
}
void glStencilFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues) {
  _glStencilFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues);
  PROTO3D_CHECK_GL_ERROR("glStencilFillPathInstancedNV");
}
void glStencilStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues) {
  _glStencilStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues);
  PROTO3D_CHECK_GL_ERROR("glStencilStrokePathInstancedNV");
}
void glPathCoverDepthFuncNV(GLenum func) {
  _glPathCoverDepthFuncNV(func);
  PROTO3D_CHECK_GL_ERROR("glPathCoverDepthFuncNV");
}
void glCoverFillPathNV(GLuint path, GLenum coverMode) {
  _glCoverFillPathNV(path, coverMode);
  PROTO3D_CHECK_GL_ERROR("glCoverFillPathNV");
}
void glCoverStrokePathNV(GLuint path, GLenum coverMode) {
  _glCoverStrokePathNV(path, coverMode);
  PROTO3D_CHECK_GL_ERROR("glCoverStrokePathNV");
}
void glCoverFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues) {
  _glCoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
  PROTO3D_CHECK_GL_ERROR("glCoverFillPathInstancedNV");
}
void glCoverStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues) {
  _glCoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
  PROTO3D_CHECK_GL_ERROR("glCoverStrokePathInstancedNV");
}
void glGetPathParameterivNV(GLuint path, GLenum pname, GLint *value) {
  _glGetPathParameterivNV(path, pname, value);
  PROTO3D_CHECK_GL_ERROR("glGetPathParameterivNV");
}
void glGetPathParameterfvNV(GLuint path, GLenum pname, GLfloat *value) {
  _glGetPathParameterfvNV(path, pname, value);
  PROTO3D_CHECK_GL_ERROR("glGetPathParameterfvNV");
}
void glGetPathCommandsNV(GLuint path, GLubyte *commands) {
  _glGetPathCommandsNV(path, commands);
  PROTO3D_CHECK_GL_ERROR("glGetPathCommandsNV");
}
void glGetPathCoordsNV(GLuint path, GLfloat *coords) {
  _glGetPathCoordsNV(path, coords);
  PROTO3D_CHECK_GL_ERROR("glGetPathCoordsNV");
}
void glGetPathDashArrayNV(GLuint path, GLfloat *dashArray) {
  _glGetPathDashArrayNV(path, dashArray);
  PROTO3D_CHECK_GL_ERROR("glGetPathDashArrayNV");
}
void glGetPathMetricsNV(GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics) {
  _glGetPathMetricsNV(metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics);
  PROTO3D_CHECK_GL_ERROR("glGetPathMetricsNV");
}
void glGetPathMetricRangeNV(GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics) {
  _glGetPathMetricRangeNV(metricQueryMask, firstPathName, numPaths, stride, metrics);
  PROTO3D_CHECK_GL_ERROR("glGetPathMetricRangeNV");
}
void glGetPathSpacingNV(GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing) {
  _glGetPathSpacingNV(pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing);
  PROTO3D_CHECK_GL_ERROR("glGetPathSpacingNV");
}
GLboolean glIsPointInFillPathNV(GLuint path, GLuint mask, GLfloat x, GLfloat y) {
  GLboolean ret = _glIsPointInFillPathNV(path, mask, x, y);
  PROTO3D_CHECK_GL_ERROR("glIsPointInFillPathNV");
  return ret;
}
GLboolean glIsPointInStrokePathNV(GLuint path, GLfloat x, GLfloat y) {
  GLboolean ret = _glIsPointInStrokePathNV(path, x, y);
  PROTO3D_CHECK_GL_ERROR("glIsPointInStrokePathNV");
  return ret;
}
GLfloat glGetPathLengthNV(GLuint path, GLsizei startSegment, GLsizei numSegments) {
  GLfloat ret = _glGetPathLengthNV(path, startSegment, numSegments);
  PROTO3D_CHECK_GL_ERROR("glGetPathLengthNV");
  return ret;
}
GLboolean glPointAlongPathNV(GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY) {
  GLboolean ret = _glPointAlongPathNV(path, startSegment, numSegments, distance, x, y, tangentX, tangentY);
  PROTO3D_CHECK_GL_ERROR("glPointAlongPathNV");
  return ret;
}
void glMatrixLoad3x2fNV(GLenum matrixMode, const GLfloat *m) {
  _glMatrixLoad3x2fNV(matrixMode, m);
  PROTO3D_CHECK_GL_ERROR("glMatrixLoad3x2fNV");
}
void glMatrixLoad3x3fNV(GLenum matrixMode, const GLfloat *m) {
  _glMatrixLoad3x3fNV(matrixMode, m);
  PROTO3D_CHECK_GL_ERROR("glMatrixLoad3x3fNV");
}
void glMatrixLoadTranspose3x3fNV(GLenum matrixMode, const GLfloat *m) {
  _glMatrixLoadTranspose3x3fNV(matrixMode, m);
  PROTO3D_CHECK_GL_ERROR("glMatrixLoadTranspose3x3fNV");
}
void glMatrixMult3x2fNV(GLenum matrixMode, const GLfloat *m) {
  _glMatrixMult3x2fNV(matrixMode, m);
  PROTO3D_CHECK_GL_ERROR("glMatrixMult3x2fNV");
}
void glMatrixMult3x3fNV(GLenum matrixMode, const GLfloat *m) {
  _glMatrixMult3x3fNV(matrixMode, m);
  PROTO3D_CHECK_GL_ERROR("glMatrixMult3x3fNV");
}
void glMatrixMultTranspose3x3fNV(GLenum matrixMode, const GLfloat *m) {
  _glMatrixMultTranspose3x3fNV(matrixMode, m);
  PROTO3D_CHECK_GL_ERROR("glMatrixMultTranspose3x3fNV");
}
void glStencilThenCoverFillPathNV(GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode) {
  _glStencilThenCoverFillPathNV(path, fillMode, mask, coverMode);
  PROTO3D_CHECK_GL_ERROR("glStencilThenCoverFillPathNV");
}
void glStencilThenCoverStrokePathNV(GLuint path, GLint reference, GLuint mask, GLenum coverMode) {
  _glStencilThenCoverStrokePathNV(path, reference, mask, coverMode);
  PROTO3D_CHECK_GL_ERROR("glStencilThenCoverStrokePathNV");
}
void glStencilThenCoverFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues) {
  _glStencilThenCoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, coverMode, transformType, transformValues);
  PROTO3D_CHECK_GL_ERROR("glStencilThenCoverFillPathInstancedNV");
}
void glStencilThenCoverStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues) {
  _glStencilThenCoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, coverMode, transformType, transformValues);
  PROTO3D_CHECK_GL_ERROR("glStencilThenCoverStrokePathInstancedNV");
}
GLenum glPathGlyphIndexRangeNV(GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint baseAndCount[2]) {
  GLenum ret = _glPathGlyphIndexRangeNV(fontTarget, fontName, fontStyle, pathParameterTemplate, emScale, baseAndCount);
  PROTO3D_CHECK_GL_ERROR("glPathGlyphIndexRangeNV");
  return ret;
}
GLenum glPathGlyphIndexArrayNV(GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale) {
  GLenum ret = _glPathGlyphIndexArrayNV(firstPathName, fontTarget, fontName, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
  PROTO3D_CHECK_GL_ERROR("glPathGlyphIndexArrayNV");
  return ret;
}
GLenum glPathMemoryGlyphIndexArrayNV(GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void *fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale) {
  GLenum ret = _glPathMemoryGlyphIndexArrayNV(firstPathName, fontTarget, fontSize, fontData, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
  PROTO3D_CHECK_GL_ERROR("glPathMemoryGlyphIndexArrayNV");
  return ret;
}
void glProgramPathFragmentInputGenNV(GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat *coeffs) {
  _glProgramPathFragmentInputGenNV(program, location, genMode, components, coeffs);
  PROTO3D_CHECK_GL_ERROR("glProgramPathFragmentInputGenNV");
}
void glGetProgramResourcefvNV(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLfloat *params) {
  _glGetProgramResourcefvNV(program, programInterface, index, propCount, props, bufSize, length, params);
  PROTO3D_CHECK_GL_ERROR("glGetProgramResourcefvNV");
}
void glFramebufferSampleLocationsfvNV(GLenum target, GLuint start, GLsizei count, const GLfloat *v) {
  _glFramebufferSampleLocationsfvNV(target, start, count, v);
  PROTO3D_CHECK_GL_ERROR("glFramebufferSampleLocationsfvNV");
}
void glNamedFramebufferSampleLocationsfvNV(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v) {
  _glNamedFramebufferSampleLocationsfvNV(framebuffer, start, count, v);
  PROTO3D_CHECK_GL_ERROR("glNamedFramebufferSampleLocationsfvNV");
}
void glResolveDepthValuesNV(void) {
  _glResolveDepthValuesNV();
  PROTO3D_CHECK_GL_ERROR("glResolveDepthValuesNV");
}
void glMakeBufferResidentNV(GLenum target, GLenum access) {
  _glMakeBufferResidentNV(target, access);
  PROTO3D_CHECK_GL_ERROR("glMakeBufferResidentNV");
}
void glMakeBufferNonResidentNV(GLenum target) {
  _glMakeBufferNonResidentNV(target);
  PROTO3D_CHECK_GL_ERROR("glMakeBufferNonResidentNV");
}
GLboolean glIsBufferResidentNV(GLenum target) {
  GLboolean ret = _glIsBufferResidentNV(target);
  PROTO3D_CHECK_GL_ERROR("glIsBufferResidentNV");
  return ret;
}
void glMakeNamedBufferResidentNV(GLuint buffer, GLenum access) {
  _glMakeNamedBufferResidentNV(buffer, access);
  PROTO3D_CHECK_GL_ERROR("glMakeNamedBufferResidentNV");
}
void glMakeNamedBufferNonResidentNV(GLuint buffer) {
  _glMakeNamedBufferNonResidentNV(buffer);
  PROTO3D_CHECK_GL_ERROR("glMakeNamedBufferNonResidentNV");
}
GLboolean glIsNamedBufferResidentNV(GLuint buffer) {
  GLboolean ret = _glIsNamedBufferResidentNV(buffer);
  PROTO3D_CHECK_GL_ERROR("glIsNamedBufferResidentNV");
  return ret;
}
void glGetBufferParameterui64vNV(GLenum target, GLenum pname, GLuint64EXT *params) {
  _glGetBufferParameterui64vNV(target, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetBufferParameterui64vNV");
}
void glGetNamedBufferParameterui64vNV(GLuint buffer, GLenum pname, GLuint64EXT *params) {
  _glGetNamedBufferParameterui64vNV(buffer, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetNamedBufferParameterui64vNV");
}
void glGetIntegerui64vNV(GLenum value, GLuint64EXT *result) {
  _glGetIntegerui64vNV(value, result);
  PROTO3D_CHECK_GL_ERROR("glGetIntegerui64vNV");
}
void glUniformui64NV(GLint location, GLuint64EXT value) {
  _glUniformui64NV(location, value);
  PROTO3D_CHECK_GL_ERROR("glUniformui64NV");
}
void glUniformui64vNV(GLint location, GLsizei count, const GLuint64EXT *value) {
  _glUniformui64vNV(location, count, value);
  PROTO3D_CHECK_GL_ERROR("glUniformui64vNV");
}
void glGetUniformui64vNV(GLuint program, GLint location, GLuint64EXT *params) {
  _glGetUniformui64vNV(program, location, params);
  PROTO3D_CHECK_GL_ERROR("glGetUniformui64vNV");
}
void glProgramUniformui64NV(GLuint program, GLint location, GLuint64EXT value) {
  _glProgramUniformui64NV(program, location, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniformui64NV");
}
void glProgramUniformui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value) {
  _glProgramUniformui64vNV(program, location, count, value);
  PROTO3D_CHECK_GL_ERROR("glProgramUniformui64vNV");
}
void glTextureBarrierNV(void) {
  _glTextureBarrierNV();
  PROTO3D_CHECK_GL_ERROR("glTextureBarrierNV");
}
void glVertexAttribL1i64NV(GLuint index, GLint64EXT x) {
  _glVertexAttribL1i64NV(index, x);
  PROTO3D_CHECK_GL_ERROR("glVertexAttribL1i64NV");
}
void glVertexAttribL2i64NV(GLuint index, GLint64EXT x, GLint64EXT y) {
  _glVertexAttribL2i64NV(index, x, y);
  PROTO3D_CHECK_GL_ERROR("glVertexAttribL2i64NV");
}
void glVertexAttribL3i64NV(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z) {
  _glVertexAttribL3i64NV(index, x, y, z);
  PROTO3D_CHECK_GL_ERROR("glVertexAttribL3i64NV");
}
void glVertexAttribL4i64NV(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w) {
  _glVertexAttribL4i64NV(index, x, y, z, w);
  PROTO3D_CHECK_GL_ERROR("glVertexAttribL4i64NV");
}
void glVertexAttribL1i64vNV(GLuint index, const GLint64EXT *v) {
  _glVertexAttribL1i64vNV(index, v);
  PROTO3D_CHECK_GL_ERROR("glVertexAttribL1i64vNV");
}
void glVertexAttribL2i64vNV(GLuint index, const GLint64EXT *v) {
  _glVertexAttribL2i64vNV(index, v);
  PROTO3D_CHECK_GL_ERROR("glVertexAttribL2i64vNV");
}
void glVertexAttribL3i64vNV(GLuint index, const GLint64EXT *v) {
  _glVertexAttribL3i64vNV(index, v);
  PROTO3D_CHECK_GL_ERROR("glVertexAttribL3i64vNV");
}
void glVertexAttribL4i64vNV(GLuint index, const GLint64EXT *v) {
  _glVertexAttribL4i64vNV(index, v);
  PROTO3D_CHECK_GL_ERROR("glVertexAttribL4i64vNV");
}
void glVertexAttribL1ui64NV(GLuint index, GLuint64EXT x) {
  _glVertexAttribL1ui64NV(index, x);
  PROTO3D_CHECK_GL_ERROR("glVertexAttribL1ui64NV");
}
void glVertexAttribL2ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y) {
  _glVertexAttribL2ui64NV(index, x, y);
  PROTO3D_CHECK_GL_ERROR("glVertexAttribL2ui64NV");
}
void glVertexAttribL3ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z) {
  _glVertexAttribL3ui64NV(index, x, y, z);
  PROTO3D_CHECK_GL_ERROR("glVertexAttribL3ui64NV");
}
void glVertexAttribL4ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w) {
  _glVertexAttribL4ui64NV(index, x, y, z, w);
  PROTO3D_CHECK_GL_ERROR("glVertexAttribL4ui64NV");
}
void glVertexAttribL1ui64vNV(GLuint index, const GLuint64EXT *v) {
  _glVertexAttribL1ui64vNV(index, v);
  PROTO3D_CHECK_GL_ERROR("glVertexAttribL1ui64vNV");
}
void glVertexAttribL2ui64vNV(GLuint index, const GLuint64EXT *v) {
  _glVertexAttribL2ui64vNV(index, v);
  PROTO3D_CHECK_GL_ERROR("glVertexAttribL2ui64vNV");
}
void glVertexAttribL3ui64vNV(GLuint index, const GLuint64EXT *v) {
  _glVertexAttribL3ui64vNV(index, v);
  PROTO3D_CHECK_GL_ERROR("glVertexAttribL3ui64vNV");
}
void glVertexAttribL4ui64vNV(GLuint index, const GLuint64EXT *v) {
  _glVertexAttribL4ui64vNV(index, v);
  PROTO3D_CHECK_GL_ERROR("glVertexAttribL4ui64vNV");
}
void glGetVertexAttribLi64vNV(GLuint index, GLenum pname, GLint64EXT *params) {
  _glGetVertexAttribLi64vNV(index, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetVertexAttribLi64vNV");
}
void glGetVertexAttribLui64vNV(GLuint index, GLenum pname, GLuint64EXT *params) {
  _glGetVertexAttribLui64vNV(index, pname, params);
  PROTO3D_CHECK_GL_ERROR("glGetVertexAttribLui64vNV");
}
void glVertexAttribLFormatNV(GLuint index, GLint size, GLenum type, GLsizei stride) {
  _glVertexAttribLFormatNV(index, size, type, stride);
  PROTO3D_CHECK_GL_ERROR("glVertexAttribLFormatNV");
}
void glBufferAddressRangeNV(GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length) {
  _glBufferAddressRangeNV(pname, index, address, length);
  PROTO3D_CHECK_GL_ERROR("glBufferAddressRangeNV");
}
void glVertexFormatNV(GLint size, GLenum type, GLsizei stride) {
  _glVertexFormatNV(size, type, stride);
  PROTO3D_CHECK_GL_ERROR("glVertexFormatNV");
}
void glNormalFormatNV(GLenum type, GLsizei stride) {
  _glNormalFormatNV(type, stride);
  PROTO3D_CHECK_GL_ERROR("glNormalFormatNV");
}
void glColorFormatNV(GLint size, GLenum type, GLsizei stride) {
  _glColorFormatNV(size, type, stride);
  PROTO3D_CHECK_GL_ERROR("glColorFormatNV");
}
void glIndexFormatNV(GLenum type, GLsizei stride) {
  _glIndexFormatNV(type, stride);
  PROTO3D_CHECK_GL_ERROR("glIndexFormatNV");
}
void glTexCoordFormatNV(GLint size, GLenum type, GLsizei stride) {
  _glTexCoordFormatNV(size, type, stride);
  PROTO3D_CHECK_GL_ERROR("glTexCoordFormatNV");
}
void glEdgeFlagFormatNV(GLsizei stride) {
  _glEdgeFlagFormatNV(stride);
  PROTO3D_CHECK_GL_ERROR("glEdgeFlagFormatNV");
}
void glSecondaryColorFormatNV(GLint size, GLenum type, GLsizei stride) {
  _glSecondaryColorFormatNV(size, type, stride);
  PROTO3D_CHECK_GL_ERROR("glSecondaryColorFormatNV");
}
void glFogCoordFormatNV(GLenum type, GLsizei stride) {
  _glFogCoordFormatNV(type, stride);
  PROTO3D_CHECK_GL_ERROR("glFogCoordFormatNV");
}
void glVertexAttribFormatNV(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride) {
  _glVertexAttribFormatNV(index, size, type, normalized, stride);
  PROTO3D_CHECK_GL_ERROR("glVertexAttribFormatNV");
}
void glVertexAttribIFormatNV(GLuint index, GLint size, GLenum type, GLsizei stride) {
  _glVertexAttribIFormatNV(index, size, type, stride);
  PROTO3D_CHECK_GL_ERROR("glVertexAttribIFormatNV");
}
void glGetIntegerui64i_vNV(GLenum value, GLuint index, GLuint64EXT *result) {
  _glGetIntegerui64i_vNV(value, index, result);
  PROTO3D_CHECK_GL_ERROR("glGetIntegerui64i_vNV");
}
void glViewportSwizzleNV(GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew) {
  _glViewportSwizzleNV(index, swizzlex, swizzley, swizzlez, swizzlew);
  PROTO3D_CHECK_GL_ERROR("glViewportSwizzleNV");
}
void glFramebufferTextureMultiviewOVR(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews) {
  _glFramebufferTextureMultiviewOVR(target, attachment, texture, level, baseViewIndex, numViews);
  PROTO3D_CHECK_GL_ERROR("glFramebufferTextureMultiviewOVR");
}
// }}} End of Debug GL API implementations
#endif  // !NDEBUG

void Proto3dGlLoadAllCoreProfileProcs(void) {
// {{{
  _glCullFace = (PFNGLCULLFACEPROC)Proto3dGlGetProcAddress("glCullFace");
  _glFrontFace = (PFNGLFRONTFACEPROC)Proto3dGlGetProcAddress("glFrontFace");
  _glHint = (PFNGLHINTPROC)Proto3dGlGetProcAddress("glHint");
  _glLineWidth = (PFNGLLINEWIDTHPROC)Proto3dGlGetProcAddress("glLineWidth");
  _glPointSize = (PFNGLPOINTSIZEPROC)Proto3dGlGetProcAddress("glPointSize");
  _glPolygonMode = (PFNGLPOLYGONMODEPROC)Proto3dGlGetProcAddress("glPolygonMode");
  _glScissor = (PFNGLSCISSORPROC)Proto3dGlGetProcAddress("glScissor");
  _glTexParameterf = (PFNGLTEXPARAMETERFPROC)Proto3dGlGetProcAddress("glTexParameterf");
  _glTexParameterfv = (PFNGLTEXPARAMETERFVPROC)Proto3dGlGetProcAddress("glTexParameterfv");
  _glTexParameteri = (PFNGLTEXPARAMETERIPROC)Proto3dGlGetProcAddress("glTexParameteri");
  _glTexParameteriv = (PFNGLTEXPARAMETERIVPROC)Proto3dGlGetProcAddress("glTexParameteriv");
  _glTexImage1D = (PFNGLTEXIMAGE1DPROC)Proto3dGlGetProcAddress("glTexImage1D");
  _glTexImage2D = (PFNGLTEXIMAGE2DPROC)Proto3dGlGetProcAddress("glTexImage2D");
  _glDrawBuffer = (PFNGLDRAWBUFFERPROC)Proto3dGlGetProcAddress("glDrawBuffer");
  _glClear = (PFNGLCLEARPROC)Proto3dGlGetProcAddress("glClear");
  _glClearColor = (PFNGLCLEARCOLORPROC)Proto3dGlGetProcAddress("glClearColor");
  _glClearStencil = (PFNGLCLEARSTENCILPROC)Proto3dGlGetProcAddress("glClearStencil");
  _glClearDepth = (PFNGLCLEARDEPTHPROC)Proto3dGlGetProcAddress("glClearDepth");
  _glStencilMask = (PFNGLSTENCILMASKPROC)Proto3dGlGetProcAddress("glStencilMask");
  _glColorMask = (PFNGLCOLORMASKPROC)Proto3dGlGetProcAddress("glColorMask");
  _glDepthMask = (PFNGLDEPTHMASKPROC)Proto3dGlGetProcAddress("glDepthMask");
  _glDisable = (PFNGLDISABLEPROC)Proto3dGlGetProcAddress("glDisable");
  _glEnable = (PFNGLENABLEPROC)Proto3dGlGetProcAddress("glEnable");
  _glFinish = (PFNGLFINISHPROC)Proto3dGlGetProcAddress("glFinish");
  _glFlush = (PFNGLFLUSHPROC)Proto3dGlGetProcAddress("glFlush");
  _glBlendFunc = (PFNGLBLENDFUNCPROC)Proto3dGlGetProcAddress("glBlendFunc");
  _glLogicOp = (PFNGLLOGICOPPROC)Proto3dGlGetProcAddress("glLogicOp");
  _glStencilFunc = (PFNGLSTENCILFUNCPROC)Proto3dGlGetProcAddress("glStencilFunc");
  _glStencilOp = (PFNGLSTENCILOPPROC)Proto3dGlGetProcAddress("glStencilOp");
  _glDepthFunc = (PFNGLDEPTHFUNCPROC)Proto3dGlGetProcAddress("glDepthFunc");
  _glPixelStoref = (PFNGLPIXELSTOREFPROC)Proto3dGlGetProcAddress("glPixelStoref");
  _glPixelStorei = (PFNGLPIXELSTOREIPROC)Proto3dGlGetProcAddress("glPixelStorei");
  _glReadBuffer = (PFNGLREADBUFFERPROC)Proto3dGlGetProcAddress("glReadBuffer");
  _glReadPixels = (PFNGLREADPIXELSPROC)Proto3dGlGetProcAddress("glReadPixels");
  _glGetBooleanv = (PFNGLGETBOOLEANVPROC)Proto3dGlGetProcAddress("glGetBooleanv");
  _glGetDoublev = (PFNGLGETDOUBLEVPROC)Proto3dGlGetProcAddress("glGetDoublev");
  _glGetError = (PFNGLGETERRORPROC)Proto3dGlGetProcAddress("glGetError");
  _glGetFloatv = (PFNGLGETFLOATVPROC)Proto3dGlGetProcAddress("glGetFloatv");
  _glGetIntegerv = (PFNGLGETINTEGERVPROC)Proto3dGlGetProcAddress("glGetIntegerv");
  _glGetString = (PFNGLGETSTRINGPROC)Proto3dGlGetProcAddress("glGetString");
  _glGetTexImage = (PFNGLGETTEXIMAGEPROC)Proto3dGlGetProcAddress("glGetTexImage");
  _glGetTexParameterfv = (PFNGLGETTEXPARAMETERFVPROC)Proto3dGlGetProcAddress("glGetTexParameterfv");
  _glGetTexParameteriv = (PFNGLGETTEXPARAMETERIVPROC)Proto3dGlGetProcAddress("glGetTexParameteriv");
  _glGetTexLevelParameterfv = (PFNGLGETTEXLEVELPARAMETERFVPROC)Proto3dGlGetProcAddress("glGetTexLevelParameterfv");
  _glGetTexLevelParameteriv = (PFNGLGETTEXLEVELPARAMETERIVPROC)Proto3dGlGetProcAddress("glGetTexLevelParameteriv");
  _glIsEnabled = (PFNGLISENABLEDPROC)Proto3dGlGetProcAddress("glIsEnabled");
  _glDepthRange = (PFNGLDEPTHRANGEPROC)Proto3dGlGetProcAddress("glDepthRange");
  _glViewport = (PFNGLVIEWPORTPROC)Proto3dGlGetProcAddress("glViewport");
  _glDrawArrays = (PFNGLDRAWARRAYSPROC)Proto3dGlGetProcAddress("glDrawArrays");
  _glDrawElements = (PFNGLDRAWELEMENTSPROC)Proto3dGlGetProcAddress("glDrawElements");
  _glGetPointerv = (PFNGLGETPOINTERVPROC)Proto3dGlGetProcAddress("glGetPointerv");
  _glPolygonOffset = (PFNGLPOLYGONOFFSETPROC)Proto3dGlGetProcAddress("glPolygonOffset");
  _glCopyTexImage1D = (PFNGLCOPYTEXIMAGE1DPROC)Proto3dGlGetProcAddress("glCopyTexImage1D");
  _glCopyTexImage2D = (PFNGLCOPYTEXIMAGE2DPROC)Proto3dGlGetProcAddress("glCopyTexImage2D");
  _glCopyTexSubImage1D = (PFNGLCOPYTEXSUBIMAGE1DPROC)Proto3dGlGetProcAddress("glCopyTexSubImage1D");
  _glCopyTexSubImage2D = (PFNGLCOPYTEXSUBIMAGE2DPROC)Proto3dGlGetProcAddress("glCopyTexSubImage2D");
  _glTexSubImage1D = (PFNGLTEXSUBIMAGE1DPROC)Proto3dGlGetProcAddress("glTexSubImage1D");
  _glTexSubImage2D = (PFNGLTEXSUBIMAGE2DPROC)Proto3dGlGetProcAddress("glTexSubImage2D");
  _glBindTexture = (PFNGLBINDTEXTUREPROC)Proto3dGlGetProcAddress("glBindTexture");
  _glDeleteTextures = (PFNGLDELETETEXTURESPROC)Proto3dGlGetProcAddress("glDeleteTextures");
  _glGenTextures = (PFNGLGENTEXTURESPROC)Proto3dGlGetProcAddress("glGenTextures");
  _glIsTexture = (PFNGLISTEXTUREPROC)Proto3dGlGetProcAddress("glIsTexture");
  _glDrawRangeElements = (PFNGLDRAWRANGEELEMENTSPROC)Proto3dGlGetProcAddress("glDrawRangeElements");
  _glTexImage3D = (PFNGLTEXIMAGE3DPROC)Proto3dGlGetProcAddress("glTexImage3D");
  _glTexSubImage3D = (PFNGLTEXSUBIMAGE3DPROC)Proto3dGlGetProcAddress("glTexSubImage3D");
  _glCopyTexSubImage3D = (PFNGLCOPYTEXSUBIMAGE3DPROC)Proto3dGlGetProcAddress("glCopyTexSubImage3D");
  _glActiveTexture = (PFNGLACTIVETEXTUREPROC)Proto3dGlGetProcAddress("glActiveTexture");
  _glSampleCoverage = (PFNGLSAMPLECOVERAGEPROC)Proto3dGlGetProcAddress("glSampleCoverage");
  _glCompressedTexImage3D = (PFNGLCOMPRESSEDTEXIMAGE3DPROC)Proto3dGlGetProcAddress("glCompressedTexImage3D");
  _glCompressedTexImage2D = (PFNGLCOMPRESSEDTEXIMAGE2DPROC)Proto3dGlGetProcAddress("glCompressedTexImage2D");
  _glCompressedTexImage1D = (PFNGLCOMPRESSEDTEXIMAGE1DPROC)Proto3dGlGetProcAddress("glCompressedTexImage1D");
  _glCompressedTexSubImage3D = (PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC)Proto3dGlGetProcAddress("glCompressedTexSubImage3D");
  _glCompressedTexSubImage2D = (PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC)Proto3dGlGetProcAddress("glCompressedTexSubImage2D");
  _glCompressedTexSubImage1D = (PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC)Proto3dGlGetProcAddress("glCompressedTexSubImage1D");
  _glGetCompressedTexImage = (PFNGLGETCOMPRESSEDTEXIMAGEPROC)Proto3dGlGetProcAddress("glGetCompressedTexImage");
  _glBlendFuncSeparate = (PFNGLBLENDFUNCSEPARATEPROC)Proto3dGlGetProcAddress("glBlendFuncSeparate");
  _glMultiDrawArrays = (PFNGLMULTIDRAWARRAYSPROC)Proto3dGlGetProcAddress("glMultiDrawArrays");
  _glMultiDrawElements = (PFNGLMULTIDRAWELEMENTSPROC)Proto3dGlGetProcAddress("glMultiDrawElements");
  _glPointParameterf = (PFNGLPOINTPARAMETERFPROC)Proto3dGlGetProcAddress("glPointParameterf");
  _glPointParameterfv = (PFNGLPOINTPARAMETERFVPROC)Proto3dGlGetProcAddress("glPointParameterfv");
  _glPointParameteri = (PFNGLPOINTPARAMETERIPROC)Proto3dGlGetProcAddress("glPointParameteri");
  _glPointParameteriv = (PFNGLPOINTPARAMETERIVPROC)Proto3dGlGetProcAddress("glPointParameteriv");
  _glBlendColor = (PFNGLBLENDCOLORPROC)Proto3dGlGetProcAddress("glBlendColor");
  _glBlendEquation = (PFNGLBLENDEQUATIONPROC)Proto3dGlGetProcAddress("glBlendEquation");
  _glGenQueries = (PFNGLGENQUERIESPROC)Proto3dGlGetProcAddress("glGenQueries");
  _glDeleteQueries = (PFNGLDELETEQUERIESPROC)Proto3dGlGetProcAddress("glDeleteQueries");
  _glIsQuery = (PFNGLISQUERYPROC)Proto3dGlGetProcAddress("glIsQuery");
  _glBeginQuery = (PFNGLBEGINQUERYPROC)Proto3dGlGetProcAddress("glBeginQuery");
  _glEndQuery = (PFNGLENDQUERYPROC)Proto3dGlGetProcAddress("glEndQuery");
  _glGetQueryiv = (PFNGLGETQUERYIVPROC)Proto3dGlGetProcAddress("glGetQueryiv");
  _glGetQueryObjectiv = (PFNGLGETQUERYOBJECTIVPROC)Proto3dGlGetProcAddress("glGetQueryObjectiv");
  _glGetQueryObjectuiv = (PFNGLGETQUERYOBJECTUIVPROC)Proto3dGlGetProcAddress("glGetQueryObjectuiv");
  _glBindBuffer = (PFNGLBINDBUFFERPROC)Proto3dGlGetProcAddress("glBindBuffer");
  _glDeleteBuffers = (PFNGLDELETEBUFFERSPROC)Proto3dGlGetProcAddress("glDeleteBuffers");
  _glGenBuffers = (PFNGLGENBUFFERSPROC)Proto3dGlGetProcAddress("glGenBuffers");
  _glIsBuffer = (PFNGLISBUFFERPROC)Proto3dGlGetProcAddress("glIsBuffer");
  _glBufferData = (PFNGLBUFFERDATAPROC)Proto3dGlGetProcAddress("glBufferData");
  _glBufferSubData = (PFNGLBUFFERSUBDATAPROC)Proto3dGlGetProcAddress("glBufferSubData");
  _glGetBufferSubData = (PFNGLGETBUFFERSUBDATAPROC)Proto3dGlGetProcAddress("glGetBufferSubData");
  _glMapBuffer = (PFNGLMAPBUFFERPROC)Proto3dGlGetProcAddress("glMapBuffer");
  _glUnmapBuffer = (PFNGLUNMAPBUFFERPROC)Proto3dGlGetProcAddress("glUnmapBuffer");
  _glGetBufferParameteriv = (PFNGLGETBUFFERPARAMETERIVPROC)Proto3dGlGetProcAddress("glGetBufferParameteriv");
  _glGetBufferPointerv = (PFNGLGETBUFFERPOINTERVPROC)Proto3dGlGetProcAddress("glGetBufferPointerv");
  _glBlendEquationSeparate = (PFNGLBLENDEQUATIONSEPARATEPROC)Proto3dGlGetProcAddress("glBlendEquationSeparate");
  _glDrawBuffers = (PFNGLDRAWBUFFERSPROC)Proto3dGlGetProcAddress("glDrawBuffers");
  _glStencilOpSeparate = (PFNGLSTENCILOPSEPARATEPROC)Proto3dGlGetProcAddress("glStencilOpSeparate");
  _glStencilFuncSeparate = (PFNGLSTENCILFUNCSEPARATEPROC)Proto3dGlGetProcAddress("glStencilFuncSeparate");
  _glStencilMaskSeparate = (PFNGLSTENCILMASKSEPARATEPROC)Proto3dGlGetProcAddress("glStencilMaskSeparate");
  _glAttachShader = (PFNGLATTACHSHADERPROC)Proto3dGlGetProcAddress("glAttachShader");
  _glBindAttribLocation = (PFNGLBINDATTRIBLOCATIONPROC)Proto3dGlGetProcAddress("glBindAttribLocation");
  _glCompileShader = (PFNGLCOMPILESHADERPROC)Proto3dGlGetProcAddress("glCompileShader");
  _glCreateProgram = (PFNGLCREATEPROGRAMPROC)Proto3dGlGetProcAddress("glCreateProgram");
  _glCreateShader = (PFNGLCREATESHADERPROC)Proto3dGlGetProcAddress("glCreateShader");
  _glDeleteProgram = (PFNGLDELETEPROGRAMPROC)Proto3dGlGetProcAddress("glDeleteProgram");
  _glDeleteShader = (PFNGLDELETESHADERPROC)Proto3dGlGetProcAddress("glDeleteShader");
  _glDetachShader = (PFNGLDETACHSHADERPROC)Proto3dGlGetProcAddress("glDetachShader");
  _glDisableVertexAttribArray = (PFNGLDISABLEVERTEXATTRIBARRAYPROC)Proto3dGlGetProcAddress("glDisableVertexAttribArray");
  _glEnableVertexAttribArray = (PFNGLENABLEVERTEXATTRIBARRAYPROC)Proto3dGlGetProcAddress("glEnableVertexAttribArray");
  _glGetActiveAttrib = (PFNGLGETACTIVEATTRIBPROC)Proto3dGlGetProcAddress("glGetActiveAttrib");
  _glGetActiveUniform = (PFNGLGETACTIVEUNIFORMPROC)Proto3dGlGetProcAddress("glGetActiveUniform");
  _glGetAttachedShaders = (PFNGLGETATTACHEDSHADERSPROC)Proto3dGlGetProcAddress("glGetAttachedShaders");
  _glGetAttribLocation = (PFNGLGETATTRIBLOCATIONPROC)Proto3dGlGetProcAddress("glGetAttribLocation");
  _glGetProgramiv = (PFNGLGETPROGRAMIVPROC)Proto3dGlGetProcAddress("glGetProgramiv");
  _glGetProgramInfoLog = (PFNGLGETPROGRAMINFOLOGPROC)Proto3dGlGetProcAddress("glGetProgramInfoLog");
  _glGetShaderiv = (PFNGLGETSHADERIVPROC)Proto3dGlGetProcAddress("glGetShaderiv");
  _glGetShaderInfoLog = (PFNGLGETSHADERINFOLOGPROC)Proto3dGlGetProcAddress("glGetShaderInfoLog");
  _glGetShaderSource = (PFNGLGETSHADERSOURCEPROC)Proto3dGlGetProcAddress("glGetShaderSource");
  _glGetUniformLocation = (PFNGLGETUNIFORMLOCATIONPROC)Proto3dGlGetProcAddress("glGetUniformLocation");
  _glGetUniformfv = (PFNGLGETUNIFORMFVPROC)Proto3dGlGetProcAddress("glGetUniformfv");
  _glGetUniformiv = (PFNGLGETUNIFORMIVPROC)Proto3dGlGetProcAddress("glGetUniformiv");
  _glGetVertexAttribdv = (PFNGLGETVERTEXATTRIBDVPROC)Proto3dGlGetProcAddress("glGetVertexAttribdv");
  _glGetVertexAttribfv = (PFNGLGETVERTEXATTRIBFVPROC)Proto3dGlGetProcAddress("glGetVertexAttribfv");
  _glGetVertexAttribiv = (PFNGLGETVERTEXATTRIBIVPROC)Proto3dGlGetProcAddress("glGetVertexAttribiv");
  _glGetVertexAttribPointerv = (PFNGLGETVERTEXATTRIBPOINTERVPROC)Proto3dGlGetProcAddress("glGetVertexAttribPointerv");
  _glIsProgram = (PFNGLISPROGRAMPROC)Proto3dGlGetProcAddress("glIsProgram");
  _glIsShader = (PFNGLISSHADERPROC)Proto3dGlGetProcAddress("glIsShader");
  _glLinkProgram = (PFNGLLINKPROGRAMPROC)Proto3dGlGetProcAddress("glLinkProgram");
  _glShaderSource = (PFNGLSHADERSOURCEPROC)Proto3dGlGetProcAddress("glShaderSource");
  _glUseProgram = (PFNGLUSEPROGRAMPROC)Proto3dGlGetProcAddress("glUseProgram");
  _glUniform1f = (PFNGLUNIFORM1FPROC)Proto3dGlGetProcAddress("glUniform1f");
  _glUniform2f = (PFNGLUNIFORM2FPROC)Proto3dGlGetProcAddress("glUniform2f");
  _glUniform3f = (PFNGLUNIFORM3FPROC)Proto3dGlGetProcAddress("glUniform3f");
  _glUniform4f = (PFNGLUNIFORM4FPROC)Proto3dGlGetProcAddress("glUniform4f");
  _glUniform1i = (PFNGLUNIFORM1IPROC)Proto3dGlGetProcAddress("glUniform1i");
  _glUniform2i = (PFNGLUNIFORM2IPROC)Proto3dGlGetProcAddress("glUniform2i");
  _glUniform3i = (PFNGLUNIFORM3IPROC)Proto3dGlGetProcAddress("glUniform3i");
  _glUniform4i = (PFNGLUNIFORM4IPROC)Proto3dGlGetProcAddress("glUniform4i");
  _glUniform1fv = (PFNGLUNIFORM1FVPROC)Proto3dGlGetProcAddress("glUniform1fv");
  _glUniform2fv = (PFNGLUNIFORM2FVPROC)Proto3dGlGetProcAddress("glUniform2fv");
  _glUniform3fv = (PFNGLUNIFORM3FVPROC)Proto3dGlGetProcAddress("glUniform3fv");
  _glUniform4fv = (PFNGLUNIFORM4FVPROC)Proto3dGlGetProcAddress("glUniform4fv");
  _glUniform1iv = (PFNGLUNIFORM1IVPROC)Proto3dGlGetProcAddress("glUniform1iv");
  _glUniform2iv = (PFNGLUNIFORM2IVPROC)Proto3dGlGetProcAddress("glUniform2iv");
  _glUniform3iv = (PFNGLUNIFORM3IVPROC)Proto3dGlGetProcAddress("glUniform3iv");
  _glUniform4iv = (PFNGLUNIFORM4IVPROC)Proto3dGlGetProcAddress("glUniform4iv");
  _glUniformMatrix2fv = (PFNGLUNIFORMMATRIX2FVPROC)Proto3dGlGetProcAddress("glUniformMatrix2fv");
  _glUniformMatrix3fv = (PFNGLUNIFORMMATRIX3FVPROC)Proto3dGlGetProcAddress("glUniformMatrix3fv");
  _glUniformMatrix4fv = (PFNGLUNIFORMMATRIX4FVPROC)Proto3dGlGetProcAddress("glUniformMatrix4fv");
  _glValidateProgram = (PFNGLVALIDATEPROGRAMPROC)Proto3dGlGetProcAddress("glValidateProgram");
  _glVertexAttrib1d = (PFNGLVERTEXATTRIB1DPROC)Proto3dGlGetProcAddress("glVertexAttrib1d");
  _glVertexAttrib1dv = (PFNGLVERTEXATTRIB1DVPROC)Proto3dGlGetProcAddress("glVertexAttrib1dv");
  _glVertexAttrib1f = (PFNGLVERTEXATTRIB1FPROC)Proto3dGlGetProcAddress("glVertexAttrib1f");
  _glVertexAttrib1fv = (PFNGLVERTEXATTRIB1FVPROC)Proto3dGlGetProcAddress("glVertexAttrib1fv");
  _glVertexAttrib1s = (PFNGLVERTEXATTRIB1SPROC)Proto3dGlGetProcAddress("glVertexAttrib1s");
  _glVertexAttrib1sv = (PFNGLVERTEXATTRIB1SVPROC)Proto3dGlGetProcAddress("glVertexAttrib1sv");
  _glVertexAttrib2d = (PFNGLVERTEXATTRIB2DPROC)Proto3dGlGetProcAddress("glVertexAttrib2d");
  _glVertexAttrib2dv = (PFNGLVERTEXATTRIB2DVPROC)Proto3dGlGetProcAddress("glVertexAttrib2dv");
  _glVertexAttrib2f = (PFNGLVERTEXATTRIB2FPROC)Proto3dGlGetProcAddress("glVertexAttrib2f");
  _glVertexAttrib2fv = (PFNGLVERTEXATTRIB2FVPROC)Proto3dGlGetProcAddress("glVertexAttrib2fv");
  _glVertexAttrib2s = (PFNGLVERTEXATTRIB2SPROC)Proto3dGlGetProcAddress("glVertexAttrib2s");
  _glVertexAttrib2sv = (PFNGLVERTEXATTRIB2SVPROC)Proto3dGlGetProcAddress("glVertexAttrib2sv");
  _glVertexAttrib3d = (PFNGLVERTEXATTRIB3DPROC)Proto3dGlGetProcAddress("glVertexAttrib3d");
  _glVertexAttrib3dv = (PFNGLVERTEXATTRIB3DVPROC)Proto3dGlGetProcAddress("glVertexAttrib3dv");
  _glVertexAttrib3f = (PFNGLVERTEXATTRIB3FPROC)Proto3dGlGetProcAddress("glVertexAttrib3f");
  _glVertexAttrib3fv = (PFNGLVERTEXATTRIB3FVPROC)Proto3dGlGetProcAddress("glVertexAttrib3fv");
  _glVertexAttrib3s = (PFNGLVERTEXATTRIB3SPROC)Proto3dGlGetProcAddress("glVertexAttrib3s");
  _glVertexAttrib3sv = (PFNGLVERTEXATTRIB3SVPROC)Proto3dGlGetProcAddress("glVertexAttrib3sv");
  _glVertexAttrib4Nbv = (PFNGLVERTEXATTRIB4NBVPROC)Proto3dGlGetProcAddress("glVertexAttrib4Nbv");
  _glVertexAttrib4Niv = (PFNGLVERTEXATTRIB4NIVPROC)Proto3dGlGetProcAddress("glVertexAttrib4Niv");
  _glVertexAttrib4Nsv = (PFNGLVERTEXATTRIB4NSVPROC)Proto3dGlGetProcAddress("glVertexAttrib4Nsv");
  _glVertexAttrib4Nub = (PFNGLVERTEXATTRIB4NUBPROC)Proto3dGlGetProcAddress("glVertexAttrib4Nub");
  _glVertexAttrib4Nubv = (PFNGLVERTEXATTRIB4NUBVPROC)Proto3dGlGetProcAddress("glVertexAttrib4Nubv");
  _glVertexAttrib4Nuiv = (PFNGLVERTEXATTRIB4NUIVPROC)Proto3dGlGetProcAddress("glVertexAttrib4Nuiv");
  _glVertexAttrib4Nusv = (PFNGLVERTEXATTRIB4NUSVPROC)Proto3dGlGetProcAddress("glVertexAttrib4Nusv");
  _glVertexAttrib4bv = (PFNGLVERTEXATTRIB4BVPROC)Proto3dGlGetProcAddress("glVertexAttrib4bv");
  _glVertexAttrib4d = (PFNGLVERTEXATTRIB4DPROC)Proto3dGlGetProcAddress("glVertexAttrib4d");
  _glVertexAttrib4dv = (PFNGLVERTEXATTRIB4DVPROC)Proto3dGlGetProcAddress("glVertexAttrib4dv");
  _glVertexAttrib4f = (PFNGLVERTEXATTRIB4FPROC)Proto3dGlGetProcAddress("glVertexAttrib4f");
  _glVertexAttrib4fv = (PFNGLVERTEXATTRIB4FVPROC)Proto3dGlGetProcAddress("glVertexAttrib4fv");
  _glVertexAttrib4iv = (PFNGLVERTEXATTRIB4IVPROC)Proto3dGlGetProcAddress("glVertexAttrib4iv");
  _glVertexAttrib4s = (PFNGLVERTEXATTRIB4SPROC)Proto3dGlGetProcAddress("glVertexAttrib4s");
  _glVertexAttrib4sv = (PFNGLVERTEXATTRIB4SVPROC)Proto3dGlGetProcAddress("glVertexAttrib4sv");
  _glVertexAttrib4ubv = (PFNGLVERTEXATTRIB4UBVPROC)Proto3dGlGetProcAddress("glVertexAttrib4ubv");
  _glVertexAttrib4uiv = (PFNGLVERTEXATTRIB4UIVPROC)Proto3dGlGetProcAddress("glVertexAttrib4uiv");
  _glVertexAttrib4usv = (PFNGLVERTEXATTRIB4USVPROC)Proto3dGlGetProcAddress("glVertexAttrib4usv");
  _glVertexAttribPointer = (PFNGLVERTEXATTRIBPOINTERPROC)Proto3dGlGetProcAddress("glVertexAttribPointer");
  _glUniformMatrix2x3fv = (PFNGLUNIFORMMATRIX2X3FVPROC)Proto3dGlGetProcAddress("glUniformMatrix2x3fv");
  _glUniformMatrix3x2fv = (PFNGLUNIFORMMATRIX3X2FVPROC)Proto3dGlGetProcAddress("glUniformMatrix3x2fv");
  _glUniformMatrix2x4fv = (PFNGLUNIFORMMATRIX2X4FVPROC)Proto3dGlGetProcAddress("glUniformMatrix2x4fv");
  _glUniformMatrix4x2fv = (PFNGLUNIFORMMATRIX4X2FVPROC)Proto3dGlGetProcAddress("glUniformMatrix4x2fv");
  _glUniformMatrix3x4fv = (PFNGLUNIFORMMATRIX3X4FVPROC)Proto3dGlGetProcAddress("glUniformMatrix3x4fv");
  _glUniformMatrix4x3fv = (PFNGLUNIFORMMATRIX4X3FVPROC)Proto3dGlGetProcAddress("glUniformMatrix4x3fv");
  _glColorMaski = (PFNGLCOLORMASKIPROC)Proto3dGlGetProcAddress("glColorMaski");
  _glGetBooleani_v = (PFNGLGETBOOLEANI_VPROC)Proto3dGlGetProcAddress("glGetBooleani_v");
  _glGetIntegeri_v = (PFNGLGETINTEGERI_VPROC)Proto3dGlGetProcAddress("glGetIntegeri_v");
  _glEnablei = (PFNGLENABLEIPROC)Proto3dGlGetProcAddress("glEnablei");
  _glDisablei = (PFNGLDISABLEIPROC)Proto3dGlGetProcAddress("glDisablei");
  _glIsEnabledi = (PFNGLISENABLEDIPROC)Proto3dGlGetProcAddress("glIsEnabledi");
  _glBeginTransformFeedback = (PFNGLBEGINTRANSFORMFEEDBACKPROC)Proto3dGlGetProcAddress("glBeginTransformFeedback");
  _glEndTransformFeedback = (PFNGLENDTRANSFORMFEEDBACKPROC)Proto3dGlGetProcAddress("glEndTransformFeedback");
  _glBindBufferRange = (PFNGLBINDBUFFERRANGEPROC)Proto3dGlGetProcAddress("glBindBufferRange");
  _glBindBufferBase = (PFNGLBINDBUFFERBASEPROC)Proto3dGlGetProcAddress("glBindBufferBase");
  _glTransformFeedbackVaryings = (PFNGLTRANSFORMFEEDBACKVARYINGSPROC)Proto3dGlGetProcAddress("glTransformFeedbackVaryings");
  _glGetTransformFeedbackVarying = (PFNGLGETTRANSFORMFEEDBACKVARYINGPROC)Proto3dGlGetProcAddress("glGetTransformFeedbackVarying");
  _glClampColor = (PFNGLCLAMPCOLORPROC)Proto3dGlGetProcAddress("glClampColor");
  _glBeginConditionalRender = (PFNGLBEGINCONDITIONALRENDERPROC)Proto3dGlGetProcAddress("glBeginConditionalRender");
  _glEndConditionalRender = (PFNGLENDCONDITIONALRENDERPROC)Proto3dGlGetProcAddress("glEndConditionalRender");
  _glVertexAttribIPointer = (PFNGLVERTEXATTRIBIPOINTERPROC)Proto3dGlGetProcAddress("glVertexAttribIPointer");
  _glGetVertexAttribIiv = (PFNGLGETVERTEXATTRIBIIVPROC)Proto3dGlGetProcAddress("glGetVertexAttribIiv");
  _glGetVertexAttribIuiv = (PFNGLGETVERTEXATTRIBIUIVPROC)Proto3dGlGetProcAddress("glGetVertexAttribIuiv");
  _glVertexAttribI1i = (PFNGLVERTEXATTRIBI1IPROC)Proto3dGlGetProcAddress("glVertexAttribI1i");
  _glVertexAttribI2i = (PFNGLVERTEXATTRIBI2IPROC)Proto3dGlGetProcAddress("glVertexAttribI2i");
  _glVertexAttribI3i = (PFNGLVERTEXATTRIBI3IPROC)Proto3dGlGetProcAddress("glVertexAttribI3i");
  _glVertexAttribI4i = (PFNGLVERTEXATTRIBI4IPROC)Proto3dGlGetProcAddress("glVertexAttribI4i");
  _glVertexAttribI1ui = (PFNGLVERTEXATTRIBI1UIPROC)Proto3dGlGetProcAddress("glVertexAttribI1ui");
  _glVertexAttribI2ui = (PFNGLVERTEXATTRIBI2UIPROC)Proto3dGlGetProcAddress("glVertexAttribI2ui");
  _glVertexAttribI3ui = (PFNGLVERTEXATTRIBI3UIPROC)Proto3dGlGetProcAddress("glVertexAttribI3ui");
  _glVertexAttribI4ui = (PFNGLVERTEXATTRIBI4UIPROC)Proto3dGlGetProcAddress("glVertexAttribI4ui");
  _glVertexAttribI1iv = (PFNGLVERTEXATTRIBI1IVPROC)Proto3dGlGetProcAddress("glVertexAttribI1iv");
  _glVertexAttribI2iv = (PFNGLVERTEXATTRIBI2IVPROC)Proto3dGlGetProcAddress("glVertexAttribI2iv");
  _glVertexAttribI3iv = (PFNGLVERTEXATTRIBI3IVPROC)Proto3dGlGetProcAddress("glVertexAttribI3iv");
  _glVertexAttribI4iv = (PFNGLVERTEXATTRIBI4IVPROC)Proto3dGlGetProcAddress("glVertexAttribI4iv");
  _glVertexAttribI1uiv = (PFNGLVERTEXATTRIBI1UIVPROC)Proto3dGlGetProcAddress("glVertexAttribI1uiv");
  _glVertexAttribI2uiv = (PFNGLVERTEXATTRIBI2UIVPROC)Proto3dGlGetProcAddress("glVertexAttribI2uiv");
  _glVertexAttribI3uiv = (PFNGLVERTEXATTRIBI3UIVPROC)Proto3dGlGetProcAddress("glVertexAttribI3uiv");
  _glVertexAttribI4uiv = (PFNGLVERTEXATTRIBI4UIVPROC)Proto3dGlGetProcAddress("glVertexAttribI4uiv");
  _glVertexAttribI4bv = (PFNGLVERTEXATTRIBI4BVPROC)Proto3dGlGetProcAddress("glVertexAttribI4bv");
  _glVertexAttribI4sv = (PFNGLVERTEXATTRIBI4SVPROC)Proto3dGlGetProcAddress("glVertexAttribI4sv");
  _glVertexAttribI4ubv = (PFNGLVERTEXATTRIBI4UBVPROC)Proto3dGlGetProcAddress("glVertexAttribI4ubv");
  _glVertexAttribI4usv = (PFNGLVERTEXATTRIBI4USVPROC)Proto3dGlGetProcAddress("glVertexAttribI4usv");
  _glGetUniformuiv = (PFNGLGETUNIFORMUIVPROC)Proto3dGlGetProcAddress("glGetUniformuiv");
  _glBindFragDataLocation = (PFNGLBINDFRAGDATALOCATIONPROC)Proto3dGlGetProcAddress("glBindFragDataLocation");
  _glGetFragDataLocation = (PFNGLGETFRAGDATALOCATIONPROC)Proto3dGlGetProcAddress("glGetFragDataLocation");
  _glUniform1ui = (PFNGLUNIFORM1UIPROC)Proto3dGlGetProcAddress("glUniform1ui");
  _glUniform2ui = (PFNGLUNIFORM2UIPROC)Proto3dGlGetProcAddress("glUniform2ui");
  _glUniform3ui = (PFNGLUNIFORM3UIPROC)Proto3dGlGetProcAddress("glUniform3ui");
  _glUniform4ui = (PFNGLUNIFORM4UIPROC)Proto3dGlGetProcAddress("glUniform4ui");
  _glUniform1uiv = (PFNGLUNIFORM1UIVPROC)Proto3dGlGetProcAddress("glUniform1uiv");
  _glUniform2uiv = (PFNGLUNIFORM2UIVPROC)Proto3dGlGetProcAddress("glUniform2uiv");
  _glUniform3uiv = (PFNGLUNIFORM3UIVPROC)Proto3dGlGetProcAddress("glUniform3uiv");
  _glUniform4uiv = (PFNGLUNIFORM4UIVPROC)Proto3dGlGetProcAddress("glUniform4uiv");
  _glTexParameterIiv = (PFNGLTEXPARAMETERIIVPROC)Proto3dGlGetProcAddress("glTexParameterIiv");
  _glTexParameterIuiv = (PFNGLTEXPARAMETERIUIVPROC)Proto3dGlGetProcAddress("glTexParameterIuiv");
  _glGetTexParameterIiv = (PFNGLGETTEXPARAMETERIIVPROC)Proto3dGlGetProcAddress("glGetTexParameterIiv");
  _glGetTexParameterIuiv = (PFNGLGETTEXPARAMETERIUIVPROC)Proto3dGlGetProcAddress("glGetTexParameterIuiv");
  _glClearBufferiv = (PFNGLCLEARBUFFERIVPROC)Proto3dGlGetProcAddress("glClearBufferiv");
  _glClearBufferuiv = (PFNGLCLEARBUFFERUIVPROC)Proto3dGlGetProcAddress("glClearBufferuiv");
  _glClearBufferfv = (PFNGLCLEARBUFFERFVPROC)Proto3dGlGetProcAddress("glClearBufferfv");
  _glClearBufferfi = (PFNGLCLEARBUFFERFIPROC)Proto3dGlGetProcAddress("glClearBufferfi");
  _glGetStringi = (PFNGLGETSTRINGIPROC)Proto3dGlGetProcAddress("glGetStringi");
  _glIsRenderbuffer = (PFNGLISRENDERBUFFERPROC)Proto3dGlGetProcAddress("glIsRenderbuffer");
  _glBindRenderbuffer = (PFNGLBINDRENDERBUFFERPROC)Proto3dGlGetProcAddress("glBindRenderbuffer");
  _glDeleteRenderbuffers = (PFNGLDELETERENDERBUFFERSPROC)Proto3dGlGetProcAddress("glDeleteRenderbuffers");
  _glGenRenderbuffers = (PFNGLGENRENDERBUFFERSPROC)Proto3dGlGetProcAddress("glGenRenderbuffers");
  _glRenderbufferStorage = (PFNGLRENDERBUFFERSTORAGEPROC)Proto3dGlGetProcAddress("glRenderbufferStorage");
  _glGetRenderbufferParameteriv = (PFNGLGETRENDERBUFFERPARAMETERIVPROC)Proto3dGlGetProcAddress("glGetRenderbufferParameteriv");
  _glIsFramebuffer = (PFNGLISFRAMEBUFFERPROC)Proto3dGlGetProcAddress("glIsFramebuffer");
  _glBindFramebuffer = (PFNGLBINDFRAMEBUFFERPROC)Proto3dGlGetProcAddress("glBindFramebuffer");
  _glDeleteFramebuffers = (PFNGLDELETEFRAMEBUFFERSPROC)Proto3dGlGetProcAddress("glDeleteFramebuffers");
  _glGenFramebuffers = (PFNGLGENFRAMEBUFFERSPROC)Proto3dGlGetProcAddress("glGenFramebuffers");
  _glCheckFramebufferStatus = (PFNGLCHECKFRAMEBUFFERSTATUSPROC)Proto3dGlGetProcAddress("glCheckFramebufferStatus");
  _glFramebufferTexture1D = (PFNGLFRAMEBUFFERTEXTURE1DPROC)Proto3dGlGetProcAddress("glFramebufferTexture1D");
  _glFramebufferTexture2D = (PFNGLFRAMEBUFFERTEXTURE2DPROC)Proto3dGlGetProcAddress("glFramebufferTexture2D");
  _glFramebufferTexture3D = (PFNGLFRAMEBUFFERTEXTURE3DPROC)Proto3dGlGetProcAddress("glFramebufferTexture3D");
  _glFramebufferRenderbuffer = (PFNGLFRAMEBUFFERRENDERBUFFERPROC)Proto3dGlGetProcAddress("glFramebufferRenderbuffer");
  _glGetFramebufferAttachmentParameteriv = (PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC)Proto3dGlGetProcAddress("glGetFramebufferAttachmentParameteriv");
  _glGenerateMipmap = (PFNGLGENERATEMIPMAPPROC)Proto3dGlGetProcAddress("glGenerateMipmap");
  _glBlitFramebuffer = (PFNGLBLITFRAMEBUFFERPROC)Proto3dGlGetProcAddress("glBlitFramebuffer");
  _glRenderbufferStorageMultisample = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC)Proto3dGlGetProcAddress("glRenderbufferStorageMultisample");
  _glFramebufferTextureLayer = (PFNGLFRAMEBUFFERTEXTURELAYERPROC)Proto3dGlGetProcAddress("glFramebufferTextureLayer");
  _glMapBufferRange = (PFNGLMAPBUFFERRANGEPROC)Proto3dGlGetProcAddress("glMapBufferRange");
  _glFlushMappedBufferRange = (PFNGLFLUSHMAPPEDBUFFERRANGEPROC)Proto3dGlGetProcAddress("glFlushMappedBufferRange");
  _glBindVertexArray = (PFNGLBINDVERTEXARRAYPROC)Proto3dGlGetProcAddress("glBindVertexArray");
  _glDeleteVertexArrays = (PFNGLDELETEVERTEXARRAYSPROC)Proto3dGlGetProcAddress("glDeleteVertexArrays");
  _glGenVertexArrays = (PFNGLGENVERTEXARRAYSPROC)Proto3dGlGetProcAddress("glGenVertexArrays");
  _glIsVertexArray = (PFNGLISVERTEXARRAYPROC)Proto3dGlGetProcAddress("glIsVertexArray");
  _glDrawArraysInstanced = (PFNGLDRAWARRAYSINSTANCEDPROC)Proto3dGlGetProcAddress("glDrawArraysInstanced");
  _glDrawElementsInstanced = (PFNGLDRAWELEMENTSINSTANCEDPROC)Proto3dGlGetProcAddress("glDrawElementsInstanced");
  _glTexBuffer = (PFNGLTEXBUFFERPROC)Proto3dGlGetProcAddress("glTexBuffer");
  _glPrimitiveRestartIndex = (PFNGLPRIMITIVERESTARTINDEXPROC)Proto3dGlGetProcAddress("glPrimitiveRestartIndex");
  _glCopyBufferSubData = (PFNGLCOPYBUFFERSUBDATAPROC)Proto3dGlGetProcAddress("glCopyBufferSubData");
  _glGetUniformIndices = (PFNGLGETUNIFORMINDICESPROC)Proto3dGlGetProcAddress("glGetUniformIndices");
  _glGetActiveUniformsiv = (PFNGLGETACTIVEUNIFORMSIVPROC)Proto3dGlGetProcAddress("glGetActiveUniformsiv");
  _glGetActiveUniformName = (PFNGLGETACTIVEUNIFORMNAMEPROC)Proto3dGlGetProcAddress("glGetActiveUniformName");
  _glGetUniformBlockIndex = (PFNGLGETUNIFORMBLOCKINDEXPROC)Proto3dGlGetProcAddress("glGetUniformBlockIndex");
  _glGetActiveUniformBlockiv = (PFNGLGETACTIVEUNIFORMBLOCKIVPROC)Proto3dGlGetProcAddress("glGetActiveUniformBlockiv");
  _glGetActiveUniformBlockName = (PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC)Proto3dGlGetProcAddress("glGetActiveUniformBlockName");
  _glUniformBlockBinding = (PFNGLUNIFORMBLOCKBINDINGPROC)Proto3dGlGetProcAddress("glUniformBlockBinding");
  _glDrawElementsBaseVertex = (PFNGLDRAWELEMENTSBASEVERTEXPROC)Proto3dGlGetProcAddress("glDrawElementsBaseVertex");
  _glDrawRangeElementsBaseVertex = (PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC)Proto3dGlGetProcAddress("glDrawRangeElementsBaseVertex");
  _glDrawElementsInstancedBaseVertex = (PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC)Proto3dGlGetProcAddress("glDrawElementsInstancedBaseVertex");
  _glMultiDrawElementsBaseVertex = (PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC)Proto3dGlGetProcAddress("glMultiDrawElementsBaseVertex");
  _glProvokingVertex = (PFNGLPROVOKINGVERTEXPROC)Proto3dGlGetProcAddress("glProvokingVertex");
  _glFenceSync = (PFNGLFENCESYNCPROC)Proto3dGlGetProcAddress("glFenceSync");
  _glIsSync = (PFNGLISSYNCPROC)Proto3dGlGetProcAddress("glIsSync");
  _glDeleteSync = (PFNGLDELETESYNCPROC)Proto3dGlGetProcAddress("glDeleteSync");
  _glClientWaitSync = (PFNGLCLIENTWAITSYNCPROC)Proto3dGlGetProcAddress("glClientWaitSync");
  _glWaitSync = (PFNGLWAITSYNCPROC)Proto3dGlGetProcAddress("glWaitSync");
  _glGetInteger64v = (PFNGLGETINTEGER64VPROC)Proto3dGlGetProcAddress("glGetInteger64v");
  _glGetSynciv = (PFNGLGETSYNCIVPROC)Proto3dGlGetProcAddress("glGetSynciv");
  _glGetInteger64i_v = (PFNGLGETINTEGER64I_VPROC)Proto3dGlGetProcAddress("glGetInteger64i_v");
  _glGetBufferParameteri64v = (PFNGLGETBUFFERPARAMETERI64VPROC)Proto3dGlGetProcAddress("glGetBufferParameteri64v");
  _glFramebufferTexture = (PFNGLFRAMEBUFFERTEXTUREPROC)Proto3dGlGetProcAddress("glFramebufferTexture");
  _glTexImage2DMultisample = (PFNGLTEXIMAGE2DMULTISAMPLEPROC)Proto3dGlGetProcAddress("glTexImage2DMultisample");
  _glTexImage3DMultisample = (PFNGLTEXIMAGE3DMULTISAMPLEPROC)Proto3dGlGetProcAddress("glTexImage3DMultisample");
  _glGetMultisamplefv = (PFNGLGETMULTISAMPLEFVPROC)Proto3dGlGetProcAddress("glGetMultisamplefv");
  _glSampleMaski = (PFNGLSAMPLEMASKIPROC)Proto3dGlGetProcAddress("glSampleMaski");
  _glBindFragDataLocationIndexed = (PFNGLBINDFRAGDATALOCATIONINDEXEDPROC)Proto3dGlGetProcAddress("glBindFragDataLocationIndexed");
  _glGetFragDataIndex = (PFNGLGETFRAGDATAINDEXPROC)Proto3dGlGetProcAddress("glGetFragDataIndex");
  _glGenSamplers = (PFNGLGENSAMPLERSPROC)Proto3dGlGetProcAddress("glGenSamplers");
  _glDeleteSamplers = (PFNGLDELETESAMPLERSPROC)Proto3dGlGetProcAddress("glDeleteSamplers");
  _glIsSampler = (PFNGLISSAMPLERPROC)Proto3dGlGetProcAddress("glIsSampler");
  _glBindSampler = (PFNGLBINDSAMPLERPROC)Proto3dGlGetProcAddress("glBindSampler");
  _glSamplerParameteri = (PFNGLSAMPLERPARAMETERIPROC)Proto3dGlGetProcAddress("glSamplerParameteri");
  _glSamplerParameteriv = (PFNGLSAMPLERPARAMETERIVPROC)Proto3dGlGetProcAddress("glSamplerParameteriv");
  _glSamplerParameterf = (PFNGLSAMPLERPARAMETERFPROC)Proto3dGlGetProcAddress("glSamplerParameterf");
  _glSamplerParameterfv = (PFNGLSAMPLERPARAMETERFVPROC)Proto3dGlGetProcAddress("glSamplerParameterfv");
  _glSamplerParameterIiv = (PFNGLSAMPLERPARAMETERIIVPROC)Proto3dGlGetProcAddress("glSamplerParameterIiv");
  _glSamplerParameterIuiv = (PFNGLSAMPLERPARAMETERIUIVPROC)Proto3dGlGetProcAddress("glSamplerParameterIuiv");
  _glGetSamplerParameteriv = (PFNGLGETSAMPLERPARAMETERIVPROC)Proto3dGlGetProcAddress("glGetSamplerParameteriv");
  _glGetSamplerParameterIiv = (PFNGLGETSAMPLERPARAMETERIIVPROC)Proto3dGlGetProcAddress("glGetSamplerParameterIiv");
  _glGetSamplerParameterfv = (PFNGLGETSAMPLERPARAMETERFVPROC)Proto3dGlGetProcAddress("glGetSamplerParameterfv");
  _glGetSamplerParameterIuiv = (PFNGLGETSAMPLERPARAMETERIUIVPROC)Proto3dGlGetProcAddress("glGetSamplerParameterIuiv");
  _glQueryCounter = (PFNGLQUERYCOUNTERPROC)Proto3dGlGetProcAddress("glQueryCounter");
  _glGetQueryObjecti64v = (PFNGLGETQUERYOBJECTI64VPROC)Proto3dGlGetProcAddress("glGetQueryObjecti64v");
  _glGetQueryObjectui64v = (PFNGLGETQUERYOBJECTUI64VPROC)Proto3dGlGetProcAddress("glGetQueryObjectui64v");
  _glVertexAttribDivisor = (PFNGLVERTEXATTRIBDIVISORPROC)Proto3dGlGetProcAddress("glVertexAttribDivisor");
  _glVertexAttribP1ui = (PFNGLVERTEXATTRIBP1UIPROC)Proto3dGlGetProcAddress("glVertexAttribP1ui");
  _glVertexAttribP1uiv = (PFNGLVERTEXATTRIBP1UIVPROC)Proto3dGlGetProcAddress("glVertexAttribP1uiv");
  _glVertexAttribP2ui = (PFNGLVERTEXATTRIBP2UIPROC)Proto3dGlGetProcAddress("glVertexAttribP2ui");
  _glVertexAttribP2uiv = (PFNGLVERTEXATTRIBP2UIVPROC)Proto3dGlGetProcAddress("glVertexAttribP2uiv");
  _glVertexAttribP3ui = (PFNGLVERTEXATTRIBP3UIPROC)Proto3dGlGetProcAddress("glVertexAttribP3ui");
  _glVertexAttribP3uiv = (PFNGLVERTEXATTRIBP3UIVPROC)Proto3dGlGetProcAddress("glVertexAttribP3uiv");
  _glVertexAttribP4ui = (PFNGLVERTEXATTRIBP4UIPROC)Proto3dGlGetProcAddress("glVertexAttribP4ui");
  _glVertexAttribP4uiv = (PFNGLVERTEXATTRIBP4UIVPROC)Proto3dGlGetProcAddress("glVertexAttribP4uiv");
  _glMinSampleShading = (PFNGLMINSAMPLESHADINGPROC)Proto3dGlGetProcAddress("glMinSampleShading");
  _glBlendEquationi = (PFNGLBLENDEQUATIONIPROC)Proto3dGlGetProcAddress("glBlendEquationi");
  _glBlendEquationSeparatei = (PFNGLBLENDEQUATIONSEPARATEIPROC)Proto3dGlGetProcAddress("glBlendEquationSeparatei");
  _glBlendFunci = (PFNGLBLENDFUNCIPROC)Proto3dGlGetProcAddress("glBlendFunci");
  _glBlendFuncSeparatei = (PFNGLBLENDFUNCSEPARATEIPROC)Proto3dGlGetProcAddress("glBlendFuncSeparatei");
  _glDrawArraysIndirect = (PFNGLDRAWARRAYSINDIRECTPROC)Proto3dGlGetProcAddress("glDrawArraysIndirect");
  _glDrawElementsIndirect = (PFNGLDRAWELEMENTSINDIRECTPROC)Proto3dGlGetProcAddress("glDrawElementsIndirect");
  _glUniform1d = (PFNGLUNIFORM1DPROC)Proto3dGlGetProcAddress("glUniform1d");
  _glUniform2d = (PFNGLUNIFORM2DPROC)Proto3dGlGetProcAddress("glUniform2d");
  _glUniform3d = (PFNGLUNIFORM3DPROC)Proto3dGlGetProcAddress("glUniform3d");
  _glUniform4d = (PFNGLUNIFORM4DPROC)Proto3dGlGetProcAddress("glUniform4d");
  _glUniform1dv = (PFNGLUNIFORM1DVPROC)Proto3dGlGetProcAddress("glUniform1dv");
  _glUniform2dv = (PFNGLUNIFORM2DVPROC)Proto3dGlGetProcAddress("glUniform2dv");
  _glUniform3dv = (PFNGLUNIFORM3DVPROC)Proto3dGlGetProcAddress("glUniform3dv");
  _glUniform4dv = (PFNGLUNIFORM4DVPROC)Proto3dGlGetProcAddress("glUniform4dv");
  _glUniformMatrix2dv = (PFNGLUNIFORMMATRIX2DVPROC)Proto3dGlGetProcAddress("glUniformMatrix2dv");
  _glUniformMatrix3dv = (PFNGLUNIFORMMATRIX3DVPROC)Proto3dGlGetProcAddress("glUniformMatrix3dv");
  _glUniformMatrix4dv = (PFNGLUNIFORMMATRIX4DVPROC)Proto3dGlGetProcAddress("glUniformMatrix4dv");
  _glUniformMatrix2x3dv = (PFNGLUNIFORMMATRIX2X3DVPROC)Proto3dGlGetProcAddress("glUniformMatrix2x3dv");
  _glUniformMatrix2x4dv = (PFNGLUNIFORMMATRIX2X4DVPROC)Proto3dGlGetProcAddress("glUniformMatrix2x4dv");
  _glUniformMatrix3x2dv = (PFNGLUNIFORMMATRIX3X2DVPROC)Proto3dGlGetProcAddress("glUniformMatrix3x2dv");
  _glUniformMatrix3x4dv = (PFNGLUNIFORMMATRIX3X4DVPROC)Proto3dGlGetProcAddress("glUniformMatrix3x4dv");
  _glUniformMatrix4x2dv = (PFNGLUNIFORMMATRIX4X2DVPROC)Proto3dGlGetProcAddress("glUniformMatrix4x2dv");
  _glUniformMatrix4x3dv = (PFNGLUNIFORMMATRIX4X3DVPROC)Proto3dGlGetProcAddress("glUniformMatrix4x3dv");
  _glGetUniformdv = (PFNGLGETUNIFORMDVPROC)Proto3dGlGetProcAddress("glGetUniformdv");
  _glGetSubroutineUniformLocation = (PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC)Proto3dGlGetProcAddress("glGetSubroutineUniformLocation");
  _glGetSubroutineIndex = (PFNGLGETSUBROUTINEINDEXPROC)Proto3dGlGetProcAddress("glGetSubroutineIndex");
  _glGetActiveSubroutineUniformiv = (PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC)Proto3dGlGetProcAddress("glGetActiveSubroutineUniformiv");
  _glGetActiveSubroutineUniformName = (PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC)Proto3dGlGetProcAddress("glGetActiveSubroutineUniformName");
  _glGetActiveSubroutineName = (PFNGLGETACTIVESUBROUTINENAMEPROC)Proto3dGlGetProcAddress("glGetActiveSubroutineName");
  _glUniformSubroutinesuiv = (PFNGLUNIFORMSUBROUTINESUIVPROC)Proto3dGlGetProcAddress("glUniformSubroutinesuiv");
  _glGetUniformSubroutineuiv = (PFNGLGETUNIFORMSUBROUTINEUIVPROC)Proto3dGlGetProcAddress("glGetUniformSubroutineuiv");
  _glGetProgramStageiv = (PFNGLGETPROGRAMSTAGEIVPROC)Proto3dGlGetProcAddress("glGetProgramStageiv");
  _glPatchParameteri = (PFNGLPATCHPARAMETERIPROC)Proto3dGlGetProcAddress("glPatchParameteri");
  _glPatchParameterfv = (PFNGLPATCHPARAMETERFVPROC)Proto3dGlGetProcAddress("glPatchParameterfv");
  _glBindTransformFeedback = (PFNGLBINDTRANSFORMFEEDBACKPROC)Proto3dGlGetProcAddress("glBindTransformFeedback");
  _glDeleteTransformFeedbacks = (PFNGLDELETETRANSFORMFEEDBACKSPROC)Proto3dGlGetProcAddress("glDeleteTransformFeedbacks");
  _glGenTransformFeedbacks = (PFNGLGENTRANSFORMFEEDBACKSPROC)Proto3dGlGetProcAddress("glGenTransformFeedbacks");
  _glIsTransformFeedback = (PFNGLISTRANSFORMFEEDBACKPROC)Proto3dGlGetProcAddress("glIsTransformFeedback");
  _glPauseTransformFeedback = (PFNGLPAUSETRANSFORMFEEDBACKPROC)Proto3dGlGetProcAddress("glPauseTransformFeedback");
  _glResumeTransformFeedback = (PFNGLRESUMETRANSFORMFEEDBACKPROC)Proto3dGlGetProcAddress("glResumeTransformFeedback");
  _glDrawTransformFeedback = (PFNGLDRAWTRANSFORMFEEDBACKPROC)Proto3dGlGetProcAddress("glDrawTransformFeedback");
  _glDrawTransformFeedbackStream = (PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC)Proto3dGlGetProcAddress("glDrawTransformFeedbackStream");
  _glBeginQueryIndexed = (PFNGLBEGINQUERYINDEXEDPROC)Proto3dGlGetProcAddress("glBeginQueryIndexed");
  _glEndQueryIndexed = (PFNGLENDQUERYINDEXEDPROC)Proto3dGlGetProcAddress("glEndQueryIndexed");
  _glGetQueryIndexediv = (PFNGLGETQUERYINDEXEDIVPROC)Proto3dGlGetProcAddress("glGetQueryIndexediv");
  _glReleaseShaderCompiler = (PFNGLRELEASESHADERCOMPILERPROC)Proto3dGlGetProcAddress("glReleaseShaderCompiler");
  _glShaderBinary = (PFNGLSHADERBINARYPROC)Proto3dGlGetProcAddress("glShaderBinary");
  _glGetShaderPrecisionFormat = (PFNGLGETSHADERPRECISIONFORMATPROC)Proto3dGlGetProcAddress("glGetShaderPrecisionFormat");
  _glDepthRangef = (PFNGLDEPTHRANGEFPROC)Proto3dGlGetProcAddress("glDepthRangef");
  _glClearDepthf = (PFNGLCLEARDEPTHFPROC)Proto3dGlGetProcAddress("glClearDepthf");
  _glGetProgramBinary = (PFNGLGETPROGRAMBINARYPROC)Proto3dGlGetProcAddress("glGetProgramBinary");
  _glProgramBinary = (PFNGLPROGRAMBINARYPROC)Proto3dGlGetProcAddress("glProgramBinary");
  _glProgramParameteri = (PFNGLPROGRAMPARAMETERIPROC)Proto3dGlGetProcAddress("glProgramParameteri");
  _glUseProgramStages = (PFNGLUSEPROGRAMSTAGESPROC)Proto3dGlGetProcAddress("glUseProgramStages");
  _glActiveShaderProgram = (PFNGLACTIVESHADERPROGRAMPROC)Proto3dGlGetProcAddress("glActiveShaderProgram");
  _glCreateShaderProgramv = (PFNGLCREATESHADERPROGRAMVPROC)Proto3dGlGetProcAddress("glCreateShaderProgramv");
  _glBindProgramPipeline = (PFNGLBINDPROGRAMPIPELINEPROC)Proto3dGlGetProcAddress("glBindProgramPipeline");
  _glDeleteProgramPipelines = (PFNGLDELETEPROGRAMPIPELINESPROC)Proto3dGlGetProcAddress("glDeleteProgramPipelines");
  _glGenProgramPipelines = (PFNGLGENPROGRAMPIPELINESPROC)Proto3dGlGetProcAddress("glGenProgramPipelines");
  _glIsProgramPipeline = (PFNGLISPROGRAMPIPELINEPROC)Proto3dGlGetProcAddress("glIsProgramPipeline");
  _glGetProgramPipelineiv = (PFNGLGETPROGRAMPIPELINEIVPROC)Proto3dGlGetProcAddress("glGetProgramPipelineiv");
  _glProgramUniform1i = (PFNGLPROGRAMUNIFORM1IPROC)Proto3dGlGetProcAddress("glProgramUniform1i");
  _glProgramUniform1iv = (PFNGLPROGRAMUNIFORM1IVPROC)Proto3dGlGetProcAddress("glProgramUniform1iv");
  _glProgramUniform1f = (PFNGLPROGRAMUNIFORM1FPROC)Proto3dGlGetProcAddress("glProgramUniform1f");
  _glProgramUniform1fv = (PFNGLPROGRAMUNIFORM1FVPROC)Proto3dGlGetProcAddress("glProgramUniform1fv");
  _glProgramUniform1d = (PFNGLPROGRAMUNIFORM1DPROC)Proto3dGlGetProcAddress("glProgramUniform1d");
  _glProgramUniform1dv = (PFNGLPROGRAMUNIFORM1DVPROC)Proto3dGlGetProcAddress("glProgramUniform1dv");
  _glProgramUniform1ui = (PFNGLPROGRAMUNIFORM1UIPROC)Proto3dGlGetProcAddress("glProgramUniform1ui");
  _glProgramUniform1uiv = (PFNGLPROGRAMUNIFORM1UIVPROC)Proto3dGlGetProcAddress("glProgramUniform1uiv");
  _glProgramUniform2i = (PFNGLPROGRAMUNIFORM2IPROC)Proto3dGlGetProcAddress("glProgramUniform2i");
  _glProgramUniform2iv = (PFNGLPROGRAMUNIFORM2IVPROC)Proto3dGlGetProcAddress("glProgramUniform2iv");
  _glProgramUniform2f = (PFNGLPROGRAMUNIFORM2FPROC)Proto3dGlGetProcAddress("glProgramUniform2f");
  _glProgramUniform2fv = (PFNGLPROGRAMUNIFORM2FVPROC)Proto3dGlGetProcAddress("glProgramUniform2fv");
  _glProgramUniform2d = (PFNGLPROGRAMUNIFORM2DPROC)Proto3dGlGetProcAddress("glProgramUniform2d");
  _glProgramUniform2dv = (PFNGLPROGRAMUNIFORM2DVPROC)Proto3dGlGetProcAddress("glProgramUniform2dv");
  _glProgramUniform2ui = (PFNGLPROGRAMUNIFORM2UIPROC)Proto3dGlGetProcAddress("glProgramUniform2ui");
  _glProgramUniform2uiv = (PFNGLPROGRAMUNIFORM2UIVPROC)Proto3dGlGetProcAddress("glProgramUniform2uiv");
  _glProgramUniform3i = (PFNGLPROGRAMUNIFORM3IPROC)Proto3dGlGetProcAddress("glProgramUniform3i");
  _glProgramUniform3iv = (PFNGLPROGRAMUNIFORM3IVPROC)Proto3dGlGetProcAddress("glProgramUniform3iv");
  _glProgramUniform3f = (PFNGLPROGRAMUNIFORM3FPROC)Proto3dGlGetProcAddress("glProgramUniform3f");
  _glProgramUniform3fv = (PFNGLPROGRAMUNIFORM3FVPROC)Proto3dGlGetProcAddress("glProgramUniform3fv");
  _glProgramUniform3d = (PFNGLPROGRAMUNIFORM3DPROC)Proto3dGlGetProcAddress("glProgramUniform3d");
  _glProgramUniform3dv = (PFNGLPROGRAMUNIFORM3DVPROC)Proto3dGlGetProcAddress("glProgramUniform3dv");
  _glProgramUniform3ui = (PFNGLPROGRAMUNIFORM3UIPROC)Proto3dGlGetProcAddress("glProgramUniform3ui");
  _glProgramUniform3uiv = (PFNGLPROGRAMUNIFORM3UIVPROC)Proto3dGlGetProcAddress("glProgramUniform3uiv");
  _glProgramUniform4i = (PFNGLPROGRAMUNIFORM4IPROC)Proto3dGlGetProcAddress("glProgramUniform4i");
  _glProgramUniform4iv = (PFNGLPROGRAMUNIFORM4IVPROC)Proto3dGlGetProcAddress("glProgramUniform4iv");
  _glProgramUniform4f = (PFNGLPROGRAMUNIFORM4FPROC)Proto3dGlGetProcAddress("glProgramUniform4f");
  _glProgramUniform4fv = (PFNGLPROGRAMUNIFORM4FVPROC)Proto3dGlGetProcAddress("glProgramUniform4fv");
  _glProgramUniform4d = (PFNGLPROGRAMUNIFORM4DPROC)Proto3dGlGetProcAddress("glProgramUniform4d");
  _glProgramUniform4dv = (PFNGLPROGRAMUNIFORM4DVPROC)Proto3dGlGetProcAddress("glProgramUniform4dv");
  _glProgramUniform4ui = (PFNGLPROGRAMUNIFORM4UIPROC)Proto3dGlGetProcAddress("glProgramUniform4ui");
  _glProgramUniform4uiv = (PFNGLPROGRAMUNIFORM4UIVPROC)Proto3dGlGetProcAddress("glProgramUniform4uiv");
  _glProgramUniformMatrix2fv = (PFNGLPROGRAMUNIFORMMATRIX2FVPROC)Proto3dGlGetProcAddress("glProgramUniformMatrix2fv");
  _glProgramUniformMatrix3fv = (PFNGLPROGRAMUNIFORMMATRIX3FVPROC)Proto3dGlGetProcAddress("glProgramUniformMatrix3fv");
  _glProgramUniformMatrix4fv = (PFNGLPROGRAMUNIFORMMATRIX4FVPROC)Proto3dGlGetProcAddress("glProgramUniformMatrix4fv");
  _glProgramUniformMatrix2dv = (PFNGLPROGRAMUNIFORMMATRIX2DVPROC)Proto3dGlGetProcAddress("glProgramUniformMatrix2dv");
  _glProgramUniformMatrix3dv = (PFNGLPROGRAMUNIFORMMATRIX3DVPROC)Proto3dGlGetProcAddress("glProgramUniformMatrix3dv");
  _glProgramUniformMatrix4dv = (PFNGLPROGRAMUNIFORMMATRIX4DVPROC)Proto3dGlGetProcAddress("glProgramUniformMatrix4dv");
  _glProgramUniformMatrix2x3fv = (PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC)Proto3dGlGetProcAddress("glProgramUniformMatrix2x3fv");
  _glProgramUniformMatrix3x2fv = (PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC)Proto3dGlGetProcAddress("glProgramUniformMatrix3x2fv");
  _glProgramUniformMatrix2x4fv = (PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC)Proto3dGlGetProcAddress("glProgramUniformMatrix2x4fv");
  _glProgramUniformMatrix4x2fv = (PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC)Proto3dGlGetProcAddress("glProgramUniformMatrix4x2fv");
  _glProgramUniformMatrix3x4fv = (PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC)Proto3dGlGetProcAddress("glProgramUniformMatrix3x4fv");
  _glProgramUniformMatrix4x3fv = (PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC)Proto3dGlGetProcAddress("glProgramUniformMatrix4x3fv");
  _glProgramUniformMatrix2x3dv = (PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC)Proto3dGlGetProcAddress("glProgramUniformMatrix2x3dv");
  _glProgramUniformMatrix3x2dv = (PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC)Proto3dGlGetProcAddress("glProgramUniformMatrix3x2dv");
  _glProgramUniformMatrix2x4dv = (PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC)Proto3dGlGetProcAddress("glProgramUniformMatrix2x4dv");
  _glProgramUniformMatrix4x2dv = (PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC)Proto3dGlGetProcAddress("glProgramUniformMatrix4x2dv");
  _glProgramUniformMatrix3x4dv = (PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC)Proto3dGlGetProcAddress("glProgramUniformMatrix3x4dv");
  _glProgramUniformMatrix4x3dv = (PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC)Proto3dGlGetProcAddress("glProgramUniformMatrix4x3dv");
  _glValidateProgramPipeline = (PFNGLVALIDATEPROGRAMPIPELINEPROC)Proto3dGlGetProcAddress("glValidateProgramPipeline");
  _glGetProgramPipelineInfoLog = (PFNGLGETPROGRAMPIPELINEINFOLOGPROC)Proto3dGlGetProcAddress("glGetProgramPipelineInfoLog");
  _glVertexAttribL1d = (PFNGLVERTEXATTRIBL1DPROC)Proto3dGlGetProcAddress("glVertexAttribL1d");
  _glVertexAttribL2d = (PFNGLVERTEXATTRIBL2DPROC)Proto3dGlGetProcAddress("glVertexAttribL2d");
  _glVertexAttribL3d = (PFNGLVERTEXATTRIBL3DPROC)Proto3dGlGetProcAddress("glVertexAttribL3d");
  _glVertexAttribL4d = (PFNGLVERTEXATTRIBL4DPROC)Proto3dGlGetProcAddress("glVertexAttribL4d");
  _glVertexAttribL1dv = (PFNGLVERTEXATTRIBL1DVPROC)Proto3dGlGetProcAddress("glVertexAttribL1dv");
  _glVertexAttribL2dv = (PFNGLVERTEXATTRIBL2DVPROC)Proto3dGlGetProcAddress("glVertexAttribL2dv");
  _glVertexAttribL3dv = (PFNGLVERTEXATTRIBL3DVPROC)Proto3dGlGetProcAddress("glVertexAttribL3dv");
  _glVertexAttribL4dv = (PFNGLVERTEXATTRIBL4DVPROC)Proto3dGlGetProcAddress("glVertexAttribL4dv");
  _glVertexAttribLPointer = (PFNGLVERTEXATTRIBLPOINTERPROC)Proto3dGlGetProcAddress("glVertexAttribLPointer");
  _glGetVertexAttribLdv = (PFNGLGETVERTEXATTRIBLDVPROC)Proto3dGlGetProcAddress("glGetVertexAttribLdv");
  _glViewportArrayv = (PFNGLVIEWPORTARRAYVPROC)Proto3dGlGetProcAddress("glViewportArrayv");
  _glViewportIndexedf = (PFNGLVIEWPORTINDEXEDFPROC)Proto3dGlGetProcAddress("glViewportIndexedf");
  _glViewportIndexedfv = (PFNGLVIEWPORTINDEXEDFVPROC)Proto3dGlGetProcAddress("glViewportIndexedfv");
  _glScissorArrayv = (PFNGLSCISSORARRAYVPROC)Proto3dGlGetProcAddress("glScissorArrayv");
  _glScissorIndexed = (PFNGLSCISSORINDEXEDPROC)Proto3dGlGetProcAddress("glScissorIndexed");
  _glScissorIndexedv = (PFNGLSCISSORINDEXEDVPROC)Proto3dGlGetProcAddress("glScissorIndexedv");
  _glDepthRangeArrayv = (PFNGLDEPTHRANGEARRAYVPROC)Proto3dGlGetProcAddress("glDepthRangeArrayv");
  _glDepthRangeIndexed = (PFNGLDEPTHRANGEINDEXEDPROC)Proto3dGlGetProcAddress("glDepthRangeIndexed");
  _glGetFloati_v = (PFNGLGETFLOATI_VPROC)Proto3dGlGetProcAddress("glGetFloati_v");
  _glGetDoublei_v = (PFNGLGETDOUBLEI_VPROC)Proto3dGlGetProcAddress("glGetDoublei_v");
  _glDrawArraysInstancedBaseInstance = (PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC)Proto3dGlGetProcAddress("glDrawArraysInstancedBaseInstance");
  _glDrawElementsInstancedBaseInstance = (PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC)Proto3dGlGetProcAddress("glDrawElementsInstancedBaseInstance");
  _glDrawElementsInstancedBaseVertexBaseInstance = (PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC)Proto3dGlGetProcAddress("glDrawElementsInstancedBaseVertexBaseInstance");
  _glGetInternalformativ = (PFNGLGETINTERNALFORMATIVPROC)Proto3dGlGetProcAddress("glGetInternalformativ");
  _glGetActiveAtomicCounterBufferiv = (PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC)Proto3dGlGetProcAddress("glGetActiveAtomicCounterBufferiv");
  _glBindImageTexture = (PFNGLBINDIMAGETEXTUREPROC)Proto3dGlGetProcAddress("glBindImageTexture");
  _glMemoryBarrier = (PFNGLMEMORYBARRIERPROC)Proto3dGlGetProcAddress("glMemoryBarrier");
  _glTexStorage1D = (PFNGLTEXSTORAGE1DPROC)Proto3dGlGetProcAddress("glTexStorage1D");
  _glTexStorage2D = (PFNGLTEXSTORAGE2DPROC)Proto3dGlGetProcAddress("glTexStorage2D");
  _glTexStorage3D = (PFNGLTEXSTORAGE3DPROC)Proto3dGlGetProcAddress("glTexStorage3D");
  _glDrawTransformFeedbackInstanced = (PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC)Proto3dGlGetProcAddress("glDrawTransformFeedbackInstanced");
  _glDrawTransformFeedbackStreamInstanced = (PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC)Proto3dGlGetProcAddress("glDrawTransformFeedbackStreamInstanced");
  _glClearBufferData = (PFNGLCLEARBUFFERDATAPROC)Proto3dGlGetProcAddress("glClearBufferData");
  _glClearBufferSubData = (PFNGLCLEARBUFFERSUBDATAPROC)Proto3dGlGetProcAddress("glClearBufferSubData");
  _glDispatchCompute = (PFNGLDISPATCHCOMPUTEPROC)Proto3dGlGetProcAddress("glDispatchCompute");
  _glDispatchComputeIndirect = (PFNGLDISPATCHCOMPUTEINDIRECTPROC)Proto3dGlGetProcAddress("glDispatchComputeIndirect");
  _glCopyImageSubData = (PFNGLCOPYIMAGESUBDATAPROC)Proto3dGlGetProcAddress("glCopyImageSubData");
  _glFramebufferParameteri = (PFNGLFRAMEBUFFERPARAMETERIPROC)Proto3dGlGetProcAddress("glFramebufferParameteri");
  _glGetFramebufferParameteriv = (PFNGLGETFRAMEBUFFERPARAMETERIVPROC)Proto3dGlGetProcAddress("glGetFramebufferParameteriv");
  _glGetInternalformati64v = (PFNGLGETINTERNALFORMATI64VPROC)Proto3dGlGetProcAddress("glGetInternalformati64v");
  _glInvalidateTexSubImage = (PFNGLINVALIDATETEXSUBIMAGEPROC)Proto3dGlGetProcAddress("glInvalidateTexSubImage");
  _glInvalidateTexImage = (PFNGLINVALIDATETEXIMAGEPROC)Proto3dGlGetProcAddress("glInvalidateTexImage");
  _glInvalidateBufferSubData = (PFNGLINVALIDATEBUFFERSUBDATAPROC)Proto3dGlGetProcAddress("glInvalidateBufferSubData");
  _glInvalidateBufferData = (PFNGLINVALIDATEBUFFERDATAPROC)Proto3dGlGetProcAddress("glInvalidateBufferData");
  _glInvalidateFramebuffer = (PFNGLINVALIDATEFRAMEBUFFERPROC)Proto3dGlGetProcAddress("glInvalidateFramebuffer");
  _glInvalidateSubFramebuffer = (PFNGLINVALIDATESUBFRAMEBUFFERPROC)Proto3dGlGetProcAddress("glInvalidateSubFramebuffer");
  _glMultiDrawArraysIndirect = (PFNGLMULTIDRAWARRAYSINDIRECTPROC)Proto3dGlGetProcAddress("glMultiDrawArraysIndirect");
  _glMultiDrawElementsIndirect = (PFNGLMULTIDRAWELEMENTSINDIRECTPROC)Proto3dGlGetProcAddress("glMultiDrawElementsIndirect");
  _glGetProgramInterfaceiv = (PFNGLGETPROGRAMINTERFACEIVPROC)Proto3dGlGetProcAddress("glGetProgramInterfaceiv");
  _glGetProgramResourceIndex = (PFNGLGETPROGRAMRESOURCEINDEXPROC)Proto3dGlGetProcAddress("glGetProgramResourceIndex");
  _glGetProgramResourceName = (PFNGLGETPROGRAMRESOURCENAMEPROC)Proto3dGlGetProcAddress("glGetProgramResourceName");
  _glGetProgramResourceiv = (PFNGLGETPROGRAMRESOURCEIVPROC)Proto3dGlGetProcAddress("glGetProgramResourceiv");
  _glGetProgramResourceLocation = (PFNGLGETPROGRAMRESOURCELOCATIONPROC)Proto3dGlGetProcAddress("glGetProgramResourceLocation");
  _glGetProgramResourceLocationIndex = (PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC)Proto3dGlGetProcAddress("glGetProgramResourceLocationIndex");
  _glShaderStorageBlockBinding = (PFNGLSHADERSTORAGEBLOCKBINDINGPROC)Proto3dGlGetProcAddress("glShaderStorageBlockBinding");
  _glTexBufferRange = (PFNGLTEXBUFFERRANGEPROC)Proto3dGlGetProcAddress("glTexBufferRange");
  _glTexStorage2DMultisample = (PFNGLTEXSTORAGE2DMULTISAMPLEPROC)Proto3dGlGetProcAddress("glTexStorage2DMultisample");
  _glTexStorage3DMultisample = (PFNGLTEXSTORAGE3DMULTISAMPLEPROC)Proto3dGlGetProcAddress("glTexStorage3DMultisample");
  _glTextureView = (PFNGLTEXTUREVIEWPROC)Proto3dGlGetProcAddress("glTextureView");
  _glBindVertexBuffer = (PFNGLBINDVERTEXBUFFERPROC)Proto3dGlGetProcAddress("glBindVertexBuffer");
  _glVertexAttribFormat = (PFNGLVERTEXATTRIBFORMATPROC)Proto3dGlGetProcAddress("glVertexAttribFormat");
  _glVertexAttribIFormat = (PFNGLVERTEXATTRIBIFORMATPROC)Proto3dGlGetProcAddress("glVertexAttribIFormat");
  _glVertexAttribLFormat = (PFNGLVERTEXATTRIBLFORMATPROC)Proto3dGlGetProcAddress("glVertexAttribLFormat");
  _glVertexAttribBinding = (PFNGLVERTEXATTRIBBINDINGPROC)Proto3dGlGetProcAddress("glVertexAttribBinding");
  _glVertexBindingDivisor = (PFNGLVERTEXBINDINGDIVISORPROC)Proto3dGlGetProcAddress("glVertexBindingDivisor");
  _glDebugMessageControl = (PFNGLDEBUGMESSAGECONTROLPROC)Proto3dGlGetProcAddress("glDebugMessageControl");
  _glDebugMessageInsert = (PFNGLDEBUGMESSAGEINSERTPROC)Proto3dGlGetProcAddress("glDebugMessageInsert");
  _glDebugMessageCallback = (PFNGLDEBUGMESSAGECALLBACKPROC)Proto3dGlGetProcAddress("glDebugMessageCallback");
  _glGetDebugMessageLog = (PFNGLGETDEBUGMESSAGELOGPROC)Proto3dGlGetProcAddress("glGetDebugMessageLog");
  _glPushDebugGroup = (PFNGLPUSHDEBUGGROUPPROC)Proto3dGlGetProcAddress("glPushDebugGroup");
  _glPopDebugGroup = (PFNGLPOPDEBUGGROUPPROC)Proto3dGlGetProcAddress("glPopDebugGroup");
  _glObjectLabel = (PFNGLOBJECTLABELPROC)Proto3dGlGetProcAddress("glObjectLabel");
  _glGetObjectLabel = (PFNGLGETOBJECTLABELPROC)Proto3dGlGetProcAddress("glGetObjectLabel");
  _glObjectPtrLabel = (PFNGLOBJECTPTRLABELPROC)Proto3dGlGetProcAddress("glObjectPtrLabel");
  _glGetObjectPtrLabel = (PFNGLGETOBJECTPTRLABELPROC)Proto3dGlGetProcAddress("glGetObjectPtrLabel");
  _glBufferStorage = (PFNGLBUFFERSTORAGEPROC)Proto3dGlGetProcAddress("glBufferStorage");
  _glClearTexImage = (PFNGLCLEARTEXIMAGEPROC)Proto3dGlGetProcAddress("glClearTexImage");
  _glClearTexSubImage = (PFNGLCLEARTEXSUBIMAGEPROC)Proto3dGlGetProcAddress("glClearTexSubImage");
  _glBindBuffersBase = (PFNGLBINDBUFFERSBASEPROC)Proto3dGlGetProcAddress("glBindBuffersBase");
  _glBindBuffersRange = (PFNGLBINDBUFFERSRANGEPROC)Proto3dGlGetProcAddress("glBindBuffersRange");
  _glBindTextures = (PFNGLBINDTEXTURESPROC)Proto3dGlGetProcAddress("glBindTextures");
  _glBindSamplers = (PFNGLBINDSAMPLERSPROC)Proto3dGlGetProcAddress("glBindSamplers");
  _glBindImageTextures = (PFNGLBINDIMAGETEXTURESPROC)Proto3dGlGetProcAddress("glBindImageTextures");
  _glBindVertexBuffers = (PFNGLBINDVERTEXBUFFERSPROC)Proto3dGlGetProcAddress("glBindVertexBuffers");
  _glClipControl = (PFNGLCLIPCONTROLPROC)Proto3dGlGetProcAddress("glClipControl");
  _glCreateTransformFeedbacks = (PFNGLCREATETRANSFORMFEEDBACKSPROC)Proto3dGlGetProcAddress("glCreateTransformFeedbacks");
  _glTransformFeedbackBufferBase = (PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC)Proto3dGlGetProcAddress("glTransformFeedbackBufferBase");
  _glTransformFeedbackBufferRange = (PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC)Proto3dGlGetProcAddress("glTransformFeedbackBufferRange");
  _glGetTransformFeedbackiv = (PFNGLGETTRANSFORMFEEDBACKIVPROC)Proto3dGlGetProcAddress("glGetTransformFeedbackiv");
  _glGetTransformFeedbacki_v = (PFNGLGETTRANSFORMFEEDBACKI_VPROC)Proto3dGlGetProcAddress("glGetTransformFeedbacki_v");
  _glGetTransformFeedbacki64_v = (PFNGLGETTRANSFORMFEEDBACKI64_VPROC)Proto3dGlGetProcAddress("glGetTransformFeedbacki64_v");
  _glCreateBuffers = (PFNGLCREATEBUFFERSPROC)Proto3dGlGetProcAddress("glCreateBuffers");
  _glNamedBufferStorage = (PFNGLNAMEDBUFFERSTORAGEPROC)Proto3dGlGetProcAddress("glNamedBufferStorage");
  _glNamedBufferData = (PFNGLNAMEDBUFFERDATAPROC)Proto3dGlGetProcAddress("glNamedBufferData");
  _glNamedBufferSubData = (PFNGLNAMEDBUFFERSUBDATAPROC)Proto3dGlGetProcAddress("glNamedBufferSubData");
  _glCopyNamedBufferSubData = (PFNGLCOPYNAMEDBUFFERSUBDATAPROC)Proto3dGlGetProcAddress("glCopyNamedBufferSubData");
  _glClearNamedBufferData = (PFNGLCLEARNAMEDBUFFERDATAPROC)Proto3dGlGetProcAddress("glClearNamedBufferData");
  _glClearNamedBufferSubData = (PFNGLCLEARNAMEDBUFFERSUBDATAPROC)Proto3dGlGetProcAddress("glClearNamedBufferSubData");
  _glMapNamedBuffer = (PFNGLMAPNAMEDBUFFERPROC)Proto3dGlGetProcAddress("glMapNamedBuffer");
  _glMapNamedBufferRange = (PFNGLMAPNAMEDBUFFERRANGEPROC)Proto3dGlGetProcAddress("glMapNamedBufferRange");
  _glUnmapNamedBuffer = (PFNGLUNMAPNAMEDBUFFERPROC)Proto3dGlGetProcAddress("glUnmapNamedBuffer");
  _glFlushMappedNamedBufferRange = (PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC)Proto3dGlGetProcAddress("glFlushMappedNamedBufferRange");
  _glGetNamedBufferParameteriv = (PFNGLGETNAMEDBUFFERPARAMETERIVPROC)Proto3dGlGetProcAddress("glGetNamedBufferParameteriv");
  _glGetNamedBufferParameteri64v = (PFNGLGETNAMEDBUFFERPARAMETERI64VPROC)Proto3dGlGetProcAddress("glGetNamedBufferParameteri64v");
  _glGetNamedBufferPointerv = (PFNGLGETNAMEDBUFFERPOINTERVPROC)Proto3dGlGetProcAddress("glGetNamedBufferPointerv");
  _glGetNamedBufferSubData = (PFNGLGETNAMEDBUFFERSUBDATAPROC)Proto3dGlGetProcAddress("glGetNamedBufferSubData");
  _glCreateFramebuffers = (PFNGLCREATEFRAMEBUFFERSPROC)Proto3dGlGetProcAddress("glCreateFramebuffers");
  _glNamedFramebufferRenderbuffer = (PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC)Proto3dGlGetProcAddress("glNamedFramebufferRenderbuffer");
  _glNamedFramebufferParameteri = (PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC)Proto3dGlGetProcAddress("glNamedFramebufferParameteri");
  _glNamedFramebufferTexture = (PFNGLNAMEDFRAMEBUFFERTEXTUREPROC)Proto3dGlGetProcAddress("glNamedFramebufferTexture");
  _glNamedFramebufferTextureLayer = (PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC)Proto3dGlGetProcAddress("glNamedFramebufferTextureLayer");
  _glNamedFramebufferDrawBuffer = (PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC)Proto3dGlGetProcAddress("glNamedFramebufferDrawBuffer");
  _glNamedFramebufferDrawBuffers = (PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC)Proto3dGlGetProcAddress("glNamedFramebufferDrawBuffers");
  _glNamedFramebufferReadBuffer = (PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC)Proto3dGlGetProcAddress("glNamedFramebufferReadBuffer");
  _glInvalidateNamedFramebufferData = (PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC)Proto3dGlGetProcAddress("glInvalidateNamedFramebufferData");
  _glInvalidateNamedFramebufferSubData = (PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC)Proto3dGlGetProcAddress("glInvalidateNamedFramebufferSubData");
  _glClearNamedFramebufferiv = (PFNGLCLEARNAMEDFRAMEBUFFERIVPROC)Proto3dGlGetProcAddress("glClearNamedFramebufferiv");
  _glClearNamedFramebufferuiv = (PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC)Proto3dGlGetProcAddress("glClearNamedFramebufferuiv");
  _glClearNamedFramebufferfv = (PFNGLCLEARNAMEDFRAMEBUFFERFVPROC)Proto3dGlGetProcAddress("glClearNamedFramebufferfv");
  _glClearNamedFramebufferfi = (PFNGLCLEARNAMEDFRAMEBUFFERFIPROC)Proto3dGlGetProcAddress("glClearNamedFramebufferfi");
  _glBlitNamedFramebuffer = (PFNGLBLITNAMEDFRAMEBUFFERPROC)Proto3dGlGetProcAddress("glBlitNamedFramebuffer");
  _glCheckNamedFramebufferStatus = (PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC)Proto3dGlGetProcAddress("glCheckNamedFramebufferStatus");
  _glGetNamedFramebufferParameteriv = (PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC)Proto3dGlGetProcAddress("glGetNamedFramebufferParameteriv");
  _glGetNamedFramebufferAttachmentParameteriv = (PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC)Proto3dGlGetProcAddress("glGetNamedFramebufferAttachmentParameteriv");
  _glCreateRenderbuffers = (PFNGLCREATERENDERBUFFERSPROC)Proto3dGlGetProcAddress("glCreateRenderbuffers");
  _glNamedRenderbufferStorage = (PFNGLNAMEDRENDERBUFFERSTORAGEPROC)Proto3dGlGetProcAddress("glNamedRenderbufferStorage");
  _glNamedRenderbufferStorageMultisample = (PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC)Proto3dGlGetProcAddress("glNamedRenderbufferStorageMultisample");
  _glGetNamedRenderbufferParameteriv = (PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC)Proto3dGlGetProcAddress("glGetNamedRenderbufferParameteriv");
  _glCreateTextures = (PFNGLCREATETEXTURESPROC)Proto3dGlGetProcAddress("glCreateTextures");
  _glTextureBuffer = (PFNGLTEXTUREBUFFERPROC)Proto3dGlGetProcAddress("glTextureBuffer");
  _glTextureBufferRange = (PFNGLTEXTUREBUFFERRANGEPROC)Proto3dGlGetProcAddress("glTextureBufferRange");
  _glTextureStorage1D = (PFNGLTEXTURESTORAGE1DPROC)Proto3dGlGetProcAddress("glTextureStorage1D");
  _glTextureStorage2D = (PFNGLTEXTURESTORAGE2DPROC)Proto3dGlGetProcAddress("glTextureStorage2D");
  _glTextureStorage3D = (PFNGLTEXTURESTORAGE3DPROC)Proto3dGlGetProcAddress("glTextureStorage3D");
  _glTextureStorage2DMultisample = (PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC)Proto3dGlGetProcAddress("glTextureStorage2DMultisample");
  _glTextureStorage3DMultisample = (PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC)Proto3dGlGetProcAddress("glTextureStorage3DMultisample");
  _glTextureSubImage1D = (PFNGLTEXTURESUBIMAGE1DPROC)Proto3dGlGetProcAddress("glTextureSubImage1D");
  _glTextureSubImage2D = (PFNGLTEXTURESUBIMAGE2DPROC)Proto3dGlGetProcAddress("glTextureSubImage2D");
  _glTextureSubImage3D = (PFNGLTEXTURESUBIMAGE3DPROC)Proto3dGlGetProcAddress("glTextureSubImage3D");
  _glCompressedTextureSubImage1D = (PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC)Proto3dGlGetProcAddress("glCompressedTextureSubImage1D");
  _glCompressedTextureSubImage2D = (PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC)Proto3dGlGetProcAddress("glCompressedTextureSubImage2D");
  _glCompressedTextureSubImage3D = (PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC)Proto3dGlGetProcAddress("glCompressedTextureSubImage3D");
  _glCopyTextureSubImage1D = (PFNGLCOPYTEXTURESUBIMAGE1DPROC)Proto3dGlGetProcAddress("glCopyTextureSubImage1D");
  _glCopyTextureSubImage2D = (PFNGLCOPYTEXTURESUBIMAGE2DPROC)Proto3dGlGetProcAddress("glCopyTextureSubImage2D");
  _glCopyTextureSubImage3D = (PFNGLCOPYTEXTURESUBIMAGE3DPROC)Proto3dGlGetProcAddress("glCopyTextureSubImage3D");
  _glTextureParameterf = (PFNGLTEXTUREPARAMETERFPROC)Proto3dGlGetProcAddress("glTextureParameterf");
  _glTextureParameterfv = (PFNGLTEXTUREPARAMETERFVPROC)Proto3dGlGetProcAddress("glTextureParameterfv");
  _glTextureParameteri = (PFNGLTEXTUREPARAMETERIPROC)Proto3dGlGetProcAddress("glTextureParameteri");
  _glTextureParameterIiv = (PFNGLTEXTUREPARAMETERIIVPROC)Proto3dGlGetProcAddress("glTextureParameterIiv");
  _glTextureParameterIuiv = (PFNGLTEXTUREPARAMETERIUIVPROC)Proto3dGlGetProcAddress("glTextureParameterIuiv");
  _glTextureParameteriv = (PFNGLTEXTUREPARAMETERIVPROC)Proto3dGlGetProcAddress("glTextureParameteriv");
  _glGenerateTextureMipmap = (PFNGLGENERATETEXTUREMIPMAPPROC)Proto3dGlGetProcAddress("glGenerateTextureMipmap");
  _glBindTextureUnit = (PFNGLBINDTEXTUREUNITPROC)Proto3dGlGetProcAddress("glBindTextureUnit");
  _glGetTextureImage = (PFNGLGETTEXTUREIMAGEPROC)Proto3dGlGetProcAddress("glGetTextureImage");
  _glGetCompressedTextureImage = (PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC)Proto3dGlGetProcAddress("glGetCompressedTextureImage");
  _glGetTextureLevelParameterfv = (PFNGLGETTEXTURELEVELPARAMETERFVPROC)Proto3dGlGetProcAddress("glGetTextureLevelParameterfv");
  _glGetTextureLevelParameteriv = (PFNGLGETTEXTURELEVELPARAMETERIVPROC)Proto3dGlGetProcAddress("glGetTextureLevelParameteriv");
  _glGetTextureParameterfv = (PFNGLGETTEXTUREPARAMETERFVPROC)Proto3dGlGetProcAddress("glGetTextureParameterfv");
  _glGetTextureParameterIiv = (PFNGLGETTEXTUREPARAMETERIIVPROC)Proto3dGlGetProcAddress("glGetTextureParameterIiv");
  _glGetTextureParameterIuiv = (PFNGLGETTEXTUREPARAMETERIUIVPROC)Proto3dGlGetProcAddress("glGetTextureParameterIuiv");
  _glGetTextureParameteriv = (PFNGLGETTEXTUREPARAMETERIVPROC)Proto3dGlGetProcAddress("glGetTextureParameteriv");
  _glCreateVertexArrays = (PFNGLCREATEVERTEXARRAYSPROC)Proto3dGlGetProcAddress("glCreateVertexArrays");
  _glDisableVertexArrayAttrib = (PFNGLDISABLEVERTEXARRAYATTRIBPROC)Proto3dGlGetProcAddress("glDisableVertexArrayAttrib");
  _glEnableVertexArrayAttrib = (PFNGLENABLEVERTEXARRAYATTRIBPROC)Proto3dGlGetProcAddress("glEnableVertexArrayAttrib");
  _glVertexArrayElementBuffer = (PFNGLVERTEXARRAYELEMENTBUFFERPROC)Proto3dGlGetProcAddress("glVertexArrayElementBuffer");
  _glVertexArrayVertexBuffer = (PFNGLVERTEXARRAYVERTEXBUFFERPROC)Proto3dGlGetProcAddress("glVertexArrayVertexBuffer");
  _glVertexArrayVertexBuffers = (PFNGLVERTEXARRAYVERTEXBUFFERSPROC)Proto3dGlGetProcAddress("glVertexArrayVertexBuffers");
  _glVertexArrayAttribBinding = (PFNGLVERTEXARRAYATTRIBBINDINGPROC)Proto3dGlGetProcAddress("glVertexArrayAttribBinding");
  _glVertexArrayAttribFormat = (PFNGLVERTEXARRAYATTRIBFORMATPROC)Proto3dGlGetProcAddress("glVertexArrayAttribFormat");
  _glVertexArrayAttribIFormat = (PFNGLVERTEXARRAYATTRIBIFORMATPROC)Proto3dGlGetProcAddress("glVertexArrayAttribIFormat");
  _glVertexArrayAttribLFormat = (PFNGLVERTEXARRAYATTRIBLFORMATPROC)Proto3dGlGetProcAddress("glVertexArrayAttribLFormat");
  _glVertexArrayBindingDivisor = (PFNGLVERTEXARRAYBINDINGDIVISORPROC)Proto3dGlGetProcAddress("glVertexArrayBindingDivisor");
  _glGetVertexArrayiv = (PFNGLGETVERTEXARRAYIVPROC)Proto3dGlGetProcAddress("glGetVertexArrayiv");
  _glGetVertexArrayIndexediv = (PFNGLGETVERTEXARRAYINDEXEDIVPROC)Proto3dGlGetProcAddress("glGetVertexArrayIndexediv");
  _glGetVertexArrayIndexed64iv = (PFNGLGETVERTEXARRAYINDEXED64IVPROC)Proto3dGlGetProcAddress("glGetVertexArrayIndexed64iv");
  _glCreateSamplers = (PFNGLCREATESAMPLERSPROC)Proto3dGlGetProcAddress("glCreateSamplers");
  _glCreateProgramPipelines = (PFNGLCREATEPROGRAMPIPELINESPROC)Proto3dGlGetProcAddress("glCreateProgramPipelines");
  _glCreateQueries = (PFNGLCREATEQUERIESPROC)Proto3dGlGetProcAddress("glCreateQueries");
  _glGetQueryBufferObjecti64v = (PFNGLGETQUERYBUFFEROBJECTI64VPROC)Proto3dGlGetProcAddress("glGetQueryBufferObjecti64v");
  _glGetQueryBufferObjectiv = (PFNGLGETQUERYBUFFEROBJECTIVPROC)Proto3dGlGetProcAddress("glGetQueryBufferObjectiv");
  _glGetQueryBufferObjectui64v = (PFNGLGETQUERYBUFFEROBJECTUI64VPROC)Proto3dGlGetProcAddress("glGetQueryBufferObjectui64v");
  _glGetQueryBufferObjectuiv = (PFNGLGETQUERYBUFFEROBJECTUIVPROC)Proto3dGlGetProcAddress("glGetQueryBufferObjectuiv");
  _glMemoryBarrierByRegion = (PFNGLMEMORYBARRIERBYREGIONPROC)Proto3dGlGetProcAddress("glMemoryBarrierByRegion");
  _glGetTextureSubImage = (PFNGLGETTEXTURESUBIMAGEPROC)Proto3dGlGetProcAddress("glGetTextureSubImage");
  _glGetCompressedTextureSubImage = (PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC)Proto3dGlGetProcAddress("glGetCompressedTextureSubImage");
  _glGetGraphicsResetStatus = (PFNGLGETGRAPHICSRESETSTATUSPROC)Proto3dGlGetProcAddress("glGetGraphicsResetStatus");
  _glGetnCompressedTexImage = (PFNGLGETNCOMPRESSEDTEXIMAGEPROC)Proto3dGlGetProcAddress("glGetnCompressedTexImage");
  _glGetnTexImage = (PFNGLGETNTEXIMAGEPROC)Proto3dGlGetProcAddress("glGetnTexImage");
  _glGetnUniformdv = (PFNGLGETNUNIFORMDVPROC)Proto3dGlGetProcAddress("glGetnUniformdv");
  _glGetnUniformfv = (PFNGLGETNUNIFORMFVPROC)Proto3dGlGetProcAddress("glGetnUniformfv");
  _glGetnUniformiv = (PFNGLGETNUNIFORMIVPROC)Proto3dGlGetProcAddress("glGetnUniformiv");
  _glGetnUniformuiv = (PFNGLGETNUNIFORMUIVPROC)Proto3dGlGetProcAddress("glGetnUniformuiv");
  _glReadnPixels = (PFNGLREADNPIXELSPROC)Proto3dGlGetProcAddress("glReadnPixels");
  _glTextureBarrier = (PFNGLTEXTUREBARRIERPROC)Proto3dGlGetProcAddress("glTextureBarrier");
  _glSpecializeShader = (PFNGLSPECIALIZESHADERPROC)Proto3dGlGetProcAddress("glSpecializeShader");
  _glMultiDrawArraysIndirectCount = (PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC)Proto3dGlGetProcAddress("glMultiDrawArraysIndirectCount");
  _glMultiDrawElementsIndirectCount = (PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC)Proto3dGlGetProcAddress("glMultiDrawElementsIndirectCount");
  _glPolygonOffsetClamp = (PFNGLPOLYGONOFFSETCLAMPPROC)Proto3dGlGetProcAddress("glPolygonOffsetClamp");
  _glPrimitiveBoundingBoxARB = (PFNGLPRIMITIVEBOUNDINGBOXARBPROC)Proto3dGlGetProcAddress("glPrimitiveBoundingBoxARB");
  _glGetTextureHandleARB = (PFNGLGETTEXTUREHANDLEARBPROC)Proto3dGlGetProcAddress("glGetTextureHandleARB");
  _glGetTextureSamplerHandleARB = (PFNGLGETTEXTURESAMPLERHANDLEARBPROC)Proto3dGlGetProcAddress("glGetTextureSamplerHandleARB");
  _glMakeTextureHandleResidentARB = (PFNGLMAKETEXTUREHANDLERESIDENTARBPROC)Proto3dGlGetProcAddress("glMakeTextureHandleResidentARB");
  _glMakeTextureHandleNonResidentARB = (PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC)Proto3dGlGetProcAddress("glMakeTextureHandleNonResidentARB");
  _glGetImageHandleARB = (PFNGLGETIMAGEHANDLEARBPROC)Proto3dGlGetProcAddress("glGetImageHandleARB");
  _glMakeImageHandleResidentARB = (PFNGLMAKEIMAGEHANDLERESIDENTARBPROC)Proto3dGlGetProcAddress("glMakeImageHandleResidentARB");
  _glMakeImageHandleNonResidentARB = (PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC)Proto3dGlGetProcAddress("glMakeImageHandleNonResidentARB");
  _glUniformHandleui64ARB = (PFNGLUNIFORMHANDLEUI64ARBPROC)Proto3dGlGetProcAddress("glUniformHandleui64ARB");
  _glUniformHandleui64vARB = (PFNGLUNIFORMHANDLEUI64VARBPROC)Proto3dGlGetProcAddress("glUniformHandleui64vARB");
  _glProgramUniformHandleui64ARB = (PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC)Proto3dGlGetProcAddress("glProgramUniformHandleui64ARB");
  _glProgramUniformHandleui64vARB = (PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC)Proto3dGlGetProcAddress("glProgramUniformHandleui64vARB");
  _glIsTextureHandleResidentARB = (PFNGLISTEXTUREHANDLERESIDENTARBPROC)Proto3dGlGetProcAddress("glIsTextureHandleResidentARB");
  _glIsImageHandleResidentARB = (PFNGLISIMAGEHANDLERESIDENTARBPROC)Proto3dGlGetProcAddress("glIsImageHandleResidentARB");
  _glVertexAttribL1ui64ARB = (PFNGLVERTEXATTRIBL1UI64ARBPROC)Proto3dGlGetProcAddress("glVertexAttribL1ui64ARB");
  _glVertexAttribL1ui64vARB = (PFNGLVERTEXATTRIBL1UI64VARBPROC)Proto3dGlGetProcAddress("glVertexAttribL1ui64vARB");
  _glGetVertexAttribLui64vARB = (PFNGLGETVERTEXATTRIBLUI64VARBPROC)Proto3dGlGetProcAddress("glGetVertexAttribLui64vARB");
  _glCreateSyncFromCLeventARB = (PFNGLCREATESYNCFROMCLEVENTARBPROC)Proto3dGlGetProcAddress("glCreateSyncFromCLeventARB");
  _glDispatchComputeGroupSizeARB = (PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC)Proto3dGlGetProcAddress("glDispatchComputeGroupSizeARB");
  _glDebugMessageControlARB = (PFNGLDEBUGMESSAGECONTROLARBPROC)Proto3dGlGetProcAddress("glDebugMessageControlARB");
  _glDebugMessageInsertARB = (PFNGLDEBUGMESSAGEINSERTARBPROC)Proto3dGlGetProcAddress("glDebugMessageInsertARB");
  _glDebugMessageCallbackARB = (PFNGLDEBUGMESSAGECALLBACKARBPROC)Proto3dGlGetProcAddress("glDebugMessageCallbackARB");
  _glGetDebugMessageLogARB = (PFNGLGETDEBUGMESSAGELOGARBPROC)Proto3dGlGetProcAddress("glGetDebugMessageLogARB");
  _glBlendEquationiARB = (PFNGLBLENDEQUATIONIARBPROC)Proto3dGlGetProcAddress("glBlendEquationiARB");
  _glBlendEquationSeparateiARB = (PFNGLBLENDEQUATIONSEPARATEIARBPROC)Proto3dGlGetProcAddress("glBlendEquationSeparateiARB");
  _glBlendFunciARB = (PFNGLBLENDFUNCIARBPROC)Proto3dGlGetProcAddress("glBlendFunciARB");
  _glBlendFuncSeparateiARB = (PFNGLBLENDFUNCSEPARATEIARBPROC)Proto3dGlGetProcAddress("glBlendFuncSeparateiARB");
  _glDrawArraysInstancedARB = (PFNGLDRAWARRAYSINSTANCEDARBPROC)Proto3dGlGetProcAddress("glDrawArraysInstancedARB");
  _glDrawElementsInstancedARB = (PFNGLDRAWELEMENTSINSTANCEDARBPROC)Proto3dGlGetProcAddress("glDrawElementsInstancedARB");
  _glProgramParameteriARB = (PFNGLPROGRAMPARAMETERIARBPROC)Proto3dGlGetProcAddress("glProgramParameteriARB");
  _glFramebufferTextureARB = (PFNGLFRAMEBUFFERTEXTUREARBPROC)Proto3dGlGetProcAddress("glFramebufferTextureARB");
  _glFramebufferTextureLayerARB = (PFNGLFRAMEBUFFERTEXTURELAYERARBPROC)Proto3dGlGetProcAddress("glFramebufferTextureLayerARB");
  _glFramebufferTextureFaceARB = (PFNGLFRAMEBUFFERTEXTUREFACEARBPROC)Proto3dGlGetProcAddress("glFramebufferTextureFaceARB");
  _glSpecializeShaderARB = (PFNGLSPECIALIZESHADERARBPROC)Proto3dGlGetProcAddress("glSpecializeShaderARB");
  _glUniform1i64ARB = (PFNGLUNIFORM1I64ARBPROC)Proto3dGlGetProcAddress("glUniform1i64ARB");
  _glUniform2i64ARB = (PFNGLUNIFORM2I64ARBPROC)Proto3dGlGetProcAddress("glUniform2i64ARB");
  _glUniform3i64ARB = (PFNGLUNIFORM3I64ARBPROC)Proto3dGlGetProcAddress("glUniform3i64ARB");
  _glUniform4i64ARB = (PFNGLUNIFORM4I64ARBPROC)Proto3dGlGetProcAddress("glUniform4i64ARB");
  _glUniform1i64vARB = (PFNGLUNIFORM1I64VARBPROC)Proto3dGlGetProcAddress("glUniform1i64vARB");
  _glUniform2i64vARB = (PFNGLUNIFORM2I64VARBPROC)Proto3dGlGetProcAddress("glUniform2i64vARB");
  _glUniform3i64vARB = (PFNGLUNIFORM3I64VARBPROC)Proto3dGlGetProcAddress("glUniform3i64vARB");
  _glUniform4i64vARB = (PFNGLUNIFORM4I64VARBPROC)Proto3dGlGetProcAddress("glUniform4i64vARB");
  _glUniform1ui64ARB = (PFNGLUNIFORM1UI64ARBPROC)Proto3dGlGetProcAddress("glUniform1ui64ARB");
  _glUniform2ui64ARB = (PFNGLUNIFORM2UI64ARBPROC)Proto3dGlGetProcAddress("glUniform2ui64ARB");
  _glUniform3ui64ARB = (PFNGLUNIFORM3UI64ARBPROC)Proto3dGlGetProcAddress("glUniform3ui64ARB");
  _glUniform4ui64ARB = (PFNGLUNIFORM4UI64ARBPROC)Proto3dGlGetProcAddress("glUniform4ui64ARB");
  _glUniform1ui64vARB = (PFNGLUNIFORM1UI64VARBPROC)Proto3dGlGetProcAddress("glUniform1ui64vARB");
  _glUniform2ui64vARB = (PFNGLUNIFORM2UI64VARBPROC)Proto3dGlGetProcAddress("glUniform2ui64vARB");
  _glUniform3ui64vARB = (PFNGLUNIFORM3UI64VARBPROC)Proto3dGlGetProcAddress("glUniform3ui64vARB");
  _glUniform4ui64vARB = (PFNGLUNIFORM4UI64VARBPROC)Proto3dGlGetProcAddress("glUniform4ui64vARB");
  _glGetUniformi64vARB = (PFNGLGETUNIFORMI64VARBPROC)Proto3dGlGetProcAddress("glGetUniformi64vARB");
  _glGetUniformui64vARB = (PFNGLGETUNIFORMUI64VARBPROC)Proto3dGlGetProcAddress("glGetUniformui64vARB");
  _glGetnUniformi64vARB = (PFNGLGETNUNIFORMI64VARBPROC)Proto3dGlGetProcAddress("glGetnUniformi64vARB");
  _glGetnUniformui64vARB = (PFNGLGETNUNIFORMUI64VARBPROC)Proto3dGlGetProcAddress("glGetnUniformui64vARB");
  _glProgramUniform1i64ARB = (PFNGLPROGRAMUNIFORM1I64ARBPROC)Proto3dGlGetProcAddress("glProgramUniform1i64ARB");
  _glProgramUniform2i64ARB = (PFNGLPROGRAMUNIFORM2I64ARBPROC)Proto3dGlGetProcAddress("glProgramUniform2i64ARB");
  _glProgramUniform3i64ARB = (PFNGLPROGRAMUNIFORM3I64ARBPROC)Proto3dGlGetProcAddress("glProgramUniform3i64ARB");
  _glProgramUniform4i64ARB = (PFNGLPROGRAMUNIFORM4I64ARBPROC)Proto3dGlGetProcAddress("glProgramUniform4i64ARB");
  _glProgramUniform1i64vARB = (PFNGLPROGRAMUNIFORM1I64VARBPROC)Proto3dGlGetProcAddress("glProgramUniform1i64vARB");
  _glProgramUniform2i64vARB = (PFNGLPROGRAMUNIFORM2I64VARBPROC)Proto3dGlGetProcAddress("glProgramUniform2i64vARB");
  _glProgramUniform3i64vARB = (PFNGLPROGRAMUNIFORM3I64VARBPROC)Proto3dGlGetProcAddress("glProgramUniform3i64vARB");
  _glProgramUniform4i64vARB = (PFNGLPROGRAMUNIFORM4I64VARBPROC)Proto3dGlGetProcAddress("glProgramUniform4i64vARB");
  _glProgramUniform1ui64ARB = (PFNGLPROGRAMUNIFORM1UI64ARBPROC)Proto3dGlGetProcAddress("glProgramUniform1ui64ARB");
  _glProgramUniform2ui64ARB = (PFNGLPROGRAMUNIFORM2UI64ARBPROC)Proto3dGlGetProcAddress("glProgramUniform2ui64ARB");
  _glProgramUniform3ui64ARB = (PFNGLPROGRAMUNIFORM3UI64ARBPROC)Proto3dGlGetProcAddress("glProgramUniform3ui64ARB");
  _glProgramUniform4ui64ARB = (PFNGLPROGRAMUNIFORM4UI64ARBPROC)Proto3dGlGetProcAddress("glProgramUniform4ui64ARB");
  _glProgramUniform1ui64vARB = (PFNGLPROGRAMUNIFORM1UI64VARBPROC)Proto3dGlGetProcAddress("glProgramUniform1ui64vARB");
  _glProgramUniform2ui64vARB = (PFNGLPROGRAMUNIFORM2UI64VARBPROC)Proto3dGlGetProcAddress("glProgramUniform2ui64vARB");
  _glProgramUniform3ui64vARB = (PFNGLPROGRAMUNIFORM3UI64VARBPROC)Proto3dGlGetProcAddress("glProgramUniform3ui64vARB");
  _glProgramUniform4ui64vARB = (PFNGLPROGRAMUNIFORM4UI64VARBPROC)Proto3dGlGetProcAddress("glProgramUniform4ui64vARB");
  _glMultiDrawArraysIndirectCountARB = (PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC)Proto3dGlGetProcAddress("glMultiDrawArraysIndirectCountARB");
  _glMultiDrawElementsIndirectCountARB = (PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC)Proto3dGlGetProcAddress("glMultiDrawElementsIndirectCountARB");
  _glVertexAttribDivisorARB = (PFNGLVERTEXATTRIBDIVISORARBPROC)Proto3dGlGetProcAddress("glVertexAttribDivisorARB");
  _glMaxShaderCompilerThreadsARB = (PFNGLMAXSHADERCOMPILERTHREADSARBPROC)Proto3dGlGetProcAddress("glMaxShaderCompilerThreadsARB");
  _glGetGraphicsResetStatusARB = (PFNGLGETGRAPHICSRESETSTATUSARBPROC)Proto3dGlGetProcAddress("glGetGraphicsResetStatusARB");
  _glGetnTexImageARB = (PFNGLGETNTEXIMAGEARBPROC)Proto3dGlGetProcAddress("glGetnTexImageARB");
  _glReadnPixelsARB = (PFNGLREADNPIXELSARBPROC)Proto3dGlGetProcAddress("glReadnPixelsARB");
  _glGetnCompressedTexImageARB = (PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC)Proto3dGlGetProcAddress("glGetnCompressedTexImageARB");
  _glGetnUniformfvARB = (PFNGLGETNUNIFORMFVARBPROC)Proto3dGlGetProcAddress("glGetnUniformfvARB");
  _glGetnUniformivARB = (PFNGLGETNUNIFORMIVARBPROC)Proto3dGlGetProcAddress("glGetnUniformivARB");
  _glGetnUniformuivARB = (PFNGLGETNUNIFORMUIVARBPROC)Proto3dGlGetProcAddress("glGetnUniformuivARB");
  _glGetnUniformdvARB = (PFNGLGETNUNIFORMDVARBPROC)Proto3dGlGetProcAddress("glGetnUniformdvARB");
  _glFramebufferSampleLocationsfvARB = (PFNGLFRAMEBUFFERSAMPLELOCATIONSFVARBPROC)Proto3dGlGetProcAddress("glFramebufferSampleLocationsfvARB");
  _glNamedFramebufferSampleLocationsfvARB = (PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVARBPROC)Proto3dGlGetProcAddress("glNamedFramebufferSampleLocationsfvARB");
  _glEvaluateDepthValuesARB = (PFNGLEVALUATEDEPTHVALUESARBPROC)Proto3dGlGetProcAddress("glEvaluateDepthValuesARB");
  _glMinSampleShadingARB = (PFNGLMINSAMPLESHADINGARBPROC)Proto3dGlGetProcAddress("glMinSampleShadingARB");
  _glNamedStringARB = (PFNGLNAMEDSTRINGARBPROC)Proto3dGlGetProcAddress("glNamedStringARB");
  _glDeleteNamedStringARB = (PFNGLDELETENAMEDSTRINGARBPROC)Proto3dGlGetProcAddress("glDeleteNamedStringARB");
  _glCompileShaderIncludeARB = (PFNGLCOMPILESHADERINCLUDEARBPROC)Proto3dGlGetProcAddress("glCompileShaderIncludeARB");
  _glIsNamedStringARB = (PFNGLISNAMEDSTRINGARBPROC)Proto3dGlGetProcAddress("glIsNamedStringARB");
  _glGetNamedStringARB = (PFNGLGETNAMEDSTRINGARBPROC)Proto3dGlGetProcAddress("glGetNamedStringARB");
  _glGetNamedStringivARB = (PFNGLGETNAMEDSTRINGIVARBPROC)Proto3dGlGetProcAddress("glGetNamedStringivARB");
  _glBufferPageCommitmentARB = (PFNGLBUFFERPAGECOMMITMENTARBPROC)Proto3dGlGetProcAddress("glBufferPageCommitmentARB");
  _glNamedBufferPageCommitmentEXT = (PFNGLNAMEDBUFFERPAGECOMMITMENTEXTPROC)Proto3dGlGetProcAddress("glNamedBufferPageCommitmentEXT");
  _glNamedBufferPageCommitmentARB = (PFNGLNAMEDBUFFERPAGECOMMITMENTARBPROC)Proto3dGlGetProcAddress("glNamedBufferPageCommitmentARB");
  _glTexPageCommitmentARB = (PFNGLTEXPAGECOMMITMENTARBPROC)Proto3dGlGetProcAddress("glTexPageCommitmentARB");
  _glTexBufferARB = (PFNGLTEXBUFFERARBPROC)Proto3dGlGetProcAddress("glTexBufferARB");
  _glBlendBarrierKHR = (PFNGLBLENDBARRIERKHRPROC)Proto3dGlGetProcAddress("glBlendBarrierKHR");
  _glMaxShaderCompilerThreadsKHR = (PFNGLMAXSHADERCOMPILERTHREADSKHRPROC)Proto3dGlGetProcAddress("glMaxShaderCompilerThreadsKHR");
  _glGetPerfMonitorGroupsAMD = (PFNGLGETPERFMONITORGROUPSAMDPROC)Proto3dGlGetProcAddress("glGetPerfMonitorGroupsAMD");
  _glGetPerfMonitorCountersAMD = (PFNGLGETPERFMONITORCOUNTERSAMDPROC)Proto3dGlGetProcAddress("glGetPerfMonitorCountersAMD");
  _glGetPerfMonitorGroupStringAMD = (PFNGLGETPERFMONITORGROUPSTRINGAMDPROC)Proto3dGlGetProcAddress("glGetPerfMonitorGroupStringAMD");
  _glGetPerfMonitorCounterStringAMD = (PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC)Proto3dGlGetProcAddress("glGetPerfMonitorCounterStringAMD");
  _glGetPerfMonitorCounterInfoAMD = (PFNGLGETPERFMONITORCOUNTERINFOAMDPROC)Proto3dGlGetProcAddress("glGetPerfMonitorCounterInfoAMD");
  _glGenPerfMonitorsAMD = (PFNGLGENPERFMONITORSAMDPROC)Proto3dGlGetProcAddress("glGenPerfMonitorsAMD");
  _glDeletePerfMonitorsAMD = (PFNGLDELETEPERFMONITORSAMDPROC)Proto3dGlGetProcAddress("glDeletePerfMonitorsAMD");
  _glSelectPerfMonitorCountersAMD = (PFNGLSELECTPERFMONITORCOUNTERSAMDPROC)Proto3dGlGetProcAddress("glSelectPerfMonitorCountersAMD");
  _glBeginPerfMonitorAMD = (PFNGLBEGINPERFMONITORAMDPROC)Proto3dGlGetProcAddress("glBeginPerfMonitorAMD");
  _glEndPerfMonitorAMD = (PFNGLENDPERFMONITORAMDPROC)Proto3dGlGetProcAddress("glEndPerfMonitorAMD");
  _glGetPerfMonitorCounterDataAMD = (PFNGLGETPERFMONITORCOUNTERDATAAMDPROC)Proto3dGlGetProcAddress("glGetPerfMonitorCounterDataAMD");
  _glLabelObjectEXT = (PFNGLLABELOBJECTEXTPROC)Proto3dGlGetProcAddress("glLabelObjectEXT");
  _glGetObjectLabelEXT = (PFNGLGETOBJECTLABELEXTPROC)Proto3dGlGetProcAddress("glGetObjectLabelEXT");
  _glInsertEventMarkerEXT = (PFNGLINSERTEVENTMARKEREXTPROC)Proto3dGlGetProcAddress("glInsertEventMarkerEXT");
  _glPushGroupMarkerEXT = (PFNGLPUSHGROUPMARKEREXTPROC)Proto3dGlGetProcAddress("glPushGroupMarkerEXT");
  _glPopGroupMarkerEXT = (PFNGLPOPGROUPMARKEREXTPROC)Proto3dGlGetProcAddress("glPopGroupMarkerEXT");
  _glMatrixLoadfEXT = (PFNGLMATRIXLOADFEXTPROC)Proto3dGlGetProcAddress("glMatrixLoadfEXT");
  _glMatrixLoaddEXT = (PFNGLMATRIXLOADDEXTPROC)Proto3dGlGetProcAddress("glMatrixLoaddEXT");
  _glMatrixMultfEXT = (PFNGLMATRIXMULTFEXTPROC)Proto3dGlGetProcAddress("glMatrixMultfEXT");
  _glMatrixMultdEXT = (PFNGLMATRIXMULTDEXTPROC)Proto3dGlGetProcAddress("glMatrixMultdEXT");
  _glMatrixLoadIdentityEXT = (PFNGLMATRIXLOADIDENTITYEXTPROC)Proto3dGlGetProcAddress("glMatrixLoadIdentityEXT");
  _glMatrixRotatefEXT = (PFNGLMATRIXROTATEFEXTPROC)Proto3dGlGetProcAddress("glMatrixRotatefEXT");
  _glMatrixRotatedEXT = (PFNGLMATRIXROTATEDEXTPROC)Proto3dGlGetProcAddress("glMatrixRotatedEXT");
  _glMatrixScalefEXT = (PFNGLMATRIXSCALEFEXTPROC)Proto3dGlGetProcAddress("glMatrixScalefEXT");
  _glMatrixScaledEXT = (PFNGLMATRIXSCALEDEXTPROC)Proto3dGlGetProcAddress("glMatrixScaledEXT");
  _glMatrixTranslatefEXT = (PFNGLMATRIXTRANSLATEFEXTPROC)Proto3dGlGetProcAddress("glMatrixTranslatefEXT");
  _glMatrixTranslatedEXT = (PFNGLMATRIXTRANSLATEDEXTPROC)Proto3dGlGetProcAddress("glMatrixTranslatedEXT");
  _glMatrixFrustumEXT = (PFNGLMATRIXFRUSTUMEXTPROC)Proto3dGlGetProcAddress("glMatrixFrustumEXT");
  _glMatrixOrthoEXT = (PFNGLMATRIXORTHOEXTPROC)Proto3dGlGetProcAddress("glMatrixOrthoEXT");
  _glMatrixPopEXT = (PFNGLMATRIXPOPEXTPROC)Proto3dGlGetProcAddress("glMatrixPopEXT");
  _glMatrixPushEXT = (PFNGLMATRIXPUSHEXTPROC)Proto3dGlGetProcAddress("glMatrixPushEXT");
  _glClientAttribDefaultEXT = (PFNGLCLIENTATTRIBDEFAULTEXTPROC)Proto3dGlGetProcAddress("glClientAttribDefaultEXT");
  _glPushClientAttribDefaultEXT = (PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC)Proto3dGlGetProcAddress("glPushClientAttribDefaultEXT");
  _glTextureParameterfEXT = (PFNGLTEXTUREPARAMETERFEXTPROC)Proto3dGlGetProcAddress("glTextureParameterfEXT");
  _glTextureParameterfvEXT = (PFNGLTEXTUREPARAMETERFVEXTPROC)Proto3dGlGetProcAddress("glTextureParameterfvEXT");
  _glTextureParameteriEXT = (PFNGLTEXTUREPARAMETERIEXTPROC)Proto3dGlGetProcAddress("glTextureParameteriEXT");
  _glTextureParameterivEXT = (PFNGLTEXTUREPARAMETERIVEXTPROC)Proto3dGlGetProcAddress("glTextureParameterivEXT");
  _glTextureImage1DEXT = (PFNGLTEXTUREIMAGE1DEXTPROC)Proto3dGlGetProcAddress("glTextureImage1DEXT");
  _glTextureImage2DEXT = (PFNGLTEXTUREIMAGE2DEXTPROC)Proto3dGlGetProcAddress("glTextureImage2DEXT");
  _glTextureSubImage1DEXT = (PFNGLTEXTURESUBIMAGE1DEXTPROC)Proto3dGlGetProcAddress("glTextureSubImage1DEXT");
  _glTextureSubImage2DEXT = (PFNGLTEXTURESUBIMAGE2DEXTPROC)Proto3dGlGetProcAddress("glTextureSubImage2DEXT");
  _glCopyTextureImage1DEXT = (PFNGLCOPYTEXTUREIMAGE1DEXTPROC)Proto3dGlGetProcAddress("glCopyTextureImage1DEXT");
  _glCopyTextureImage2DEXT = (PFNGLCOPYTEXTUREIMAGE2DEXTPROC)Proto3dGlGetProcAddress("glCopyTextureImage2DEXT");
  _glCopyTextureSubImage1DEXT = (PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC)Proto3dGlGetProcAddress("glCopyTextureSubImage1DEXT");
  _glCopyTextureSubImage2DEXT = (PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC)Proto3dGlGetProcAddress("glCopyTextureSubImage2DEXT");
  _glGetTextureImageEXT = (PFNGLGETTEXTUREIMAGEEXTPROC)Proto3dGlGetProcAddress("glGetTextureImageEXT");
  _glGetTextureParameterfvEXT = (PFNGLGETTEXTUREPARAMETERFVEXTPROC)Proto3dGlGetProcAddress("glGetTextureParameterfvEXT");
  _glGetTextureParameterivEXT = (PFNGLGETTEXTUREPARAMETERIVEXTPROC)Proto3dGlGetProcAddress("glGetTextureParameterivEXT");
  _glGetTextureLevelParameterfvEXT = (PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC)Proto3dGlGetProcAddress("glGetTextureLevelParameterfvEXT");
  _glGetTextureLevelParameterivEXT = (PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC)Proto3dGlGetProcAddress("glGetTextureLevelParameterivEXT");
  _glTextureImage3DEXT = (PFNGLTEXTUREIMAGE3DEXTPROC)Proto3dGlGetProcAddress("glTextureImage3DEXT");
  _glTextureSubImage3DEXT = (PFNGLTEXTURESUBIMAGE3DEXTPROC)Proto3dGlGetProcAddress("glTextureSubImage3DEXT");
  _glCopyTextureSubImage3DEXT = (PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC)Proto3dGlGetProcAddress("glCopyTextureSubImage3DEXT");
  _glBindMultiTextureEXT = (PFNGLBINDMULTITEXTUREEXTPROC)Proto3dGlGetProcAddress("glBindMultiTextureEXT");
  _glMultiTexCoordPointerEXT = (PFNGLMULTITEXCOORDPOINTEREXTPROC)Proto3dGlGetProcAddress("glMultiTexCoordPointerEXT");
  _glMultiTexEnvfEXT = (PFNGLMULTITEXENVFEXTPROC)Proto3dGlGetProcAddress("glMultiTexEnvfEXT");
  _glMultiTexEnvfvEXT = (PFNGLMULTITEXENVFVEXTPROC)Proto3dGlGetProcAddress("glMultiTexEnvfvEXT");
  _glMultiTexEnviEXT = (PFNGLMULTITEXENVIEXTPROC)Proto3dGlGetProcAddress("glMultiTexEnviEXT");
  _glMultiTexEnvivEXT = (PFNGLMULTITEXENVIVEXTPROC)Proto3dGlGetProcAddress("glMultiTexEnvivEXT");
  _glMultiTexGendEXT = (PFNGLMULTITEXGENDEXTPROC)Proto3dGlGetProcAddress("glMultiTexGendEXT");
  _glMultiTexGendvEXT = (PFNGLMULTITEXGENDVEXTPROC)Proto3dGlGetProcAddress("glMultiTexGendvEXT");
  _glMultiTexGenfEXT = (PFNGLMULTITEXGENFEXTPROC)Proto3dGlGetProcAddress("glMultiTexGenfEXT");
  _glMultiTexGenfvEXT = (PFNGLMULTITEXGENFVEXTPROC)Proto3dGlGetProcAddress("glMultiTexGenfvEXT");
  _glMultiTexGeniEXT = (PFNGLMULTITEXGENIEXTPROC)Proto3dGlGetProcAddress("glMultiTexGeniEXT");
  _glMultiTexGenivEXT = (PFNGLMULTITEXGENIVEXTPROC)Proto3dGlGetProcAddress("glMultiTexGenivEXT");
  _glGetMultiTexEnvfvEXT = (PFNGLGETMULTITEXENVFVEXTPROC)Proto3dGlGetProcAddress("glGetMultiTexEnvfvEXT");
  _glGetMultiTexEnvivEXT = (PFNGLGETMULTITEXENVIVEXTPROC)Proto3dGlGetProcAddress("glGetMultiTexEnvivEXT");
  _glGetMultiTexGendvEXT = (PFNGLGETMULTITEXGENDVEXTPROC)Proto3dGlGetProcAddress("glGetMultiTexGendvEXT");
  _glGetMultiTexGenfvEXT = (PFNGLGETMULTITEXGENFVEXTPROC)Proto3dGlGetProcAddress("glGetMultiTexGenfvEXT");
  _glGetMultiTexGenivEXT = (PFNGLGETMULTITEXGENIVEXTPROC)Proto3dGlGetProcAddress("glGetMultiTexGenivEXT");
  _glMultiTexParameteriEXT = (PFNGLMULTITEXPARAMETERIEXTPROC)Proto3dGlGetProcAddress("glMultiTexParameteriEXT");
  _glMultiTexParameterivEXT = (PFNGLMULTITEXPARAMETERIVEXTPROC)Proto3dGlGetProcAddress("glMultiTexParameterivEXT");
  _glMultiTexParameterfEXT = (PFNGLMULTITEXPARAMETERFEXTPROC)Proto3dGlGetProcAddress("glMultiTexParameterfEXT");
  _glMultiTexParameterfvEXT = (PFNGLMULTITEXPARAMETERFVEXTPROC)Proto3dGlGetProcAddress("glMultiTexParameterfvEXT");
  _glMultiTexImage1DEXT = (PFNGLMULTITEXIMAGE1DEXTPROC)Proto3dGlGetProcAddress("glMultiTexImage1DEXT");
  _glMultiTexImage2DEXT = (PFNGLMULTITEXIMAGE2DEXTPROC)Proto3dGlGetProcAddress("glMultiTexImage2DEXT");
  _glMultiTexSubImage1DEXT = (PFNGLMULTITEXSUBIMAGE1DEXTPROC)Proto3dGlGetProcAddress("glMultiTexSubImage1DEXT");
  _glMultiTexSubImage2DEXT = (PFNGLMULTITEXSUBIMAGE2DEXTPROC)Proto3dGlGetProcAddress("glMultiTexSubImage2DEXT");
  _glCopyMultiTexImage1DEXT = (PFNGLCOPYMULTITEXIMAGE1DEXTPROC)Proto3dGlGetProcAddress("glCopyMultiTexImage1DEXT");
  _glCopyMultiTexImage2DEXT = (PFNGLCOPYMULTITEXIMAGE2DEXTPROC)Proto3dGlGetProcAddress("glCopyMultiTexImage2DEXT");
  _glCopyMultiTexSubImage1DEXT = (PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC)Proto3dGlGetProcAddress("glCopyMultiTexSubImage1DEXT");
  _glCopyMultiTexSubImage2DEXT = (PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC)Proto3dGlGetProcAddress("glCopyMultiTexSubImage2DEXT");
  _glGetMultiTexImageEXT = (PFNGLGETMULTITEXIMAGEEXTPROC)Proto3dGlGetProcAddress("glGetMultiTexImageEXT");
  _glGetMultiTexParameterfvEXT = (PFNGLGETMULTITEXPARAMETERFVEXTPROC)Proto3dGlGetProcAddress("glGetMultiTexParameterfvEXT");
  _glGetMultiTexParameterivEXT = (PFNGLGETMULTITEXPARAMETERIVEXTPROC)Proto3dGlGetProcAddress("glGetMultiTexParameterivEXT");
  _glGetMultiTexLevelParameterfvEXT = (PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC)Proto3dGlGetProcAddress("glGetMultiTexLevelParameterfvEXT");
  _glGetMultiTexLevelParameterivEXT = (PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC)Proto3dGlGetProcAddress("glGetMultiTexLevelParameterivEXT");
  _glMultiTexImage3DEXT = (PFNGLMULTITEXIMAGE3DEXTPROC)Proto3dGlGetProcAddress("glMultiTexImage3DEXT");
  _glMultiTexSubImage3DEXT = (PFNGLMULTITEXSUBIMAGE3DEXTPROC)Proto3dGlGetProcAddress("glMultiTexSubImage3DEXT");
  _glCopyMultiTexSubImage3DEXT = (PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC)Proto3dGlGetProcAddress("glCopyMultiTexSubImage3DEXT");
  _glEnableClientStateIndexedEXT = (PFNGLENABLECLIENTSTATEINDEXEDEXTPROC)Proto3dGlGetProcAddress("glEnableClientStateIndexedEXT");
  _glDisableClientStateIndexedEXT = (PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC)Proto3dGlGetProcAddress("glDisableClientStateIndexedEXT");
  _glGetFloatIndexedvEXT = (PFNGLGETFLOATINDEXEDVEXTPROC)Proto3dGlGetProcAddress("glGetFloatIndexedvEXT");
  _glGetDoubleIndexedvEXT = (PFNGLGETDOUBLEINDEXEDVEXTPROC)Proto3dGlGetProcAddress("glGetDoubleIndexedvEXT");
  _glGetPointerIndexedvEXT = (PFNGLGETPOINTERINDEXEDVEXTPROC)Proto3dGlGetProcAddress("glGetPointerIndexedvEXT");
  _glEnableIndexedEXT = (PFNGLENABLEINDEXEDEXTPROC)Proto3dGlGetProcAddress("glEnableIndexedEXT");
  _glDisableIndexedEXT = (PFNGLDISABLEINDEXEDEXTPROC)Proto3dGlGetProcAddress("glDisableIndexedEXT");
  _glIsEnabledIndexedEXT = (PFNGLISENABLEDINDEXEDEXTPROC)Proto3dGlGetProcAddress("glIsEnabledIndexedEXT");
  _glGetIntegerIndexedvEXT = (PFNGLGETINTEGERINDEXEDVEXTPROC)Proto3dGlGetProcAddress("glGetIntegerIndexedvEXT");
  _glGetBooleanIndexedvEXT = (PFNGLGETBOOLEANINDEXEDVEXTPROC)Proto3dGlGetProcAddress("glGetBooleanIndexedvEXT");
  _glCompressedTextureImage3DEXT = (PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC)Proto3dGlGetProcAddress("glCompressedTextureImage3DEXT");
  _glCompressedTextureImage2DEXT = (PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC)Proto3dGlGetProcAddress("glCompressedTextureImage2DEXT");
  _glCompressedTextureImage1DEXT = (PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC)Proto3dGlGetProcAddress("glCompressedTextureImage1DEXT");
  _glCompressedTextureSubImage3DEXT = (PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC)Proto3dGlGetProcAddress("glCompressedTextureSubImage3DEXT");
  _glCompressedTextureSubImage2DEXT = (PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC)Proto3dGlGetProcAddress("glCompressedTextureSubImage2DEXT");
  _glCompressedTextureSubImage1DEXT = (PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC)Proto3dGlGetProcAddress("glCompressedTextureSubImage1DEXT");
  _glGetCompressedTextureImageEXT = (PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC)Proto3dGlGetProcAddress("glGetCompressedTextureImageEXT");
  _glCompressedMultiTexImage3DEXT = (PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC)Proto3dGlGetProcAddress("glCompressedMultiTexImage3DEXT");
  _glCompressedMultiTexImage2DEXT = (PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC)Proto3dGlGetProcAddress("glCompressedMultiTexImage2DEXT");
  _glCompressedMultiTexImage1DEXT = (PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC)Proto3dGlGetProcAddress("glCompressedMultiTexImage1DEXT");
  _glCompressedMultiTexSubImage3DEXT = (PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC)Proto3dGlGetProcAddress("glCompressedMultiTexSubImage3DEXT");
  _glCompressedMultiTexSubImage2DEXT = (PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC)Proto3dGlGetProcAddress("glCompressedMultiTexSubImage2DEXT");
  _glCompressedMultiTexSubImage1DEXT = (PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC)Proto3dGlGetProcAddress("glCompressedMultiTexSubImage1DEXT");
  _glGetCompressedMultiTexImageEXT = (PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC)Proto3dGlGetProcAddress("glGetCompressedMultiTexImageEXT");
  _glMatrixLoadTransposefEXT = (PFNGLMATRIXLOADTRANSPOSEFEXTPROC)Proto3dGlGetProcAddress("glMatrixLoadTransposefEXT");
  _glMatrixLoadTransposedEXT = (PFNGLMATRIXLOADTRANSPOSEDEXTPROC)Proto3dGlGetProcAddress("glMatrixLoadTransposedEXT");
  _glMatrixMultTransposefEXT = (PFNGLMATRIXMULTTRANSPOSEFEXTPROC)Proto3dGlGetProcAddress("glMatrixMultTransposefEXT");
  _glMatrixMultTransposedEXT = (PFNGLMATRIXMULTTRANSPOSEDEXTPROC)Proto3dGlGetProcAddress("glMatrixMultTransposedEXT");
  _glNamedBufferDataEXT = (PFNGLNAMEDBUFFERDATAEXTPROC)Proto3dGlGetProcAddress("glNamedBufferDataEXT");
  _glNamedBufferSubDataEXT = (PFNGLNAMEDBUFFERSUBDATAEXTPROC)Proto3dGlGetProcAddress("glNamedBufferSubDataEXT");
  _glMapNamedBufferEXT = (PFNGLMAPNAMEDBUFFEREXTPROC)Proto3dGlGetProcAddress("glMapNamedBufferEXT");
  _glUnmapNamedBufferEXT = (PFNGLUNMAPNAMEDBUFFEREXTPROC)Proto3dGlGetProcAddress("glUnmapNamedBufferEXT");
  _glGetNamedBufferParameterivEXT = (PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC)Proto3dGlGetProcAddress("glGetNamedBufferParameterivEXT");
  _glGetNamedBufferPointervEXT = (PFNGLGETNAMEDBUFFERPOINTERVEXTPROC)Proto3dGlGetProcAddress("glGetNamedBufferPointervEXT");
  _glGetNamedBufferSubDataEXT = (PFNGLGETNAMEDBUFFERSUBDATAEXTPROC)Proto3dGlGetProcAddress("glGetNamedBufferSubDataEXT");
  _glProgramUniform1fEXT = (PFNGLPROGRAMUNIFORM1FEXTPROC)Proto3dGlGetProcAddress("glProgramUniform1fEXT");
  _glProgramUniform2fEXT = (PFNGLPROGRAMUNIFORM2FEXTPROC)Proto3dGlGetProcAddress("glProgramUniform2fEXT");
  _glProgramUniform3fEXT = (PFNGLPROGRAMUNIFORM3FEXTPROC)Proto3dGlGetProcAddress("glProgramUniform3fEXT");
  _glProgramUniform4fEXT = (PFNGLPROGRAMUNIFORM4FEXTPROC)Proto3dGlGetProcAddress("glProgramUniform4fEXT");
  _glProgramUniform1iEXT = (PFNGLPROGRAMUNIFORM1IEXTPROC)Proto3dGlGetProcAddress("glProgramUniform1iEXT");
  _glProgramUniform2iEXT = (PFNGLPROGRAMUNIFORM2IEXTPROC)Proto3dGlGetProcAddress("glProgramUniform2iEXT");
  _glProgramUniform3iEXT = (PFNGLPROGRAMUNIFORM3IEXTPROC)Proto3dGlGetProcAddress("glProgramUniform3iEXT");
  _glProgramUniform4iEXT = (PFNGLPROGRAMUNIFORM4IEXTPROC)Proto3dGlGetProcAddress("glProgramUniform4iEXT");
  _glProgramUniform1fvEXT = (PFNGLPROGRAMUNIFORM1FVEXTPROC)Proto3dGlGetProcAddress("glProgramUniform1fvEXT");
  _glProgramUniform2fvEXT = (PFNGLPROGRAMUNIFORM2FVEXTPROC)Proto3dGlGetProcAddress("glProgramUniform2fvEXT");
  _glProgramUniform3fvEXT = (PFNGLPROGRAMUNIFORM3FVEXTPROC)Proto3dGlGetProcAddress("glProgramUniform3fvEXT");
  _glProgramUniform4fvEXT = (PFNGLPROGRAMUNIFORM4FVEXTPROC)Proto3dGlGetProcAddress("glProgramUniform4fvEXT");
  _glProgramUniform1ivEXT = (PFNGLPROGRAMUNIFORM1IVEXTPROC)Proto3dGlGetProcAddress("glProgramUniform1ivEXT");
  _glProgramUniform2ivEXT = (PFNGLPROGRAMUNIFORM2IVEXTPROC)Proto3dGlGetProcAddress("glProgramUniform2ivEXT");
  _glProgramUniform3ivEXT = (PFNGLPROGRAMUNIFORM3IVEXTPROC)Proto3dGlGetProcAddress("glProgramUniform3ivEXT");
  _glProgramUniform4ivEXT = (PFNGLPROGRAMUNIFORM4IVEXTPROC)Proto3dGlGetProcAddress("glProgramUniform4ivEXT");
  _glProgramUniformMatrix2fvEXT = (PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC)Proto3dGlGetProcAddress("glProgramUniformMatrix2fvEXT");
  _glProgramUniformMatrix3fvEXT = (PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC)Proto3dGlGetProcAddress("glProgramUniformMatrix3fvEXT");
  _glProgramUniformMatrix4fvEXT = (PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC)Proto3dGlGetProcAddress("glProgramUniformMatrix4fvEXT");
  _glProgramUniformMatrix2x3fvEXT = (PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC)Proto3dGlGetProcAddress("glProgramUniformMatrix2x3fvEXT");
  _glProgramUniformMatrix3x2fvEXT = (PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC)Proto3dGlGetProcAddress("glProgramUniformMatrix3x2fvEXT");
  _glProgramUniformMatrix2x4fvEXT = (PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC)Proto3dGlGetProcAddress("glProgramUniformMatrix2x4fvEXT");
  _glProgramUniformMatrix4x2fvEXT = (PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC)Proto3dGlGetProcAddress("glProgramUniformMatrix4x2fvEXT");
  _glProgramUniformMatrix3x4fvEXT = (PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC)Proto3dGlGetProcAddress("glProgramUniformMatrix3x4fvEXT");
  _glProgramUniformMatrix4x3fvEXT = (PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC)Proto3dGlGetProcAddress("glProgramUniformMatrix4x3fvEXT");
  _glTextureBufferEXT = (PFNGLTEXTUREBUFFEREXTPROC)Proto3dGlGetProcAddress("glTextureBufferEXT");
  _glMultiTexBufferEXT = (PFNGLMULTITEXBUFFEREXTPROC)Proto3dGlGetProcAddress("glMultiTexBufferEXT");
  _glTextureParameterIivEXT = (PFNGLTEXTUREPARAMETERIIVEXTPROC)Proto3dGlGetProcAddress("glTextureParameterIivEXT");
  _glTextureParameterIuivEXT = (PFNGLTEXTUREPARAMETERIUIVEXTPROC)Proto3dGlGetProcAddress("glTextureParameterIuivEXT");
  _glGetTextureParameterIivEXT = (PFNGLGETTEXTUREPARAMETERIIVEXTPROC)Proto3dGlGetProcAddress("glGetTextureParameterIivEXT");
  _glGetTextureParameterIuivEXT = (PFNGLGETTEXTUREPARAMETERIUIVEXTPROC)Proto3dGlGetProcAddress("glGetTextureParameterIuivEXT");
  _glMultiTexParameterIivEXT = (PFNGLMULTITEXPARAMETERIIVEXTPROC)Proto3dGlGetProcAddress("glMultiTexParameterIivEXT");
  _glMultiTexParameterIuivEXT = (PFNGLMULTITEXPARAMETERIUIVEXTPROC)Proto3dGlGetProcAddress("glMultiTexParameterIuivEXT");
  _glGetMultiTexParameterIivEXT = (PFNGLGETMULTITEXPARAMETERIIVEXTPROC)Proto3dGlGetProcAddress("glGetMultiTexParameterIivEXT");
  _glGetMultiTexParameterIuivEXT = (PFNGLGETMULTITEXPARAMETERIUIVEXTPROC)Proto3dGlGetProcAddress("glGetMultiTexParameterIuivEXT");
  _glProgramUniform1uiEXT = (PFNGLPROGRAMUNIFORM1UIEXTPROC)Proto3dGlGetProcAddress("glProgramUniform1uiEXT");
  _glProgramUniform2uiEXT = (PFNGLPROGRAMUNIFORM2UIEXTPROC)Proto3dGlGetProcAddress("glProgramUniform2uiEXT");
  _glProgramUniform3uiEXT = (PFNGLPROGRAMUNIFORM3UIEXTPROC)Proto3dGlGetProcAddress("glProgramUniform3uiEXT");
  _glProgramUniform4uiEXT = (PFNGLPROGRAMUNIFORM4UIEXTPROC)Proto3dGlGetProcAddress("glProgramUniform4uiEXT");
  _glProgramUniform1uivEXT = (PFNGLPROGRAMUNIFORM1UIVEXTPROC)Proto3dGlGetProcAddress("glProgramUniform1uivEXT");
  _glProgramUniform2uivEXT = (PFNGLPROGRAMUNIFORM2UIVEXTPROC)Proto3dGlGetProcAddress("glProgramUniform2uivEXT");
  _glProgramUniform3uivEXT = (PFNGLPROGRAMUNIFORM3UIVEXTPROC)Proto3dGlGetProcAddress("glProgramUniform3uivEXT");
  _glProgramUniform4uivEXT = (PFNGLPROGRAMUNIFORM4UIVEXTPROC)Proto3dGlGetProcAddress("glProgramUniform4uivEXT");
  _glNamedProgramLocalParameters4fvEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC)Proto3dGlGetProcAddress("glNamedProgramLocalParameters4fvEXT");
  _glNamedProgramLocalParameterI4iEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC)Proto3dGlGetProcAddress("glNamedProgramLocalParameterI4iEXT");
  _glNamedProgramLocalParameterI4ivEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC)Proto3dGlGetProcAddress("glNamedProgramLocalParameterI4ivEXT");
  _glNamedProgramLocalParametersI4ivEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC)Proto3dGlGetProcAddress("glNamedProgramLocalParametersI4ivEXT");
  _glNamedProgramLocalParameterI4uiEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC)Proto3dGlGetProcAddress("glNamedProgramLocalParameterI4uiEXT");
  _glNamedProgramLocalParameterI4uivEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC)Proto3dGlGetProcAddress("glNamedProgramLocalParameterI4uivEXT");
  _glNamedProgramLocalParametersI4uivEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC)Proto3dGlGetProcAddress("glNamedProgramLocalParametersI4uivEXT");
  _glGetNamedProgramLocalParameterIivEXT = (PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC)Proto3dGlGetProcAddress("glGetNamedProgramLocalParameterIivEXT");
  _glGetNamedProgramLocalParameterIuivEXT = (PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC)Proto3dGlGetProcAddress("glGetNamedProgramLocalParameterIuivEXT");
  _glEnableClientStateiEXT = (PFNGLENABLECLIENTSTATEIEXTPROC)Proto3dGlGetProcAddress("glEnableClientStateiEXT");
  _glDisableClientStateiEXT = (PFNGLDISABLECLIENTSTATEIEXTPROC)Proto3dGlGetProcAddress("glDisableClientStateiEXT");
  _glGetFloati_vEXT = (PFNGLGETFLOATI_VEXTPROC)Proto3dGlGetProcAddress("glGetFloati_vEXT");
  _glGetDoublei_vEXT = (PFNGLGETDOUBLEI_VEXTPROC)Proto3dGlGetProcAddress("glGetDoublei_vEXT");
  _glGetPointeri_vEXT = (PFNGLGETPOINTERI_VEXTPROC)Proto3dGlGetProcAddress("glGetPointeri_vEXT");
  _glNamedProgramStringEXT = (PFNGLNAMEDPROGRAMSTRINGEXTPROC)Proto3dGlGetProcAddress("glNamedProgramStringEXT");
  _glNamedProgramLocalParameter4dEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC)Proto3dGlGetProcAddress("glNamedProgramLocalParameter4dEXT");
  _glNamedProgramLocalParameter4dvEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC)Proto3dGlGetProcAddress("glNamedProgramLocalParameter4dvEXT");
  _glNamedProgramLocalParameter4fEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC)Proto3dGlGetProcAddress("glNamedProgramLocalParameter4fEXT");
  _glNamedProgramLocalParameter4fvEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC)Proto3dGlGetProcAddress("glNamedProgramLocalParameter4fvEXT");
  _glGetNamedProgramLocalParameterdvEXT = (PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC)Proto3dGlGetProcAddress("glGetNamedProgramLocalParameterdvEXT");
  _glGetNamedProgramLocalParameterfvEXT = (PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC)Proto3dGlGetProcAddress("glGetNamedProgramLocalParameterfvEXT");
  _glGetNamedProgramivEXT = (PFNGLGETNAMEDPROGRAMIVEXTPROC)Proto3dGlGetProcAddress("glGetNamedProgramivEXT");
  _glGetNamedProgramStringEXT = (PFNGLGETNAMEDPROGRAMSTRINGEXTPROC)Proto3dGlGetProcAddress("glGetNamedProgramStringEXT");
  _glNamedRenderbufferStorageEXT = (PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC)Proto3dGlGetProcAddress("glNamedRenderbufferStorageEXT");
  _glGetNamedRenderbufferParameterivEXT = (PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC)Proto3dGlGetProcAddress("glGetNamedRenderbufferParameterivEXT");
  _glNamedRenderbufferStorageMultisampleEXT = (PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC)Proto3dGlGetProcAddress("glNamedRenderbufferStorageMultisampleEXT");
  _glNamedRenderbufferStorageMultisampleCoverageEXT = (PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC)Proto3dGlGetProcAddress("glNamedRenderbufferStorageMultisampleCoverageEXT");
  _glCheckNamedFramebufferStatusEXT = (PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC)Proto3dGlGetProcAddress("glCheckNamedFramebufferStatusEXT");
  _glNamedFramebufferTexture1DEXT = (PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC)Proto3dGlGetProcAddress("glNamedFramebufferTexture1DEXT");
  _glNamedFramebufferTexture2DEXT = (PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC)Proto3dGlGetProcAddress("glNamedFramebufferTexture2DEXT");
  _glNamedFramebufferTexture3DEXT = (PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC)Proto3dGlGetProcAddress("glNamedFramebufferTexture3DEXT");
  _glNamedFramebufferRenderbufferEXT = (PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC)Proto3dGlGetProcAddress("glNamedFramebufferRenderbufferEXT");
  _glGetNamedFramebufferAttachmentParameterivEXT = (PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC)Proto3dGlGetProcAddress("glGetNamedFramebufferAttachmentParameterivEXT");
  _glGenerateTextureMipmapEXT = (PFNGLGENERATETEXTUREMIPMAPEXTPROC)Proto3dGlGetProcAddress("glGenerateTextureMipmapEXT");
  _glGenerateMultiTexMipmapEXT = (PFNGLGENERATEMULTITEXMIPMAPEXTPROC)Proto3dGlGetProcAddress("glGenerateMultiTexMipmapEXT");
  _glFramebufferDrawBufferEXT = (PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC)Proto3dGlGetProcAddress("glFramebufferDrawBufferEXT");
  _glFramebufferDrawBuffersEXT = (PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC)Proto3dGlGetProcAddress("glFramebufferDrawBuffersEXT");
  _glFramebufferReadBufferEXT = (PFNGLFRAMEBUFFERREADBUFFEREXTPROC)Proto3dGlGetProcAddress("glFramebufferReadBufferEXT");
  _glGetFramebufferParameterivEXT = (PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC)Proto3dGlGetProcAddress("glGetFramebufferParameterivEXT");
  _glNamedCopyBufferSubDataEXT = (PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC)Proto3dGlGetProcAddress("glNamedCopyBufferSubDataEXT");
  _glNamedFramebufferTextureEXT = (PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC)Proto3dGlGetProcAddress("glNamedFramebufferTextureEXT");
  _glNamedFramebufferTextureLayerEXT = (PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC)Proto3dGlGetProcAddress("glNamedFramebufferTextureLayerEXT");
  _glNamedFramebufferTextureFaceEXT = (PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC)Proto3dGlGetProcAddress("glNamedFramebufferTextureFaceEXT");
  _glTextureRenderbufferEXT = (PFNGLTEXTURERENDERBUFFEREXTPROC)Proto3dGlGetProcAddress("glTextureRenderbufferEXT");
  _glMultiTexRenderbufferEXT = (PFNGLMULTITEXRENDERBUFFEREXTPROC)Proto3dGlGetProcAddress("glMultiTexRenderbufferEXT");
  _glVertexArrayVertexOffsetEXT = (PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC)Proto3dGlGetProcAddress("glVertexArrayVertexOffsetEXT");
  _glVertexArrayColorOffsetEXT = (PFNGLVERTEXARRAYCOLOROFFSETEXTPROC)Proto3dGlGetProcAddress("glVertexArrayColorOffsetEXT");
  _glVertexArrayEdgeFlagOffsetEXT = (PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC)Proto3dGlGetProcAddress("glVertexArrayEdgeFlagOffsetEXT");
  _glVertexArrayIndexOffsetEXT = (PFNGLVERTEXARRAYINDEXOFFSETEXTPROC)Proto3dGlGetProcAddress("glVertexArrayIndexOffsetEXT");
  _glVertexArrayNormalOffsetEXT = (PFNGLVERTEXARRAYNORMALOFFSETEXTPROC)Proto3dGlGetProcAddress("glVertexArrayNormalOffsetEXT");
  _glVertexArrayTexCoordOffsetEXT = (PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC)Proto3dGlGetProcAddress("glVertexArrayTexCoordOffsetEXT");
  _glVertexArrayMultiTexCoordOffsetEXT = (PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC)Proto3dGlGetProcAddress("glVertexArrayMultiTexCoordOffsetEXT");
  _glVertexArrayFogCoordOffsetEXT = (PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC)Proto3dGlGetProcAddress("glVertexArrayFogCoordOffsetEXT");
  _glVertexArraySecondaryColorOffsetEXT = (PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC)Proto3dGlGetProcAddress("glVertexArraySecondaryColorOffsetEXT");
  _glVertexArrayVertexAttribOffsetEXT = (PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC)Proto3dGlGetProcAddress("glVertexArrayVertexAttribOffsetEXT");
  _glVertexArrayVertexAttribIOffsetEXT = (PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC)Proto3dGlGetProcAddress("glVertexArrayVertexAttribIOffsetEXT");
  _glEnableVertexArrayEXT = (PFNGLENABLEVERTEXARRAYEXTPROC)Proto3dGlGetProcAddress("glEnableVertexArrayEXT");
  _glDisableVertexArrayEXT = (PFNGLDISABLEVERTEXARRAYEXTPROC)Proto3dGlGetProcAddress("glDisableVertexArrayEXT");
  _glEnableVertexArrayAttribEXT = (PFNGLENABLEVERTEXARRAYATTRIBEXTPROC)Proto3dGlGetProcAddress("glEnableVertexArrayAttribEXT");
  _glDisableVertexArrayAttribEXT = (PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC)Proto3dGlGetProcAddress("glDisableVertexArrayAttribEXT");
  _glGetVertexArrayIntegervEXT = (PFNGLGETVERTEXARRAYINTEGERVEXTPROC)Proto3dGlGetProcAddress("glGetVertexArrayIntegervEXT");
  _glGetVertexArrayPointervEXT = (PFNGLGETVERTEXARRAYPOINTERVEXTPROC)Proto3dGlGetProcAddress("glGetVertexArrayPointervEXT");
  _glGetVertexArrayIntegeri_vEXT = (PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC)Proto3dGlGetProcAddress("glGetVertexArrayIntegeri_vEXT");
  _glGetVertexArrayPointeri_vEXT = (PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC)Proto3dGlGetProcAddress("glGetVertexArrayPointeri_vEXT");
  _glMapNamedBufferRangeEXT = (PFNGLMAPNAMEDBUFFERRANGEEXTPROC)Proto3dGlGetProcAddress("glMapNamedBufferRangeEXT");
  _glFlushMappedNamedBufferRangeEXT = (PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC)Proto3dGlGetProcAddress("glFlushMappedNamedBufferRangeEXT");
  _glNamedBufferStorageEXT = (PFNGLNAMEDBUFFERSTORAGEEXTPROC)Proto3dGlGetProcAddress("glNamedBufferStorageEXT");
  _glClearNamedBufferDataEXT = (PFNGLCLEARNAMEDBUFFERDATAEXTPROC)Proto3dGlGetProcAddress("glClearNamedBufferDataEXT");
  _glClearNamedBufferSubDataEXT = (PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC)Proto3dGlGetProcAddress("glClearNamedBufferSubDataEXT");
  _glNamedFramebufferParameteriEXT = (PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC)Proto3dGlGetProcAddress("glNamedFramebufferParameteriEXT");
  _glGetNamedFramebufferParameterivEXT = (PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC)Proto3dGlGetProcAddress("glGetNamedFramebufferParameterivEXT");
  _glProgramUniform1dEXT = (PFNGLPROGRAMUNIFORM1DEXTPROC)Proto3dGlGetProcAddress("glProgramUniform1dEXT");
  _glProgramUniform2dEXT = (PFNGLPROGRAMUNIFORM2DEXTPROC)Proto3dGlGetProcAddress("glProgramUniform2dEXT");
  _glProgramUniform3dEXT = (PFNGLPROGRAMUNIFORM3DEXTPROC)Proto3dGlGetProcAddress("glProgramUniform3dEXT");
  _glProgramUniform4dEXT = (PFNGLPROGRAMUNIFORM4DEXTPROC)Proto3dGlGetProcAddress("glProgramUniform4dEXT");
  _glProgramUniform1dvEXT = (PFNGLPROGRAMUNIFORM1DVEXTPROC)Proto3dGlGetProcAddress("glProgramUniform1dvEXT");
  _glProgramUniform2dvEXT = (PFNGLPROGRAMUNIFORM2DVEXTPROC)Proto3dGlGetProcAddress("glProgramUniform2dvEXT");
  _glProgramUniform3dvEXT = (PFNGLPROGRAMUNIFORM3DVEXTPROC)Proto3dGlGetProcAddress("glProgramUniform3dvEXT");
  _glProgramUniform4dvEXT = (PFNGLPROGRAMUNIFORM4DVEXTPROC)Proto3dGlGetProcAddress("glProgramUniform4dvEXT");
  _glProgramUniformMatrix2dvEXT = (PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC)Proto3dGlGetProcAddress("glProgramUniformMatrix2dvEXT");
  _glProgramUniformMatrix3dvEXT = (PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC)Proto3dGlGetProcAddress("glProgramUniformMatrix3dvEXT");
  _glProgramUniformMatrix4dvEXT = (PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC)Proto3dGlGetProcAddress("glProgramUniformMatrix4dvEXT");
  _glProgramUniformMatrix2x3dvEXT = (PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC)Proto3dGlGetProcAddress("glProgramUniformMatrix2x3dvEXT");
  _glProgramUniformMatrix2x4dvEXT = (PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC)Proto3dGlGetProcAddress("glProgramUniformMatrix2x4dvEXT");
  _glProgramUniformMatrix3x2dvEXT = (PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC)Proto3dGlGetProcAddress("glProgramUniformMatrix3x2dvEXT");
  _glProgramUniformMatrix3x4dvEXT = (PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC)Proto3dGlGetProcAddress("glProgramUniformMatrix3x4dvEXT");
  _glProgramUniformMatrix4x2dvEXT = (PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC)Proto3dGlGetProcAddress("glProgramUniformMatrix4x2dvEXT");
  _glProgramUniformMatrix4x3dvEXT = (PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC)Proto3dGlGetProcAddress("glProgramUniformMatrix4x3dvEXT");
  _glTextureBufferRangeEXT = (PFNGLTEXTUREBUFFERRANGEEXTPROC)Proto3dGlGetProcAddress("glTextureBufferRangeEXT");
  _glTextureStorage1DEXT = (PFNGLTEXTURESTORAGE1DEXTPROC)Proto3dGlGetProcAddress("glTextureStorage1DEXT");
  _glTextureStorage2DEXT = (PFNGLTEXTURESTORAGE2DEXTPROC)Proto3dGlGetProcAddress("glTextureStorage2DEXT");
  _glTextureStorage3DEXT = (PFNGLTEXTURESTORAGE3DEXTPROC)Proto3dGlGetProcAddress("glTextureStorage3DEXT");
  _glTextureStorage2DMultisampleEXT = (PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC)Proto3dGlGetProcAddress("glTextureStorage2DMultisampleEXT");
  _glTextureStorage3DMultisampleEXT = (PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC)Proto3dGlGetProcAddress("glTextureStorage3DMultisampleEXT");
  _glVertexArrayBindVertexBufferEXT = (PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC)Proto3dGlGetProcAddress("glVertexArrayBindVertexBufferEXT");
  _glVertexArrayVertexAttribFormatEXT = (PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC)Proto3dGlGetProcAddress("glVertexArrayVertexAttribFormatEXT");
  _glVertexArrayVertexAttribIFormatEXT = (PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC)Proto3dGlGetProcAddress("glVertexArrayVertexAttribIFormatEXT");
  _glVertexArrayVertexAttribLFormatEXT = (PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC)Proto3dGlGetProcAddress("glVertexArrayVertexAttribLFormatEXT");
  _glVertexArrayVertexAttribBindingEXT = (PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC)Proto3dGlGetProcAddress("glVertexArrayVertexAttribBindingEXT");
  _glVertexArrayVertexBindingDivisorEXT = (PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC)Proto3dGlGetProcAddress("glVertexArrayVertexBindingDivisorEXT");
  _glVertexArrayVertexAttribLOffsetEXT = (PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC)Proto3dGlGetProcAddress("glVertexArrayVertexAttribLOffsetEXT");
  _glTexturePageCommitmentEXT = (PFNGLTEXTUREPAGECOMMITMENTEXTPROC)Proto3dGlGetProcAddress("glTexturePageCommitmentEXT");
  _glVertexArrayVertexAttribDivisorEXT = (PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC)Proto3dGlGetProcAddress("glVertexArrayVertexAttribDivisorEXT");
  _glDrawArraysInstancedEXT = (PFNGLDRAWARRAYSINSTANCEDEXTPROC)Proto3dGlGetProcAddress("glDrawArraysInstancedEXT");
  _glDrawElementsInstancedEXT = (PFNGLDRAWELEMENTSINSTANCEDEXTPROC)Proto3dGlGetProcAddress("glDrawElementsInstancedEXT");
  _glPolygonOffsetClampEXT = (PFNGLPOLYGONOFFSETCLAMPEXTPROC)Proto3dGlGetProcAddress("glPolygonOffsetClampEXT");
  _glRasterSamplesEXT = (PFNGLRASTERSAMPLESEXTPROC)Proto3dGlGetProcAddress("glRasterSamplesEXT");
  _glUseShaderProgramEXT = (PFNGLUSESHADERPROGRAMEXTPROC)Proto3dGlGetProcAddress("glUseShaderProgramEXT");
  _glActiveProgramEXT = (PFNGLACTIVEPROGRAMEXTPROC)Proto3dGlGetProcAddress("glActiveProgramEXT");
  _glCreateShaderProgramEXT = (PFNGLCREATESHADERPROGRAMEXTPROC)Proto3dGlGetProcAddress("glCreateShaderProgramEXT");
  _glWindowRectanglesEXT = (PFNGLWINDOWRECTANGLESEXTPROC)Proto3dGlGetProcAddress("glWindowRectanglesEXT");
  _glApplyFramebufferAttachmentCMAAINTEL = (PFNGLAPPLYFRAMEBUFFERATTACHMENTCMAAINTELPROC)Proto3dGlGetProcAddress("glApplyFramebufferAttachmentCMAAINTEL");
  _glBeginPerfQueryINTEL = (PFNGLBEGINPERFQUERYINTELPROC)Proto3dGlGetProcAddress("glBeginPerfQueryINTEL");
  _glCreatePerfQueryINTEL = (PFNGLCREATEPERFQUERYINTELPROC)Proto3dGlGetProcAddress("glCreatePerfQueryINTEL");
  _glDeletePerfQueryINTEL = (PFNGLDELETEPERFQUERYINTELPROC)Proto3dGlGetProcAddress("glDeletePerfQueryINTEL");
  _glEndPerfQueryINTEL = (PFNGLENDPERFQUERYINTELPROC)Proto3dGlGetProcAddress("glEndPerfQueryINTEL");
  _glGetFirstPerfQueryIdINTEL = (PFNGLGETFIRSTPERFQUERYIDINTELPROC)Proto3dGlGetProcAddress("glGetFirstPerfQueryIdINTEL");
  _glGetNextPerfQueryIdINTEL = (PFNGLGETNEXTPERFQUERYIDINTELPROC)Proto3dGlGetProcAddress("glGetNextPerfQueryIdINTEL");
  _glGetPerfCounterInfoINTEL = (PFNGLGETPERFCOUNTERINFOINTELPROC)Proto3dGlGetProcAddress("glGetPerfCounterInfoINTEL");
  _glGetPerfQueryDataINTEL = (PFNGLGETPERFQUERYDATAINTELPROC)Proto3dGlGetProcAddress("glGetPerfQueryDataINTEL");
  _glGetPerfQueryIdByNameINTEL = (PFNGLGETPERFQUERYIDBYNAMEINTELPROC)Proto3dGlGetProcAddress("glGetPerfQueryIdByNameINTEL");
  _glGetPerfQueryInfoINTEL = (PFNGLGETPERFQUERYINFOINTELPROC)Proto3dGlGetProcAddress("glGetPerfQueryInfoINTEL");
  _glMultiDrawArraysIndirectBindlessNV = (PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC)Proto3dGlGetProcAddress("glMultiDrawArraysIndirectBindlessNV");
  _glMultiDrawElementsIndirectBindlessNV = (PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC)Proto3dGlGetProcAddress("glMultiDrawElementsIndirectBindlessNV");
  _glMultiDrawArraysIndirectBindlessCountNV = (PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSCOUNTNVPROC)Proto3dGlGetProcAddress("glMultiDrawArraysIndirectBindlessCountNV");
  _glMultiDrawElementsIndirectBindlessCountNV = (PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSCOUNTNVPROC)Proto3dGlGetProcAddress("glMultiDrawElementsIndirectBindlessCountNV");
  _glGetTextureHandleNV = (PFNGLGETTEXTUREHANDLENVPROC)Proto3dGlGetProcAddress("glGetTextureHandleNV");
  _glGetTextureSamplerHandleNV = (PFNGLGETTEXTURESAMPLERHANDLENVPROC)Proto3dGlGetProcAddress("glGetTextureSamplerHandleNV");
  _glMakeTextureHandleResidentNV = (PFNGLMAKETEXTUREHANDLERESIDENTNVPROC)Proto3dGlGetProcAddress("glMakeTextureHandleResidentNV");
  _glMakeTextureHandleNonResidentNV = (PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC)Proto3dGlGetProcAddress("glMakeTextureHandleNonResidentNV");
  _glGetImageHandleNV = (PFNGLGETIMAGEHANDLENVPROC)Proto3dGlGetProcAddress("glGetImageHandleNV");
  _glMakeImageHandleResidentNV = (PFNGLMAKEIMAGEHANDLERESIDENTNVPROC)Proto3dGlGetProcAddress("glMakeImageHandleResidentNV");
  _glMakeImageHandleNonResidentNV = (PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC)Proto3dGlGetProcAddress("glMakeImageHandleNonResidentNV");
  _glUniformHandleui64NV = (PFNGLUNIFORMHANDLEUI64NVPROC)Proto3dGlGetProcAddress("glUniformHandleui64NV");
  _glUniformHandleui64vNV = (PFNGLUNIFORMHANDLEUI64VNVPROC)Proto3dGlGetProcAddress("glUniformHandleui64vNV");
  _glProgramUniformHandleui64NV = (PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC)Proto3dGlGetProcAddress("glProgramUniformHandleui64NV");
  _glProgramUniformHandleui64vNV = (PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC)Proto3dGlGetProcAddress("glProgramUniformHandleui64vNV");
  _glIsTextureHandleResidentNV = (PFNGLISTEXTUREHANDLERESIDENTNVPROC)Proto3dGlGetProcAddress("glIsTextureHandleResidentNV");
  _glIsImageHandleResidentNV = (PFNGLISIMAGEHANDLERESIDENTNVPROC)Proto3dGlGetProcAddress("glIsImageHandleResidentNV");
  _glBlendParameteriNV = (PFNGLBLENDPARAMETERINVPROC)Proto3dGlGetProcAddress("glBlendParameteriNV");
  _glBlendBarrierNV = (PFNGLBLENDBARRIERNVPROC)Proto3dGlGetProcAddress("glBlendBarrierNV");
  _glViewportPositionWScaleNV = (PFNGLVIEWPORTPOSITIONWSCALENVPROC)Proto3dGlGetProcAddress("glViewportPositionWScaleNV");
  _glCreateStatesNV = (PFNGLCREATESTATESNVPROC)Proto3dGlGetProcAddress("glCreateStatesNV");
  _glDeleteStatesNV = (PFNGLDELETESTATESNVPROC)Proto3dGlGetProcAddress("glDeleteStatesNV");
  _glIsStateNV = (PFNGLISSTATENVPROC)Proto3dGlGetProcAddress("glIsStateNV");
  _glStateCaptureNV = (PFNGLSTATECAPTURENVPROC)Proto3dGlGetProcAddress("glStateCaptureNV");
  _glGetCommandHeaderNV = (PFNGLGETCOMMANDHEADERNVPROC)Proto3dGlGetProcAddress("glGetCommandHeaderNV");
  _glGetStageIndexNV = (PFNGLGETSTAGEINDEXNVPROC)Proto3dGlGetProcAddress("glGetStageIndexNV");
  _glDrawCommandsNV = (PFNGLDRAWCOMMANDSNVPROC)Proto3dGlGetProcAddress("glDrawCommandsNV");
  _glDrawCommandsAddressNV = (PFNGLDRAWCOMMANDSADDRESSNVPROC)Proto3dGlGetProcAddress("glDrawCommandsAddressNV");
  _glDrawCommandsStatesNV = (PFNGLDRAWCOMMANDSSTATESNVPROC)Proto3dGlGetProcAddress("glDrawCommandsStatesNV");
  _glDrawCommandsStatesAddressNV = (PFNGLDRAWCOMMANDSSTATESADDRESSNVPROC)Proto3dGlGetProcAddress("glDrawCommandsStatesAddressNV");
  _glCreateCommandListsNV = (PFNGLCREATECOMMANDLISTSNVPROC)Proto3dGlGetProcAddress("glCreateCommandListsNV");
  _glDeleteCommandListsNV = (PFNGLDELETECOMMANDLISTSNVPROC)Proto3dGlGetProcAddress("glDeleteCommandListsNV");
  _glIsCommandListNV = (PFNGLISCOMMANDLISTNVPROC)Proto3dGlGetProcAddress("glIsCommandListNV");
  _glListDrawCommandsStatesClientNV = (PFNGLLISTDRAWCOMMANDSSTATESCLIENTNVPROC)Proto3dGlGetProcAddress("glListDrawCommandsStatesClientNV");
  _glCommandListSegmentsNV = (PFNGLCOMMANDLISTSEGMENTSNVPROC)Proto3dGlGetProcAddress("glCommandListSegmentsNV");
  _glCompileCommandListNV = (PFNGLCOMPILECOMMANDLISTNVPROC)Proto3dGlGetProcAddress("glCompileCommandListNV");
  _glCallCommandListNV = (PFNGLCALLCOMMANDLISTNVPROC)Proto3dGlGetProcAddress("glCallCommandListNV");
  _glBeginConditionalRenderNV = (PFNGLBEGINCONDITIONALRENDERNVPROC)Proto3dGlGetProcAddress("glBeginConditionalRenderNV");
  _glEndConditionalRenderNV = (PFNGLENDCONDITIONALRENDERNVPROC)Proto3dGlGetProcAddress("glEndConditionalRenderNV");
  _glSubpixelPrecisionBiasNV = (PFNGLSUBPIXELPRECISIONBIASNVPROC)Proto3dGlGetProcAddress("glSubpixelPrecisionBiasNV");
  _glConservativeRasterParameterfNV = (PFNGLCONSERVATIVERASTERPARAMETERFNVPROC)Proto3dGlGetProcAddress("glConservativeRasterParameterfNV");
  _glConservativeRasterParameteriNV = (PFNGLCONSERVATIVERASTERPARAMETERINVPROC)Proto3dGlGetProcAddress("glConservativeRasterParameteriNV");
  _glDrawVkImageNV = (PFNGLDRAWVKIMAGENVPROC)Proto3dGlGetProcAddress("glDrawVkImageNV");
  _glGetVkProcAddrNV = (PFNGLGETVKPROCADDRNVPROC)Proto3dGlGetProcAddress("glGetVkProcAddrNV");
  _glWaitVkSemaphoreNV = (PFNGLWAITVKSEMAPHORENVPROC)Proto3dGlGetProcAddress("glWaitVkSemaphoreNV");
  _glSignalVkSemaphoreNV = (PFNGLSIGNALVKSEMAPHORENVPROC)Proto3dGlGetProcAddress("glSignalVkSemaphoreNV");
  _glSignalVkFenceNV = (PFNGLSIGNALVKFENCENVPROC)Proto3dGlGetProcAddress("glSignalVkFenceNV");
  _glFragmentCoverageColorNV = (PFNGLFRAGMENTCOVERAGECOLORNVPROC)Proto3dGlGetProcAddress("glFragmentCoverageColorNV");
  _glCoverageModulationTableNV = (PFNGLCOVERAGEMODULATIONTABLENVPROC)Proto3dGlGetProcAddress("glCoverageModulationTableNV");
  _glGetCoverageModulationTableNV = (PFNGLGETCOVERAGEMODULATIONTABLENVPROC)Proto3dGlGetProcAddress("glGetCoverageModulationTableNV");
  _glCoverageModulationNV = (PFNGLCOVERAGEMODULATIONNVPROC)Proto3dGlGetProcAddress("glCoverageModulationNV");
  _glRenderbufferStorageMultisampleCoverageNV = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC)Proto3dGlGetProcAddress("glRenderbufferStorageMultisampleCoverageNV");
  _glUniform1i64NV = (PFNGLUNIFORM1I64NVPROC)Proto3dGlGetProcAddress("glUniform1i64NV");
  _glUniform2i64NV = (PFNGLUNIFORM2I64NVPROC)Proto3dGlGetProcAddress("glUniform2i64NV");
  _glUniform3i64NV = (PFNGLUNIFORM3I64NVPROC)Proto3dGlGetProcAddress("glUniform3i64NV");
  _glUniform4i64NV = (PFNGLUNIFORM4I64NVPROC)Proto3dGlGetProcAddress("glUniform4i64NV");
  _glUniform1i64vNV = (PFNGLUNIFORM1I64VNVPROC)Proto3dGlGetProcAddress("glUniform1i64vNV");
  _glUniform2i64vNV = (PFNGLUNIFORM2I64VNVPROC)Proto3dGlGetProcAddress("glUniform2i64vNV");
  _glUniform3i64vNV = (PFNGLUNIFORM3I64VNVPROC)Proto3dGlGetProcAddress("glUniform3i64vNV");
  _glUniform4i64vNV = (PFNGLUNIFORM4I64VNVPROC)Proto3dGlGetProcAddress("glUniform4i64vNV");
  _glUniform1ui64NV = (PFNGLUNIFORM1UI64NVPROC)Proto3dGlGetProcAddress("glUniform1ui64NV");
  _glUniform2ui64NV = (PFNGLUNIFORM2UI64NVPROC)Proto3dGlGetProcAddress("glUniform2ui64NV");
  _glUniform3ui64NV = (PFNGLUNIFORM3UI64NVPROC)Proto3dGlGetProcAddress("glUniform3ui64NV");
  _glUniform4ui64NV = (PFNGLUNIFORM4UI64NVPROC)Proto3dGlGetProcAddress("glUniform4ui64NV");
  _glUniform1ui64vNV = (PFNGLUNIFORM1UI64VNVPROC)Proto3dGlGetProcAddress("glUniform1ui64vNV");
  _glUniform2ui64vNV = (PFNGLUNIFORM2UI64VNVPROC)Proto3dGlGetProcAddress("glUniform2ui64vNV");
  _glUniform3ui64vNV = (PFNGLUNIFORM3UI64VNVPROC)Proto3dGlGetProcAddress("glUniform3ui64vNV");
  _glUniform4ui64vNV = (PFNGLUNIFORM4UI64VNVPROC)Proto3dGlGetProcAddress("glUniform4ui64vNV");
  _glGetUniformi64vNV = (PFNGLGETUNIFORMI64VNVPROC)Proto3dGlGetProcAddress("glGetUniformi64vNV");
  _glProgramUniform1i64NV = (PFNGLPROGRAMUNIFORM1I64NVPROC)Proto3dGlGetProcAddress("glProgramUniform1i64NV");
  _glProgramUniform2i64NV = (PFNGLPROGRAMUNIFORM2I64NVPROC)Proto3dGlGetProcAddress("glProgramUniform2i64NV");
  _glProgramUniform3i64NV = (PFNGLPROGRAMUNIFORM3I64NVPROC)Proto3dGlGetProcAddress("glProgramUniform3i64NV");
  _glProgramUniform4i64NV = (PFNGLPROGRAMUNIFORM4I64NVPROC)Proto3dGlGetProcAddress("glProgramUniform4i64NV");
  _glProgramUniform1i64vNV = (PFNGLPROGRAMUNIFORM1I64VNVPROC)Proto3dGlGetProcAddress("glProgramUniform1i64vNV");
  _glProgramUniform2i64vNV = (PFNGLPROGRAMUNIFORM2I64VNVPROC)Proto3dGlGetProcAddress("glProgramUniform2i64vNV");
  _glProgramUniform3i64vNV = (PFNGLPROGRAMUNIFORM3I64VNVPROC)Proto3dGlGetProcAddress("glProgramUniform3i64vNV");
  _glProgramUniform4i64vNV = (PFNGLPROGRAMUNIFORM4I64VNVPROC)Proto3dGlGetProcAddress("glProgramUniform4i64vNV");
  _glProgramUniform1ui64NV = (PFNGLPROGRAMUNIFORM1UI64NVPROC)Proto3dGlGetProcAddress("glProgramUniform1ui64NV");
  _glProgramUniform2ui64NV = (PFNGLPROGRAMUNIFORM2UI64NVPROC)Proto3dGlGetProcAddress("glProgramUniform2ui64NV");
  _glProgramUniform3ui64NV = (PFNGLPROGRAMUNIFORM3UI64NVPROC)Proto3dGlGetProcAddress("glProgramUniform3ui64NV");
  _glProgramUniform4ui64NV = (PFNGLPROGRAMUNIFORM4UI64NVPROC)Proto3dGlGetProcAddress("glProgramUniform4ui64NV");
  _glProgramUniform1ui64vNV = (PFNGLPROGRAMUNIFORM1UI64VNVPROC)Proto3dGlGetProcAddress("glProgramUniform1ui64vNV");
  _glProgramUniform2ui64vNV = (PFNGLPROGRAMUNIFORM2UI64VNVPROC)Proto3dGlGetProcAddress("glProgramUniform2ui64vNV");
  _glProgramUniform3ui64vNV = (PFNGLPROGRAMUNIFORM3UI64VNVPROC)Proto3dGlGetProcAddress("glProgramUniform3ui64vNV");
  _glProgramUniform4ui64vNV = (PFNGLPROGRAMUNIFORM4UI64VNVPROC)Proto3dGlGetProcAddress("glProgramUniform4ui64vNV");
  _glGetInternalformatSampleivNV = (PFNGLGETINTERNALFORMATSAMPLEIVNVPROC)Proto3dGlGetProcAddress("glGetInternalformatSampleivNV");
  _glGenPathsNV = (PFNGLGENPATHSNVPROC)Proto3dGlGetProcAddress("glGenPathsNV");
  _glDeletePathsNV = (PFNGLDELETEPATHSNVPROC)Proto3dGlGetProcAddress("glDeletePathsNV");
  _glIsPathNV = (PFNGLISPATHNVPROC)Proto3dGlGetProcAddress("glIsPathNV");
  _glPathCommandsNV = (PFNGLPATHCOMMANDSNVPROC)Proto3dGlGetProcAddress("glPathCommandsNV");
  _glPathCoordsNV = (PFNGLPATHCOORDSNVPROC)Proto3dGlGetProcAddress("glPathCoordsNV");
  _glPathSubCommandsNV = (PFNGLPATHSUBCOMMANDSNVPROC)Proto3dGlGetProcAddress("glPathSubCommandsNV");
  _glPathSubCoordsNV = (PFNGLPATHSUBCOORDSNVPROC)Proto3dGlGetProcAddress("glPathSubCoordsNV");
  _glPathStringNV = (PFNGLPATHSTRINGNVPROC)Proto3dGlGetProcAddress("glPathStringNV");
  _glPathGlyphsNV = (PFNGLPATHGLYPHSNVPROC)Proto3dGlGetProcAddress("glPathGlyphsNV");
  _glPathGlyphRangeNV = (PFNGLPATHGLYPHRANGENVPROC)Proto3dGlGetProcAddress("glPathGlyphRangeNV");
  _glWeightPathsNV = (PFNGLWEIGHTPATHSNVPROC)Proto3dGlGetProcAddress("glWeightPathsNV");
  _glCopyPathNV = (PFNGLCOPYPATHNVPROC)Proto3dGlGetProcAddress("glCopyPathNV");
  _glInterpolatePathsNV = (PFNGLINTERPOLATEPATHSNVPROC)Proto3dGlGetProcAddress("glInterpolatePathsNV");
  _glTransformPathNV = (PFNGLTRANSFORMPATHNVPROC)Proto3dGlGetProcAddress("glTransformPathNV");
  _glPathParameterivNV = (PFNGLPATHPARAMETERIVNVPROC)Proto3dGlGetProcAddress("glPathParameterivNV");
  _glPathParameteriNV = (PFNGLPATHPARAMETERINVPROC)Proto3dGlGetProcAddress("glPathParameteriNV");
  _glPathParameterfvNV = (PFNGLPATHPARAMETERFVNVPROC)Proto3dGlGetProcAddress("glPathParameterfvNV");
  _glPathParameterfNV = (PFNGLPATHPARAMETERFNVPROC)Proto3dGlGetProcAddress("glPathParameterfNV");
  _glPathDashArrayNV = (PFNGLPATHDASHARRAYNVPROC)Proto3dGlGetProcAddress("glPathDashArrayNV");
  _glPathStencilFuncNV = (PFNGLPATHSTENCILFUNCNVPROC)Proto3dGlGetProcAddress("glPathStencilFuncNV");
  _glPathStencilDepthOffsetNV = (PFNGLPATHSTENCILDEPTHOFFSETNVPROC)Proto3dGlGetProcAddress("glPathStencilDepthOffsetNV");
  _glStencilFillPathNV = (PFNGLSTENCILFILLPATHNVPROC)Proto3dGlGetProcAddress("glStencilFillPathNV");
  _glStencilStrokePathNV = (PFNGLSTENCILSTROKEPATHNVPROC)Proto3dGlGetProcAddress("glStencilStrokePathNV");
  _glStencilFillPathInstancedNV = (PFNGLSTENCILFILLPATHINSTANCEDNVPROC)Proto3dGlGetProcAddress("glStencilFillPathInstancedNV");
  _glStencilStrokePathInstancedNV = (PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC)Proto3dGlGetProcAddress("glStencilStrokePathInstancedNV");
  _glPathCoverDepthFuncNV = (PFNGLPATHCOVERDEPTHFUNCNVPROC)Proto3dGlGetProcAddress("glPathCoverDepthFuncNV");
  _glCoverFillPathNV = (PFNGLCOVERFILLPATHNVPROC)Proto3dGlGetProcAddress("glCoverFillPathNV");
  _glCoverStrokePathNV = (PFNGLCOVERSTROKEPATHNVPROC)Proto3dGlGetProcAddress("glCoverStrokePathNV");
  _glCoverFillPathInstancedNV = (PFNGLCOVERFILLPATHINSTANCEDNVPROC)Proto3dGlGetProcAddress("glCoverFillPathInstancedNV");
  _glCoverStrokePathInstancedNV = (PFNGLCOVERSTROKEPATHINSTANCEDNVPROC)Proto3dGlGetProcAddress("glCoverStrokePathInstancedNV");
  _glGetPathParameterivNV = (PFNGLGETPATHPARAMETERIVNVPROC)Proto3dGlGetProcAddress("glGetPathParameterivNV");
  _glGetPathParameterfvNV = (PFNGLGETPATHPARAMETERFVNVPROC)Proto3dGlGetProcAddress("glGetPathParameterfvNV");
  _glGetPathCommandsNV = (PFNGLGETPATHCOMMANDSNVPROC)Proto3dGlGetProcAddress("glGetPathCommandsNV");
  _glGetPathCoordsNV = (PFNGLGETPATHCOORDSNVPROC)Proto3dGlGetProcAddress("glGetPathCoordsNV");
  _glGetPathDashArrayNV = (PFNGLGETPATHDASHARRAYNVPROC)Proto3dGlGetProcAddress("glGetPathDashArrayNV");
  _glGetPathMetricsNV = (PFNGLGETPATHMETRICSNVPROC)Proto3dGlGetProcAddress("glGetPathMetricsNV");
  _glGetPathMetricRangeNV = (PFNGLGETPATHMETRICRANGENVPROC)Proto3dGlGetProcAddress("glGetPathMetricRangeNV");
  _glGetPathSpacingNV = (PFNGLGETPATHSPACINGNVPROC)Proto3dGlGetProcAddress("glGetPathSpacingNV");
  _glIsPointInFillPathNV = (PFNGLISPOINTINFILLPATHNVPROC)Proto3dGlGetProcAddress("glIsPointInFillPathNV");
  _glIsPointInStrokePathNV = (PFNGLISPOINTINSTROKEPATHNVPROC)Proto3dGlGetProcAddress("glIsPointInStrokePathNV");
  _glGetPathLengthNV = (PFNGLGETPATHLENGTHNVPROC)Proto3dGlGetProcAddress("glGetPathLengthNV");
  _glPointAlongPathNV = (PFNGLPOINTALONGPATHNVPROC)Proto3dGlGetProcAddress("glPointAlongPathNV");
  _glMatrixLoad3x2fNV = (PFNGLMATRIXLOAD3X2FNVPROC)Proto3dGlGetProcAddress("glMatrixLoad3x2fNV");
  _glMatrixLoad3x3fNV = (PFNGLMATRIXLOAD3X3FNVPROC)Proto3dGlGetProcAddress("glMatrixLoad3x3fNV");
  _glMatrixLoadTranspose3x3fNV = (PFNGLMATRIXLOADTRANSPOSE3X3FNVPROC)Proto3dGlGetProcAddress("glMatrixLoadTranspose3x3fNV");
  _glMatrixMult3x2fNV = (PFNGLMATRIXMULT3X2FNVPROC)Proto3dGlGetProcAddress("glMatrixMult3x2fNV");
  _glMatrixMult3x3fNV = (PFNGLMATRIXMULT3X3FNVPROC)Proto3dGlGetProcAddress("glMatrixMult3x3fNV");
  _glMatrixMultTranspose3x3fNV = (PFNGLMATRIXMULTTRANSPOSE3X3FNVPROC)Proto3dGlGetProcAddress("glMatrixMultTranspose3x3fNV");
  _glStencilThenCoverFillPathNV = (PFNGLSTENCILTHENCOVERFILLPATHNVPROC)Proto3dGlGetProcAddress("glStencilThenCoverFillPathNV");
  _glStencilThenCoverStrokePathNV = (PFNGLSTENCILTHENCOVERSTROKEPATHNVPROC)Proto3dGlGetProcAddress("glStencilThenCoverStrokePathNV");
  _glStencilThenCoverFillPathInstancedNV = (PFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC)Proto3dGlGetProcAddress("glStencilThenCoverFillPathInstancedNV");
  _glStencilThenCoverStrokePathInstancedNV = (PFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC)Proto3dGlGetProcAddress("glStencilThenCoverStrokePathInstancedNV");
  _glPathGlyphIndexRangeNV = (PFNGLPATHGLYPHINDEXRANGENVPROC)Proto3dGlGetProcAddress("glPathGlyphIndexRangeNV");
  _glPathGlyphIndexArrayNV = (PFNGLPATHGLYPHINDEXARRAYNVPROC)Proto3dGlGetProcAddress("glPathGlyphIndexArrayNV");
  _glPathMemoryGlyphIndexArrayNV = (PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC)Proto3dGlGetProcAddress("glPathMemoryGlyphIndexArrayNV");
  _glProgramPathFragmentInputGenNV = (PFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC)Proto3dGlGetProcAddress("glProgramPathFragmentInputGenNV");
  _glGetProgramResourcefvNV = (PFNGLGETPROGRAMRESOURCEFVNVPROC)Proto3dGlGetProcAddress("glGetProgramResourcefvNV");
  _glFramebufferSampleLocationsfvNV = (PFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROC)Proto3dGlGetProcAddress("glFramebufferSampleLocationsfvNV");
  _glNamedFramebufferSampleLocationsfvNV = (PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROC)Proto3dGlGetProcAddress("glNamedFramebufferSampleLocationsfvNV");
  _glResolveDepthValuesNV = (PFNGLRESOLVEDEPTHVALUESNVPROC)Proto3dGlGetProcAddress("glResolveDepthValuesNV");
  _glMakeBufferResidentNV = (PFNGLMAKEBUFFERRESIDENTNVPROC)Proto3dGlGetProcAddress("glMakeBufferResidentNV");
  _glMakeBufferNonResidentNV = (PFNGLMAKEBUFFERNONRESIDENTNVPROC)Proto3dGlGetProcAddress("glMakeBufferNonResidentNV");
  _glIsBufferResidentNV = (PFNGLISBUFFERRESIDENTNVPROC)Proto3dGlGetProcAddress("glIsBufferResidentNV");
  _glMakeNamedBufferResidentNV = (PFNGLMAKENAMEDBUFFERRESIDENTNVPROC)Proto3dGlGetProcAddress("glMakeNamedBufferResidentNV");
  _glMakeNamedBufferNonResidentNV = (PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC)Proto3dGlGetProcAddress("glMakeNamedBufferNonResidentNV");
  _glIsNamedBufferResidentNV = (PFNGLISNAMEDBUFFERRESIDENTNVPROC)Proto3dGlGetProcAddress("glIsNamedBufferResidentNV");
  _glGetBufferParameterui64vNV = (PFNGLGETBUFFERPARAMETERUI64VNVPROC)Proto3dGlGetProcAddress("glGetBufferParameterui64vNV");
  _glGetNamedBufferParameterui64vNV = (PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC)Proto3dGlGetProcAddress("glGetNamedBufferParameterui64vNV");
  _glGetIntegerui64vNV = (PFNGLGETINTEGERUI64VNVPROC)Proto3dGlGetProcAddress("glGetIntegerui64vNV");
  _glUniformui64NV = (PFNGLUNIFORMUI64NVPROC)Proto3dGlGetProcAddress("glUniformui64NV");
  _glUniformui64vNV = (PFNGLUNIFORMUI64VNVPROC)Proto3dGlGetProcAddress("glUniformui64vNV");
  _glGetUniformui64vNV = (PFNGLGETUNIFORMUI64VNVPROC)Proto3dGlGetProcAddress("glGetUniformui64vNV");
  _glProgramUniformui64NV = (PFNGLPROGRAMUNIFORMUI64NVPROC)Proto3dGlGetProcAddress("glProgramUniformui64NV");
  _glProgramUniformui64vNV = (PFNGLPROGRAMUNIFORMUI64VNVPROC)Proto3dGlGetProcAddress("glProgramUniformui64vNV");
  _glTextureBarrierNV = (PFNGLTEXTUREBARRIERNVPROC)Proto3dGlGetProcAddress("glTextureBarrierNV");
  _glVertexAttribL1i64NV = (PFNGLVERTEXATTRIBL1I64NVPROC)Proto3dGlGetProcAddress("glVertexAttribL1i64NV");
  _glVertexAttribL2i64NV = (PFNGLVERTEXATTRIBL2I64NVPROC)Proto3dGlGetProcAddress("glVertexAttribL2i64NV");
  _glVertexAttribL3i64NV = (PFNGLVERTEXATTRIBL3I64NVPROC)Proto3dGlGetProcAddress("glVertexAttribL3i64NV");
  _glVertexAttribL4i64NV = (PFNGLVERTEXATTRIBL4I64NVPROC)Proto3dGlGetProcAddress("glVertexAttribL4i64NV");
  _glVertexAttribL1i64vNV = (PFNGLVERTEXATTRIBL1I64VNVPROC)Proto3dGlGetProcAddress("glVertexAttribL1i64vNV");
  _glVertexAttribL2i64vNV = (PFNGLVERTEXATTRIBL2I64VNVPROC)Proto3dGlGetProcAddress("glVertexAttribL2i64vNV");
  _glVertexAttribL3i64vNV = (PFNGLVERTEXATTRIBL3I64VNVPROC)Proto3dGlGetProcAddress("glVertexAttribL3i64vNV");
  _glVertexAttribL4i64vNV = (PFNGLVERTEXATTRIBL4I64VNVPROC)Proto3dGlGetProcAddress("glVertexAttribL4i64vNV");
  _glVertexAttribL1ui64NV = (PFNGLVERTEXATTRIBL1UI64NVPROC)Proto3dGlGetProcAddress("glVertexAttribL1ui64NV");
  _glVertexAttribL2ui64NV = (PFNGLVERTEXATTRIBL2UI64NVPROC)Proto3dGlGetProcAddress("glVertexAttribL2ui64NV");
  _glVertexAttribL3ui64NV = (PFNGLVERTEXATTRIBL3UI64NVPROC)Proto3dGlGetProcAddress("glVertexAttribL3ui64NV");
  _glVertexAttribL4ui64NV = (PFNGLVERTEXATTRIBL4UI64NVPROC)Proto3dGlGetProcAddress("glVertexAttribL4ui64NV");
  _glVertexAttribL1ui64vNV = (PFNGLVERTEXATTRIBL1UI64VNVPROC)Proto3dGlGetProcAddress("glVertexAttribL1ui64vNV");
  _glVertexAttribL2ui64vNV = (PFNGLVERTEXATTRIBL2UI64VNVPROC)Proto3dGlGetProcAddress("glVertexAttribL2ui64vNV");
  _glVertexAttribL3ui64vNV = (PFNGLVERTEXATTRIBL3UI64VNVPROC)Proto3dGlGetProcAddress("glVertexAttribL3ui64vNV");
  _glVertexAttribL4ui64vNV = (PFNGLVERTEXATTRIBL4UI64VNVPROC)Proto3dGlGetProcAddress("glVertexAttribL4ui64vNV");
  _glGetVertexAttribLi64vNV = (PFNGLGETVERTEXATTRIBLI64VNVPROC)Proto3dGlGetProcAddress("glGetVertexAttribLi64vNV");
  _glGetVertexAttribLui64vNV = (PFNGLGETVERTEXATTRIBLUI64VNVPROC)Proto3dGlGetProcAddress("glGetVertexAttribLui64vNV");
  _glVertexAttribLFormatNV = (PFNGLVERTEXATTRIBLFORMATNVPROC)Proto3dGlGetProcAddress("glVertexAttribLFormatNV");
  _glBufferAddressRangeNV = (PFNGLBUFFERADDRESSRANGENVPROC)Proto3dGlGetProcAddress("glBufferAddressRangeNV");
  _glVertexFormatNV = (PFNGLVERTEXFORMATNVPROC)Proto3dGlGetProcAddress("glVertexFormatNV");
  _glNormalFormatNV = (PFNGLNORMALFORMATNVPROC)Proto3dGlGetProcAddress("glNormalFormatNV");
  _glColorFormatNV = (PFNGLCOLORFORMATNVPROC)Proto3dGlGetProcAddress("glColorFormatNV");
  _glIndexFormatNV = (PFNGLINDEXFORMATNVPROC)Proto3dGlGetProcAddress("glIndexFormatNV");
  _glTexCoordFormatNV = (PFNGLTEXCOORDFORMATNVPROC)Proto3dGlGetProcAddress("glTexCoordFormatNV");
  _glEdgeFlagFormatNV = (PFNGLEDGEFLAGFORMATNVPROC)Proto3dGlGetProcAddress("glEdgeFlagFormatNV");
  _glSecondaryColorFormatNV = (PFNGLSECONDARYCOLORFORMATNVPROC)Proto3dGlGetProcAddress("glSecondaryColorFormatNV");
  _glFogCoordFormatNV = (PFNGLFOGCOORDFORMATNVPROC)Proto3dGlGetProcAddress("glFogCoordFormatNV");
  _glVertexAttribFormatNV = (PFNGLVERTEXATTRIBFORMATNVPROC)Proto3dGlGetProcAddress("glVertexAttribFormatNV");
  _glVertexAttribIFormatNV = (PFNGLVERTEXATTRIBIFORMATNVPROC)Proto3dGlGetProcAddress("glVertexAttribIFormatNV");
  _glGetIntegerui64i_vNV = (PFNGLGETINTEGERUI64I_VNVPROC)Proto3dGlGetProcAddress("glGetIntegerui64i_vNV");
  _glViewportSwizzleNV = (PFNGLVIEWPORTSWIZZLENVPROC)Proto3dGlGetProcAddress("glViewportSwizzleNV");
  _glFramebufferTextureMultiviewOVR = (PFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC)Proto3dGlGetProcAddress("glFramebufferTextureMultiviewOVR");
// }}}
}

#ifdef __cplusplus
};
#endif

#ifdef _WIN32
# define WIN32_LEAN_AND_MEAN 1
# include <windows.h>

static HMODULE proto3d_libgl;

#ifdef __cplusplus
extern "C" {
#endif

void Proto3dOpenLibGl(void) {
  proto3d_libgl = LoadLibraryA("opengl32.dll");
}

void Proto3dCloseLibGl(void) {
  FreeLibrary(proto3d_libgl);
}

Proto3dGlProc Proto3dGlGetProcAddress(const char *proc) {
  Proto3dGlProc res;

  res = (Proto3dGlProc)wglGetProcAddress(proc);
  if (!res) {
    res = (Proto3dGlProc)GetProcAddress(proto3d_libgl, proc);
  }
  return res;
}

#ifdef __cplusplus
};
#endif
#elif defined(__APPLE__) || defined(__APPLE_CC__)
# include <Carbon/Carbon.h>

static CFBundleRef bundle;
static CFURLRef bundle_url;

#ifdef __cplusplus
extern "C" {
#endif

void Proto3dOpenLibGl(void) {
  bundle_url = CFURLCreateWithFileSystemPath(kCFAllocatorDefault,
    CFSTR("/System/Library/Frameworks/OpenGL.framework"),
    kCFURLPOSIXPathStyle, true);

  bundle = CFBundleCreate(kCFAllocatorDefault, bundle_url);
  assert(bundle != NULL && "CFBundleCreate failed");
}

void Proto3dCloseLibGl(void) {
  CFRelease(bundle);
  CFRelease(bundle_url);
}

Proto3dGlProc Proto3dGlGetProcAddress(const char *proc) {
  Proto3dGlProc res;

  CFStringRef procname = CFStringCreateWithCString(kCFAllocatorDefault, proc,
    kCFStringEncodingASCII);
  *(void **)(&res) = CFBundleGetFunctionPointerForName(bundle, procname);
  CFRelease(procname);
  return res;
}

#ifdef __cplusplus
};
#endif

#else  // Linux
# include <dlfcn.h>
# include <GL/glx.h>

static void *proto3d_libgl;
static PFNGLXGETPROCADDRESSPROC glx_get_proc_address;

#ifdef __cplusplus
extern "C" {
#endif

void Proto3dOpenLibGl(void) {
  proto3d_libgl = dlopen("libGL.so.1", RTLD_LAZY | RTLD_GLOBAL);
  *(void **)(&glx_get_proc_address) = dlsym(proto3d_libgl, "glXGetProcAddressARB");
}

void Proto3dCloseLibGl(void) {
  dlclose(proto3d_libgl);
}

Proto3dGlProc Proto3dGlGetProcAddress(const char *proc) {
  Proto3dGlProc res;

  res = glx_get_proc_address((const GLubyte *)proc);
  if (!res) {
    *(void **)(&res) = dlsym(proto3d_libgl, proc);
  }
  return res;
}

#ifdef __cplusplus
};
#endif

#endif

#ifdef __cplusplus
extern "C" {
#endif

int Proto3dGlLoadedVersion(GLint *major, GLint *minor) {
  if (!glGetIntegerv) {
    *major = 0;
    *minor = 0;
    return -1;
  }
  glGetIntegerv(GL_MAJOR_VERSION, major);
  glGetIntegerv(GL_MINOR_VERSION, minor);
  return 0;
}

int Proto3dOpenLibGlAndLoadCoreProfile(void)
{
  Proto3dOpenLibGl();
  Proto3dGlLoadAllCoreProfileProcs();
  Proto3dCloseLibGl();

  GLint major = 0;
  GLint minor = 0;
  if (Proto3dGlLoadedVersion(&major, &minor) < 0) {
    return -1;
  }
  return major < 3 ? -1 : 0;
}

const char *Proto3dGlLastErrorString() {
  GLenum error = glGetError();
  switch (error) {
    case GL_NO_ERROR:
      return nullptr;
    case GL_INVALID_ENUM:
      return "GL_INVALID_ENUM";
    case GL_INVALID_VALUE:
      return "GL_INVALID_VALUE";
    case GL_INVALID_OPERATION:
      return "GL_INVALID_OPERATION";
    case GL_INVALID_FRAMEBUFFER_OPERATION:
      return "GL_INVALID_FRAMEBUFFER_OPERATION";
    case GL_OUT_OF_MEMORY:
      return "GL_OUT_OF_MEMORY";
    case GL_STACK_UNDERFLOW:
      return "GL_STACK_UNDERFLOW";
    case GL_STACK_OVERFLOW:
      return "GL_STACK_OVERFLOW";
    default:
      return "unknown error type";
  }
}


#ifdef __cplusplus
};
#endif

#endif  // PROTO3D_GLCOREARB_IMPLEMENTATION
#endif  // PROTO3D_GLCOREARB_H_
